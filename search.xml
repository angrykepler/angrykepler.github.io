<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>poi</title>
      <link href="/2023/01/03/POI/"/>
      <url>/2023/01/03/POI/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POI工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POIUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">XLS</span> <span class="operator">=</span> <span class="string">&quot;xls&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">XLSX</span> <span class="operator">=</span> <span class="string">&quot;xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * * 读取excel文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelFile excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startRow  读取数据的起始行, 行号从0开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String[]&gt; readExcelFile(MultipartFile excelFile, <span class="type">int</span> startRow) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 检查文件</span></span><br><span class="line">        checkFile(excelFile);</span><br><span class="line">        <span class="comment">// 获得工作簿对象</span></span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> getWorkBook(excelFile);</span><br><span class="line">        <span class="comment">// 创建返回对象，把每行中的值作为一个数组，所有的行作为一个集合返回</span></span><br><span class="line">        List&lt;String[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (workbook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">sheetNum</span> <span class="operator">=</span> <span class="number">0</span>; sheetNum &lt; workbook.getNumberOfSheets(); sheetNum++) &#123;</span><br><span class="line">                <span class="comment">// 获取当前sheet工作表</span></span><br><span class="line">                <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.getSheetAt(sheetNum);</span><br><span class="line">                <span class="keyword">if</span> (sheet == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 获得当前sheet的结束行</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">lastRowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">                <span class="keyword">if</span> (startRow &lt; <span class="number">0</span> || startRow &gt; lastRowNum) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;wrong startRow&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 循环除了第一行之外的所有行</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> startRow; rowNum &lt;= lastRowNum; rowNum++) &#123;</span><br><span class="line">                    <span class="comment">// 获得当前行</span></span><br><span class="line">                    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(rowNum);</span><br><span class="line">                    <span class="keyword">if</span> (row == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 获得当前行的开始列</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">firstCellNum</span> <span class="operator">=</span> row.getFirstCellNum();</span><br><span class="line">                    <span class="comment">// 获得当前行的列数</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">lastCellNum</span> <span class="operator">=</span> row.getPhysicalNumberOfCells();</span><br><span class="line">                    String[] cells = <span class="keyword">new</span> <span class="title class_">String</span>[row.getPhysicalNumberOfCells()];</span><br><span class="line">                    <span class="comment">// 循环当前行</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">cellNum</span> <span class="operator">=</span> firstCellNum; cellNum &lt; lastCellNum; cellNum++) &#123;</span><br><span class="line">                        <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row.getCell(cellNum);</span><br><span class="line">                        cells[cellNum] = getCellValue(cell);</span><br><span class="line">                    &#125;</span><br><span class="line">                    list.add(cells);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成excel文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data      数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> extension 文件扩展</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title function_">createExcelFile</span><span class="params">(List&lt;String&gt; attributes, List&lt;List&lt;String&gt;&gt; data, String extension)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建workbook</span></span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(extension)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (extension.equalsIgnoreCase(XLS)) &#123;</span><br><span class="line">            <span class="comment">// 2003版本</span></span><br><span class="line">            workbook = <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (extension.equalsIgnoreCase(XLSX)) &#123;</span><br><span class="line">            <span class="comment">// 2007版本</span></span><br><span class="line">            workbook = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (workbook != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 2. 创建sheet</span></span><br><span class="line">            <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> workbook.createSheet(<span class="string">&quot;sheet1&quot;</span>);</span><br><span class="line">            <span class="comment">// 3. 创建row: 添加属性行</span></span><br><span class="line">            <span class="type">Row</span> <span class="variable">row0</span> <span class="operator">=</span> sheet.createRow(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; attributes.size(); i++) &#123;</span><br><span class="line">                <span class="type">Cell</span> <span class="variable">cell</span> <span class="operator">=</span> row0.createCell(i);</span><br><span class="line">                cell.setCellValue(attributes.get(i).trim());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4. 插入数据</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(data)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">                    List&lt;String&gt; rowInfo = data.get(i);</span><br><span class="line">                    <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 添加数据</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; rowInfo.size(); j++) &#123;</span><br><span class="line">                        row.createCell(j).setCellValue(rowInfo.get(j));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前列数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cell 列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCellValue</span><span class="params">(Cell cell)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cellValue</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cell == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cellValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把数字当成String来读，避免出现1读成1.0的情况</span></span><br><span class="line">        <span class="keyword">if</span> (cell.getCellTypeEnum() == CellType.NUMERIC) &#123;</span><br><span class="line">            cell.setCellType(CellType.STRING);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断数据的类型</span></span><br><span class="line">        <span class="keyword">switch</span> (cell.getCellTypeEnum()) &#123;</span><br><span class="line">            <span class="keyword">case</span> NUMERIC:</span><br><span class="line">                cellValue = String.valueOf(cell.getNumericCellValue());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STRING:</span><br><span class="line">                cellValue = String.valueOf(cell.getStringCellValue());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BOOLEAN:</span><br><span class="line">                cellValue = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> FORMULA:</span><br><span class="line">                cellValue = String.valueOf(cell.getCellFormula());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> BLANK:</span><br><span class="line">                cellValue = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ERROR:</span><br><span class="line">                cellValue = <span class="string">&quot;非法字符&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                cellValue = <span class="string">&quot;未知类型&quot;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cellValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得工作簿对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelFile excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 工作簿对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title function_">getWorkBook</span><span class="params">(MultipartFile excelFile)</span> &#123;</span><br><span class="line">        <span class="comment">// 获得文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> excelFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 创建Workbook工作簿对象，表示整个excel</span></span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得excel文件的io流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> excelFile.getInputStream();</span><br><span class="line">            <span class="comment">// 根据文件后缀名不同(xls和xlsx)获得不同的workbook实现类对象</span></span><br><span class="line">            <span class="keyword">if</span> (fileName.endsWith(XLS)) &#123;</span><br><span class="line">                <span class="comment">// 2003版本</span></span><br><span class="line">                workbook = <span class="keyword">new</span> <span class="title class_">HSSFWorkbook</span>(is);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileName.endsWith(XLSX)) &#123;</span><br><span class="line">                <span class="comment">// 2007版本</span></span><br><span class="line">                workbook = <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(is);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workbook;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> excelFile excel文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkFile</span><span class="params">(MultipartFile excelFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//判断文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == excelFile) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileNotFoundException</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> excelFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">//判断文件是否是excel文件</span></span><br><span class="line">        <span class="keyword">if</span> (!fileName.endsWith(XLS) &amp;&amp; !fileName.endsWith(XLSX)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(fileName + <span class="string">&quot;不是excel文件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表格处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮件</title>
      <link href="/2023/01/03/email/"/>
      <url>/2023/01/03/email/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MailUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span> <span class="comment">//注入 application.properties中指定的用户名</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//用于发送文件</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送普通文本邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSimpleMail</span><span class="params">(</span></span><br><span class="line"><span class="params">            String to, String subject, String content</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        message.setTo(to);<span class="comment">//收信人</span></span><br><span class="line">        message.setSubject(subject);<span class="comment">//主题</span></span><br><span class="line">        message.setText(content);<span class="comment">//内容</span></span><br><span class="line">        message.setFrom(from);<span class="comment">//发信人</span></span><br><span class="line"></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送html邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 书体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容(可以包含html等标签)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHtmlMail</span><span class="params">(</span></span><br><span class="line"><span class="params">            String to, String subject, String content</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="comment">//使用MimeMessage，MIME协议</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper;</span><br><span class="line">        <span class="comment">//MimeMessageHelper帮助我们设置更丰富的内容</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="literal">true</span>);<span class="comment">//true代表支持html</span></span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            log.info(<span class="string">&quot;发送HTML邮件成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;发送HTML邮件失败：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带附件的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to       收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject  主体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 附件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendAttachmentMail</span><span class="params">(</span></span><br><span class="line"><span class="params">            String to, String subject,</span></span><br><span class="line"><span class="params">            String content, String filePath</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;发送带附件邮件开始：&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, to, subject, content, filePath);</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        MimeMessageHelper helper;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//true代表支持多组件，如附件，图片等</span></span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getFilename();</span><br><span class="line">            helper.addAttachment(fileName, file);<span class="comment">//添加附件，可多次调用该方法添加多个附件</span></span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            log.info(<span class="string">&quot;发送带附件邮件成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送带附件邮件失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带图片的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscPath 图片路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscId   rscId 图片ID,用于在&lt;img\&gt;标签中使用，从而显示图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendInlineResourceMail</span><span class="params">(</span></span><br><span class="line"><span class="params">            String to, String subject, String content,</span></span><br><span class="line"><span class="params">            String rscPath, String rscId)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志</span></span><br><span class="line">        log.info(<span class="string">&quot;发送带图片邮件开始：&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, to, subject, content, rscPath, rscId);</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        MimeMessageHelper helper;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            helper = <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="literal">true</span>);</span><br><span class="line">            <span class="type">FileSystemResource</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(rscPath));</span><br><span class="line">            <span class="comment">//重复使用添加多个图片</span></span><br><span class="line">            helper.addInline(rscId, res);</span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            log.info(<span class="string">&quot;发送带图片邮件成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送带图片邮件失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service</span></span><br><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送文本邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sendSimpleMail</span><span class="params">(String to, String subject, String content)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送HTML邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带附件的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to       收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject  主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 附件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendAttachmentsMail</span><span class="params">(String to, String subject, String content, String filePath)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//impl</span></span><br><span class="line"><span class="keyword">package</span> org.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.FileSystemResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.SimpleMailMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSender;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmailService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="built_in">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spring Boot 提供了一个发送邮件的简单抽象，使用的是下面这个接口，这里直接注入即可使用</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置文件中我的qq邮箱</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.from&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单文本邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSimpleMail</span><span class="params">(String to, String subject, String content)</span> &#123;</span><br><span class="line">        <span class="comment">//创建SimpleMailMessage对象</span></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        <span class="comment">//邮件发送人</span></span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        <span class="comment">//邮件接收人</span></span><br><span class="line">        message.setTo(to);</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        <span class="comment">//邮件内容</span></span><br><span class="line">        message.setText(content);</span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * html邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 收件人,多个时参数形式 ：&quot;xxx@xxx.com,xxx@xxx.com,xxx@xxx.com&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHtmlMail</span><span class="params">(String to, String subject, String content)</span> &#123;</span><br><span class="line">        <span class="comment">//获取MimeMessage对象</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper messageHelper;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            messageHelper = <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//邮件发送人</span></span><br><span class="line">            messageHelper.setFrom(from);</span><br><span class="line">            <span class="comment">//邮件接收人,设置多个收件人地址</span></span><br><span class="line">            InternetAddress[] internetAddressTo = InternetAddress.parse(to);</span><br><span class="line">            messageHelper.setTo(internetAddressTo);</span><br><span class="line">            <span class="comment">//messageHelper.setTo(to);</span></span><br><span class="line">            <span class="comment">//邮件主题</span></span><br><span class="line">            message.setSubject(subject);</span><br><span class="line">            <span class="comment">//邮件内容，html格式</span></span><br><span class="line">            messageHelper.setText(content, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//发送</span></span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            <span class="comment">//日志信息</span></span><br><span class="line">            logger.info(<span class="string">&quot;邮件已经发送。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;发送邮件时发生异常！&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带附件的邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 收件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 附件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendAttachmentsMail</span><span class="params">(String to, String subject, String content, String filePath)</span> &#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(message, <span class="literal">true</span>);</span><br><span class="line">            helper.setFrom(from);</span><br><span class="line">            helper.setTo(to);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(content, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">FileSystemResource</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> filePath.substring(filePath.lastIndexOf(File.separator));</span><br><span class="line">            helper.addAttachment(fileName, file);</span><br><span class="line">            mailSender.send(message);</span><br><span class="line">            <span class="comment">//日志信息</span></span><br><span class="line">            logger.info(<span class="string">&quot;邮件已经发送。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;发送邮件时发生异常！&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">123</span><span class="string">@qq.comc</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">111111</span></span><br><span class="line">    <span class="comment">#    port: 465</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">587</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">smtp</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">stmp:</span></span><br><span class="line">          <span class="attr">ssl:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml-schemas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--SpringBoot maven插件--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 可以将应用打成一个可执行的jar包 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置启动入口 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- manClass即使不配置 , SprinBoot也在打包的时候也清楚入口是哪个 , 其实不用配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>org.example.App<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  不使用parent 需要设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java email </category>
          
      </categories>
      
      
        <tags>
            
            <tag> email 处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template</title>
      <link href="/2022/06/21/template/"/>
      <url>/2022/06/21/template/</url>
      
        <content type="html"><![CDATA[<p>template是官方提供的工具类，包含相应的设计思想</p><p>自定义的工具类一般称为<code>XXXUtils</code>，如<code>DBUtils</code></p><h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a><code>RestTemplate</code></h3><p>模拟<code>http</code>网络请求</p><ol><li>原生<code>JDK</code>自带的<code>URLConnection</code></li><li><code>RestTemplate</code>封装</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置类 加入ioc</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">createRest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>   <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//一言 api</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://v1.hitokoto.cn?c=c&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a><code>JDBCTemplate</code></h3>]]></content>
      
      
      <categories>
          
          <category> template </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单点登录</title>
      <link href="/2022/06/18/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2022/06/18/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="注册登录流程"><a href="#注册登录流程" class="headerlink" title="注册登录流程"></a>注册登录流程</h3><h3 id="携带token访问流程"><a href="#携带token访问流程" class="headerlink" title="携带token访问流程"></a>携带<code>token</code>访问流程</h3><p><code>JWT</code>：<code>JSON Web Token</code>跨域身份解决方案</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JWT (JSON WEB TOKEN)</span><br><span class="line">优点：</span><br><span class="line">用户在前端输入用户名和密码(如果校验正确)</span><br><span class="line">JWTUtil工具会生成一个token字符串值,</span><br><span class="line">要求每个请求都要带上这个token值(请求头header/请求URL地址参数)</span><br><span class="line">controller方法中进行判断: .</span><br><span class="line">获得token字符串(可以根据这个字符串得到用户名、相关角色等信息)</span><br><span class="line">JWT和SESSION比较:</span><br><span class="line">Session存在tomcat (占用内存)，有个过期时间默认是30分钟。</span><br><span class="line">JWT减少内存占用(没有)|</span><br><span class="line">缺点：</span><br><span class="line">JWT默认缺点（不能踢出上一个登录用户）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>token格式</code>：<code>xxx.xxxxx.xxxx</code></p><p><code>Encoded</code>&lt;&lt;&#x3D;&#x3D;&#x3D;&gt;&gt;<code>Decoded</code>（<code>baseurl64</code>）</p><p><code>Decoded</code>:</p><ol><li><code>header</code>:头信息，令牌类型，签名算法</li><li><code>payload</code>:负载，存储一些信息，例如用户、生成时间，有效期等</li><li><code>verify signature</code>:签名，秘钥，签名算法</li></ol><p><code>BCR</code>:全称<code>Bcrypt</code>，加密解密</p><p>特点：</p><ol><li>每次加密生成的<code>hash</code>值不同</li></ol><h3 id="动态权限管理"><a href="#动态权限管理" class="headerlink" title="动态权限管理"></a>动态权限管理</h3><p>将角色、权限、访问资源路径存储在数据库中</p>]]></content>
      
      
      <categories>
          
          <category> jwt token springSecurity 未完成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端分离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2022/06/17/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/17/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>管理项目文件，进入项目文件夹</p><h3 id="1-用户签名全局（只需要初始化一次）"><a href="#1-用户签名全局（只需要初始化一次）" class="headerlink" title="1.用户签名全局（只需要初始化一次）"></a>1.用户签名全局（只需要初始化一次）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --globle user.name [name]</span><br><span class="line">git config --globle user.email [email]</span><br><span class="line">//系统不会验证真实性，仅仅是提交代码需要</span><br></pre></td></tr></table></figure><h3 id="2-初始化本地库"><a href="#2-初始化本地库" class="headerlink" title="2.初始化本地库"></a>2.初始化本地库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="3-查看状态"><a href="#3-查看状态" class="headerlink" title="3.查看状态"></a>3.查看状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h3 id="4-linux命令可在git窗口使用"><a href="#4-linux命令可在git窗口使用" class="headerlink" title="4.linux命令可在git窗口使用"></a>4.linux命令可在git窗口使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建编辑文件hello.txt</span><br><span class="line">vim hello.txt</span><br><span class="line">//编辑文件保存退出</span><br><span class="line">:wq</span><br><span class="line">//查看目录下有哪些文件，两个L</span><br><span class="line">ll</span><br><span class="line">//查看某个文件内容</span><br><span class="line">cat hello.txt</span><br><span class="line">//查看文件尾部第几行写了啥</span><br><span class="line">tail -n [row] filename</span><br></pre></td></tr></table></figure><h3 id="5-提交文件至暂存区"><a href="#5-提交文件至暂存区" class="headerlink" title="5.提交文件至暂存区"></a>5.提交文件至暂存区</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add filename</span><br><span class="line">//文件显示绿色git status</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//删除暂存区文件</span><br><span class="line">git rm --cached filename</span><br><span class="line">// 重写工作区(暂存区回退)与git add 反向</span><br><span class="line">git checkout filename</span><br></pre></td></tr></table></figure><p>警告：git 会将文件win的CRLF换成LF行末换行符，知道就好</p><h3 id="6-提交本地库"><a href="#6-提交本地库" class="headerlink" title="6.提交本地库"></a>6.提交本地库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//第一次提交 文件hello.txt</span><br><span class="line">git commit -m &quot;first commit&quot; hello.txt</span><br><span class="line">//注意：只要在本地库发生操作，都会被日志记录</span><br></pre></td></tr></table></figure><h3 id="7-版本信息"><a href="#7-版本信息" class="headerlink" title="7.版本信息"></a>7.版本信息</h3><p>两种查看方式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//简略版本信息 显示前七位版本号</span><br><span class="line">git reflog</span><br><span class="line">//详细版本信息</span><br><span class="line">git log</span><br><span class="line">//通过如下方式更优雅的显示(查看历史记录)：</span><br><span class="line"> git log --pretty=oneline</span><br></pre></td></tr></table></figure><h3 id="8-版本穿梭"><a href="#8-版本穿梭" class="headerlink" title="8.版本穿梭"></a>8.版本穿梭</h3><p>复制版本号（七位）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//先查看简略版本号</span><br><span class="line">git reset --hard [ver-num]</span><br></pre></td></tr></table></figure><h3 id="9-分支"><a href="#9-分支" class="headerlink" title="9.分支"></a>9.分支</h3><h4 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1.查看分支"></a>1.查看分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><h4 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="2.创建分支"></a>2.创建分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建hot-fix分支</span><br><span class="line">git branch hot-fix</span><br></pre></td></tr></table></figure><h4 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3.切换分支"></a>3.切换分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//切换成hot-fix分支</span><br><span class="line"></span><br><span class="line">git checkout hot-fix</span><br></pre></td></tr></table></figure><h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4.合并分支"></a>4.合并分支</h4><p>先切换为主分支，在master基础上合并分支</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge hotfix</span><br><span class="line">//例如合并hotfix分支</span><br></pre></td></tr></table></figure><p><strong>正常合并：</strong></p><p><strong>代码冲突：</strong>对于代码有多个备选，需要手动指定</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;head</span><br><span class="line"></span><br><span class="line">//当前分支内容</span><br><span class="line"></span><br><span class="line">====</span><br><span class="line"></span><br><span class="line">//需要合并的分支内容</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>使用vim修改并删除多余字符，重新提交</strong></p><p><strong>提交代码时不需要指定文件名称（git commit -m “description” ）</strong></p><h3 id="10-远程仓库"><a href="#10-远程仓库" class="headerlink" title="10.远程仓库"></a>10.远程仓库</h3><h4 id="1-团队内协作（推送、拉取）"><a href="#1-团队内协作（推送、拉取）" class="headerlink" title="1.团队内协作（推送、拉取）"></a>1.团队内协作（推送、拉取）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//团队内获取远程代码库，克隆至本地库</span><br><span class="line">//clone做了三件事</span><br><span class="line">//1.拉取代码</span><br><span class="line">//2.初始化本地库</span><br><span class="line">//创建别名origin</span><br><span class="line">git clone url</span><br><span class="line">//推送本地代码至远程库，需要权限（同一个团队）-u</span><br><span class="line">git push 别名 分支</span><br><span class="line">//拉取远程代码库,更新的分支，拉取至本地直接合并</span><br><span class="line">git pull 远程库地址别名 </span><br></pre></td></tr></table></figure><h4 id="2-跨团队协作"><a href="#2-跨团队协作" class="headerlink" title="2.跨团队协作"></a>2.跨团队协作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//寻求其他团队更改，进行fork至其他团队远程代码库中</span><br><span class="line"></span><br><span class="line">//</span><br></pre></td></tr></table></figure><h4 id="3-创建远程库别名"><a href="#3-创建远程库别名" class="headerlink" title="3.创建远程库别名"></a>3.创建远程库别名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//git remote add 别名 远程库地址</span><br><span class="line">git remote add n-name https://github.com/angrykepler/proj-demo.git</span><br><span class="line">1-删除远程仓库</span><br><span class="line">git remote rm [name]</span><br><span class="line">2-删除本地git文件夹</span><br></pre></td></tr></table></figure><h4 id="4-查看别名"><a href="#4-查看别名" class="headerlink" title="4.查看别名"></a>4.查看别名</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="11-比较本地-远程仓库的差异"><a href="#11-比较本地-远程仓库的差异" class="headerlink" title="11.比较本地-远程仓库的差异"></a>11.比较本地-远程仓库的差异</h3><h4 id="1-更新本地的远程分支"><a href="#1-更新本地的远程分支" class="headerlink" title="1.更新本地的远程分支"></a>1.更新本地的远程分支</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><h4 id="2-本地与远程的差集（显示远程有，本地没有的commit-info）"><a href="#2-本地与远程的差集（显示远程有，本地没有的commit-info）" class="headerlink" title="2.本地与远程的差集（显示远程有，本地没有的commit info）"></a>2.本地与远程的差集（显示远程有，本地没有的commit info）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log master..origin/master</span><br></pre></td></tr></table></figure><h4 id="3-统计文件的改动"><a href="#3-统计文件的改动" class="headerlink" title="3.统计文件的改动"></a>3.统计文件的改动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff//默认工作区 与 暂存区比较</span><br><span class="line">git diff HEAD //暂存区 与 本地库比较</span><br><span class="line">git diff --stat master origin/master</span><br><span class="line">#git dif 本地分支 远程地址（别名）/远程分支</span><br></pre></td></tr></table></figure><h3 id="12-github搜索技巧"><a href="#12-github搜索技巧" class="headerlink" title="12.github搜索技巧"></a>12.<code>github</code>搜索技巧</h3><p><code>in:name: springboot</code></p><p><code>in:description:xxx</code></p><p><code>in:readme:xxx</code></p><p><code>stars:&gt;1000</code></p><p><code>pushed:&gt;2022-02-02</code></p><p><code>language:java</code></p><p><code>forks:&gt;1000</code></p><p><code>user:xxx</code></p><h5 id="一、如何重置本项目用户信息："><a href="#一、如何重置本项目用户信息：" class="headerlink" title="一、如何重置本项目用户信息："></a>一、如何重置本项目用户信息：</h5><p><code>$ git config user.name &#39;b&#39;</code><br><code>$ git config user.email b@email.com</code></p><h5 id="二、使用amend命令修改commit信息（注：-amend命令只会修改最后一次commit的信息，之前的commit需要使用rebase）"><a href="#二、使用amend命令修改commit信息（注：-amend命令只会修改最后一次commit的信息，之前的commit需要使用rebase）" class="headerlink" title="二、使用amend命令修改commit信息（注： amend命令只会修改最后一次commit的信息，之前的commit需要使用rebase）"></a>二、使用amend命令修改commit信息（注： amend命令只会修改最后一次commit的信息，之前的commit需要使用rebase）</h5><p><code>$ git commit --amend --reset-author</code></p><h5 id="三、如果需要修改历史提交消息，通过rebase操作"><a href="#三、如果需要修改历史提交消息，通过rebase操作" class="headerlink" title="三、如果需要修改历史提交消息，通过rebase操作"></a>三、如果需要修改历史提交消息，通过rebase操作</h5><p><code>$ git rebase -i HEAD~3    </code></p><h1 id="输出如下"><a href="#输出如下" class="headerlink" title="输出如下"></a>输出如下</h1><p>pick 1 commit 1<br>pick 2 commit 2<br>pick 3 commit 3<br>要修改哪个，就把那行的pick改为edit，然后退出。例如想修改commit 1的author，光标移到第一个pick，按i键进入INSERT模式，把pick改为edit：</p><p>edit 1 commit 1<br>pick 2 commit 2<br>pick 3 commit 3<br>…<br>– INSERT –<br>然后按esc键，退出INSERT模式，输入:wq退出，这时可以看到提示，可以修改commit 1的信息了：</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot</title>
      <link href="/2022/06/17/springboot%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/17/springboot%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="springboot创建项目（需要联网）"><a href="#springboot创建项目（需要联网）" class="headerlink" title="springboot创建项目（需要联网）"></a>springboot创建项目（需要联网）</h3><ol><li><h4 id="通过idea"><a href="#通过idea" class="headerlink" title="通过idea"></a>通过idea</h4><ol><li><a href="https://start.aliyun.com/">https://start.aliyun.com</a></li><li><a href="https://start.spring.io/">https://start.spring.io/</a></li></ol></li><li><h4 id="去官网创建并下载压缩包"><a href="#去官网创建并下载压缩包" class="headerlink" title="去官网创建并下载压缩包"></a>去官网创建并下载压缩包</h4></li></ol><h3 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h3><p><code>Application.properties</code>，<code>Application.yml</code>，<code>Application.yaml</code>三种格式都支持</p><ol><li>优先级<code>properties</code>&gt;<code>yml</code>&gt;<code>yaml</code></li><li>覆盖重复属性，多文件读取</li><li><code>yml</code>格式：<code>attr: val</code></li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># demo</span></span><br><span class="line"><span class="comment"># 服务器端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 关闭logo</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">banner-mode:</span> <span class="string">off</span></span><br><span class="line"><span class="comment"># 序列化json格式,日期处理</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">&quot;GMT+8&quot;</span></span><br><span class="line">  <span class="comment"># 文件上传</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line"><span class="comment">#      单个文件上传大小</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line"><span class="comment">#      上传文件总大小</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">30MB</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><ol><li>springboot中4级配置文件<ol><li><code>file:config/application.yml</code>最高</li><li><code>file:application.yml</code></li><li><code>classpath:config/application.yml</code></li><li><code>classpath:application.yml</code>最低</li></ol></li><li>简介<ol><li>工程路径<code>config</code>目录中配置文件：服务于运维经理整体调控</li><li>工程路径配置文件：服务于运维人员配置涉密线上环境</li><li>项目类路径<code>config</code>目录中配置文件：服务于项目经理整体调控</li><li>项目类路径配置文件：服务于开发人员本机开发与测试</li></ol></li><li>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序（合作）</li><li>作用<ol><li>1级与2级留作系统打包后设置通用属性，1级常用于运维经理进行线上整体项目部署方案调控</li><li>3级与4级用于系统开发阶段设置通用属性，3级常用于项目经理进行整体项目属性调控</li></ol></li></ol><h3 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h3><ol><li>方式一：多文件配置<ol><li>配置文件application-xxx.yml</li><li>在默认配置文件中指定激活的配置xxx</li></ol></li><li>方式二：单个文件内配置<ol><li>局限于yml格式的配置文件</li><li>不同环境使用—三个短横线分割</li><li>激活指定配置</li></ol></li></ol><p>运行时临时指定配置文件<code>--spring.profiles.active=test </code>，端口<code>server.port=80</code>，类似临时指令</p><h3 id="Maven与springboot同时作用多环境"><a href="#Maven与springboot同时作用多环境" class="headerlink" title="Maven与springboot同时作用多环境"></a>Maven与springboot同时作用多环境</h3><ol><li>以maven为主，springboot配置中使用<code>@...@</code>占位符，读取maven对应的配置属性值</li><li>基于springboot读取maven配置属性的前提下，如果在idea下测试工程时<code>pom.xml</code>（切换maven默认生效环境）每次更细需要手动compile方可生效（idea问题）</li></ol><h3 id="端口被占用解决"><a href="#端口被占用解决" class="headerlink" title="端口被占用解决"></a>端口被占用解决</h3><ol><li>更改服务端口</li><li>结束占用端口进程</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"><span class="comment">#查询指定端口 （可以加上:）</span></span><br><span class="line">netstat -ano |findstr <span class="string">&quot;端口号&quot;</span></span><br><span class="line"><span class="comment">#根据进程pid查询进程名称</span></span><br><span class="line">tasklist |findstr <span class="string">&quot;进程pid&quot;</span></span><br><span class="line"><span class="comment">#根据pid杀死进程</span></span><br><span class="line">taskkill /F /PID <span class="string">&quot;进程pid&quot;</span></span><br><span class="line"><span class="comment">#根据进程名称杀死进程</span></span><br><span class="line">taskkill -f -t -im <span class="string">&quot;进程名称&quot;</span></span><br></pre></td></tr></table></figure><h3 id="基于lombok提供的"><a href="#基于lombok提供的" class="headerlink" title="基于lombok提供的"></a>基于<code>lombok</code>提供的</h3><p><code>@slf4j</code>注解为类快速添加日志对象</p><p>使用<code>@Data</code>生成<code>set``get</code>方法</p><h3 id="EnableConfigurationProperties注解（关联注解）"><a href="#EnableConfigurationProperties注解（关联注解）" class="headerlink" title="@EnableConfigurationProperties注解（关联注解）"></a><code>@EnableConfigurationProperties</code>注解（关联注解）</h3><p><code>@EnableConfigurationProperties</code>注解可以强制将将使用<code>@ConfigurationProperties(prefix=&quot;&quot;)</code>注解对应的类加入<code>spring</code>容器（且该类不需要使用<code>@Component</code>修饰）</p><p><code>@EnableConfigurationProperties</code>与<code>@Component</code>不能同时使用</p><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><code>admin</code>服务端：以<code>web</code>方式启动</p><ol><li><code>Codecentric&#39;s Spring Boot Admin(server)</code>(依赖)</li><li>配置<code>yml</code>，防止端口占用如<code>8080</code></li><li>程序入口添加<code>@EnableAdminServer</code>注解</li></ol><p><code>admin</code>客户端：</p><ol><li><p>勾选<code>Codecentric&#39;s Spring Boot Admin(client)</code></p></li><li><p>配置<code>yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">      <span class="comment"># 被监控信息交给谁</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="comment"># endpoint对外是否开放这个功能</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">    <span class="comment"># 开放的health，默认不开放</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span>  </span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># endpoints对web是否能看到</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">      <span class="comment">#默认 开放health端点</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">   <span class="comment"># 自定义信息</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">kepler</span></span><br></pre></td></tr></table></figure></li></ol><p>通过访问<code>http://localhost:8080</code>监控界面</p><p><code>程序地址/actuator/health</code>获取<code>health</code>端点信息</p><p>监控的实施</p><ul><li>显示监控信息的服务器：用于获取服务信息，并显示对应的信息</li><li>运行的服务：启动时主动上报，告知监控服务器自己需要受到监控</li></ul><p>监控原理</p><ul><li>Actuator提供了SpringBoot生产就绪功能，通过端点的配置与访问，获取端点信息</li><li>端点描述了一组监控信息，SpringBoot提供了多个内置端点，也可以根据需要自定义端点信息</li><li>访问当前应用所有端点信息: <code>/actuator</code></li><li>访问端点详细信息:<code>/actuator/端点名称</code></li></ul><p>（<code>info</code>）信息自定义(类方式)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现InfoContributor接口</span></span><br><span class="line"><span class="comment">定义info信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoConfig</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line"><span class="comment">// 支持链式编程</span></span><br><span class="line">        builder.withDetail(<span class="string">&quot;runTime&quot;</span>,System.currentTimeMillis());</span><br><span class="line">        <span class="type">Map</span> <span class="variable">infoMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        infoMap.put(<span class="string">&quot;buildTime&quot;</span>,<span class="string">&quot;2022&quot;</span>);</span><br><span class="line">        builder.withDetails(infoMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>health</code>端点</p><p>自定义端点</p><ol><li><code>@Endpoint</code></li><li>端点操作</li></ol><h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><ul><li><code>@ImportResource(&quot;applicationContext.xml&quot;)</code>，系统迁移，加载配置类并加载配置文件</li><li><code>@Configuration</code>中<code>proxyBeanMethods</code>，默认开启代理，通过当前类对象调用当前类中方法(<code>@Bean</code>)，从<code>IOC</code>容器中取得<code>bean</code>是同一个，否则（<code>false</code>）就是普通对象</li></ul><p><code>Bean</code>加载方式(<code>spring</code>)</p><ol><li><p><code>bean</code>标签</p></li><li><p><code>@Configuration</code>+<code>@Bean</code></p></li><li><p><code>@Configuration</code>+<code>@ComponentScan</code>+<code>@Bean</code>，<code>@Configuration</code>若不是使用上下文对象注解加载，则不能省略</p></li><li><p><code>@Import</code>，加载普通类<code>.class</code>，生成的<code>bean</code>名称为全路径类名，可以导入配置类（去掉配置注解，保留<code>@Bean</code>）</p></li><li><p>手动注册，上下文对象<code>ioc.registerBean(&quot;name&quot;,*.class,c-args)</code>|<code>ioc.register(*.class)</code>，最后会覆盖之前的同类的</p></li><li><p>动态加载<code>bean</code>：实现接口<code>ImportSelector</code>，重写<code>selectImports(AnnotationMetadata importClassMetadata)</code>，返回值<code>return new String[]&#123;&quot;bean全类名&quot;&#125;;</code>，可以加载<code>bean</code>，也可以判定加载谁(通过<code>importClassMetadata</code>)，判定结束决定是否装载指定<code>bean</code>。那个配置类导入该实现类，就检测谁。</p></li><li><p>导入实现了<code>ImportBeanDefinitionRegistrar</code>接口的类，通过<code>BeanDefinition</code>的注册器注册实名<code>bean</code>，实现对容器中<code>bean</code>的裁定,例如对现有<code>bean</code>的覆盖，进而达成不修改源代码的情况下更换实现的效果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span> <span class="params">(AnnotationMetadata importingClassMetadata,</span></span><br><span class="line"><span class="params">BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">//创建 BeanDefinition</span></span><br><span class="line"><span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> BeanDefinitionBuilder.rootBeanDefinition ( BeanDemo.class).getBeanDefinition();</span><br><span class="line">    <span class="comment">// bean 名称</span></span><br><span class="line">registry. registerBeanDefinition( <span class="string">&quot;beanDemoName&quot;</span> ,beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导入实现<code>BeanDefinitionRegistryPostProcessor</code>的类，后处理机制，通过<code>BeanDefinition</code>的注册器注册实名<code>bean</code>，实现对容器中的<code>bean</code>最终裁定</p></li><li><p>其他</p></li><li><p>总结</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. xml+&lt;bean/&gt;</span><br><span class="line">2. xml:context+ 注解(@Component+4个@Bean)</span><br><span class="line">3.配置类+扫描+注解(@Component+4个@Bean)</span><br><span class="line">●@Bean定义FactoryBean接口</span><br><span class="line">●@ImportResource导入资源文件</span><br><span class="line">●@Configuration注解的proxyBeanMethods属性</span><br><span class="line">4. @Import 导入bean的类</span><br><span class="line">●@Import导入配置类</span><br><span class="line">5，AnnotationConfigApplicationContext调用register方法</span><br><span class="line">6. @Import导入ImportSelector接口</span><br><span class="line">7. @Import导入ImportBeanDefinitionRegistrar接口</span><br><span class="line">8. @Import导入BeanDefinitionRegistryPostProcessor接口</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p><code>Bean</code>控制方式(<code>spring</code>)</p><p>自适应加载，如数据源</p><ul><li><p>编程式</p><ul><li>上述<code>bean</code>加载方式5，6，7，8，可以进行控制</li></ul></li><li><p>注解式</p><ul><li>使用(<code>spring</code>)<code>@Conditional</code>注解的(<code>springboot</code>)派生注解设置各种组合条件控制<code>bean</code>的加载</li><li><code>@ConditionalOnClass(name=&quot;全类名&quot;)</code>，有某个类则加载</li><li><code>@ConditionalOnMissingClass(&quot;全类名&quot;)</code>，没有则加载</li><li>其他</li></ul></li></ul><p><code>Bean</code>依赖属性配置</p><ol><li>业务bean的属性可以为其设定默认值</li><li>当需要设置时通过配置文件传递属性</li><li>业务bean应尽量避免设置强制加载，而是根据需要导入后加载，降低<br>spring容器管理bean的强度</li></ol><ul><li>加载配置时，若没有提供外部配置，则走默认配置，有外部配置，则走外部配置的模式</li></ul><p>自动配置原理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.先开发若干种技术的标准实现</span><br><span class="line">2. SpringBoot启动时加载所有 的技术实现对应的自动配置类</span><br><span class="line">3.检测每个配置类的加载条件是否满足并进行对应的初始化</span><br><span class="line">4.切记是先加载所有的外部资源，然后根据外部资源进行条件比对</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变更自动配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.通过配置文件exclude属性排除自动配置</span><br><span class="line">2.通过注解,@EnableAutoConfiguration属性排除自动配置项</span><br><span class="line">3.添加自定义自动配置(META- INF/spring . factories)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown快速入门</title>
      <link href="/2022/06/17/markdown%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/17/markdown%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.github.com/en/get-started/writing-on-github">参考地址github-doc:book:</a></p><h2 id="1、代码块"><a href="#1、代码块" class="headerlink" title="1、代码块"></a>1、代码块</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//代码块语法：三个漂号（英文状态下，esc下面键）</span></span><br><span class="line">```java</span><br></pre></td></tr></table></figure><h2 id="2、标题"><a href="#2、标题" class="headerlink" title="2、标题"></a>2、标题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">###### 六级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">### 三级标题</span><br><span class="line">## 二级标题</span><br><span class="line"># 一级标题</span><br></pre></td></tr></table></figure><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="3、字体"><a href="#3、字体" class="headerlink" title="3、字体"></a>3、字体</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**加粗**</span><br><span class="line">==高亮显示==</span><br><span class="line">~~删除线~~</span><br><span class="line">*斜体*  //ctrl + i</span><br></pre></td></tr></table></figure><p><strong>加粗</strong></p><p>&#x3D;&#x3D;高亮显示&#x3D;&#x3D;</p><p><del>删除线</del></p><p><em>斜体</em></p><h2 id="4、引用"><a href="#4、引用" class="headerlink" title="4、引用"></a>4、引用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//引用语法</span><br><span class="line"></span><br><span class="line">&gt; 作者：Kepler</span><br><span class="line">&gt; &gt;作者：Kepler</span><br><span class="line">&gt; &gt;</span><br><span class="line">&gt; &gt;&gt;作者：Kepler</span><br></pre></td></tr></table></figure><blockquote><p>作者：Kepler</p><blockquote><p>作者：Kepler</p><blockquote><p>作者：Kepler</p></blockquote></blockquote></blockquote><h2 id="5、分割线"><a href="#5、分割线" class="headerlink" title="5、分割线"></a>5、分割线</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//分割线</span><br><span class="line">---</span><br><span class="line">//分割线2</span><br><span class="line">***</span><br></pre></td></tr></table></figure><hr><hr><h2 id="6、图片插入"><a href="#6、图片插入" class="headerlink" title="6、图片插入"></a>6、图片插入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//图片插入</span><br><span class="line">//![我的图片]()--图片路径</span><br><span class="line">GitHub</span><br><span class="line">黑暗主题</span><br><span class="line">#gh-dark-mode-only</span><br><span class="line">轻主题</span><br><span class="line">#gh-light-mode-only</span><br><span class="line"></span><br><span class="line">## 7、超链接</span><br><span class="line"></span><br><span class="line">//超链接</span><br><span class="line">[百度](http://www.baidu.com)</span><br></pre></td></tr></table></figure><p><img src="D:/picswall/wallhaven-6keozq.jpg" alt="我的图片"></p><h6 id="超链接语法"><a href="#超链接语法" class="headerlink" title="超链接语法"></a>超链接语法</h6><p><a href="http://www.baidu.com/">百度</a></p><h2 id="8、列表"><a href="#8、列表" class="headerlink" title="8、列表"></a>8、列表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line"><span class="comment">//1+.+ name</span></span><br></pre></td></tr></table></figure><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li><p>目录1</p></li><li><p>目录2</p></li><li><p>目录3</p></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li><p>一</p></li><li><p>二</p></li><li><p>三</p></li></ol><h2 id="9、表格"><a href="#9、表格" class="headerlink" title="9、表格"></a>9、表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---连字符用于创建每列标题，每列最少三个，|管道符用于分割列</span><br><span class="line">| 左侧对齐 | 居中对齐 | 右侧对齐 |</span><br><span class="line">| :------ | :------: | -------: |</span><br><span class="line">|      |  |  |</span><br><span class="line">| 左 | 中 | 右 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左侧对齐</th><th align="center">居中对齐</th><th align="right">右侧对齐</th></tr></thead><tbody><tr><td align="left"></td><td align="center"></td><td align="right"></td></tr><tr><td align="left">左</td><td align="center">中</td><td align="right">右</td></tr></tbody></table><table><thead><tr><th>姓名</th><th>学号</th><th>成绩</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="10、任务列表"><a href="#10、任务列表" class="headerlink" title="10、任务列表"></a>10、任务列表</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">完成</span><br><span class="line">- [x] 1。。</span><br><span class="line">未完成</span><br><span class="line">- [ ] 2。。</span><br></pre></td></tr></table></figure><ul><li><p><input checked="" disabled="" type="checkbox"> []里面使用x，表示任务列表已经完成（显示对号），否则未完成显示空。</p></li><li><p><input disabled="" type="checkbox"> 哈哈哈</p></li><li><p><input checked="" disabled="" type="checkbox"> </p></li></ul><h2 id="11、表情符号"><a href="#11、表情符号" class="headerlink" title="11、表情符号"></a>11、表情符号</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:emojicode:</span><br><span class="line">[refer:](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md">refer:</a></p><p>:happy:</p><p>:sa:</p><p>:alarm_clock:</p><h2 id="12、脚注（位置不影响在底部显示）"><a href="#12、脚注（位置不影响在底部显示）" class="headerlink" title="12、脚注（位置不影响在底部显示）"></a>12、脚注（位置不影响在底部显示）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[^脚注1]: 这是脚注1。</span><br></pre></td></tr></table></figure><h2 id="13、隐藏带有评论的内容"><a href="#13、隐藏带有评论的内容" class="headerlink" title="13、隐藏带有评论的内容"></a>13、隐藏带有评论的内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 该行不会出现被渲染的markdown中 --&gt;</span><br></pre></td></tr></table></figure><!-- 该行不会出现被渲染的markdown中 --><h2 id="14、转义字符反斜线”-“，忽略格式"><a href="#14、转义字符反斜线”-“，忽略格式" class="headerlink" title="14、转义字符反斜线”\“，忽略格式"></a>14、转义字符反斜线”\“，忽略格式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\\ 这是个反斜线</span><br></pre></td></tr></table></figure><p>\ 这是个反斜线</p><h2 id="15、折叠标签"><a href="#15、折叠标签" class="headerlink" title="15、折叠标签"></a>15、折叠标签</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;details&gt;&lt;hide&gt;折叠展开&lt;/hide&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">   #### 这段内容已经被折叠，请点击折叠展开</span><br><span class="line">    &lt;/p&gt;&lt;/details&gt;</span><br></pre></td></tr></table></figure><details><hide>折叠展开</hide>    <p>   #### 这段内容已经被折叠    </p></details>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/06/17/linux%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/17/linux%20%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1、网络连接的三种模式"><a href="#1、网络连接的三种模式" class="headerlink" title="1、网络连接的三种模式"></a>1、网络连接的三种模式</h2><p>一共有255 可用</p><p>192.168.0.1 网关</p><p>192.168.0.5 网络地址</p><p>1、桥接模式，虚拟系统可以和外部系统通讯，但是容易造成<code>IP</code>冲突</p><p>张三：192.168.0.20 </p><p>虚拟系统Linux 192.168.0.~ 同一个网段，才能与外部通讯</p><p>2、NAT模式，网络地址转换模式，虚拟系统可以和外部系统通讯，不造成<code>IP</code>冲突</p><p>3、主机模式：独立的系统</p><h2 id="2、配置nat模式流程"><a href="#2、配置nat模式流程" class="headerlink" title="2、配置nat模式流程"></a>2、配置<code>nat</code>模式流程</h2><ol><li><p>首先在<code>vmwa</code>中的虚拟网络编辑器中自定义一个<code>nat</code>模式，点击NAT设置，记录网关地址，以及<code>DHCP</code>设置，记录<code>ip</code>使用范围</p></li><li><p>进入虚拟机，在有线连接中配置<code>IP4</code>，将上述参数配置，<code>dns:8.8.8.8</code>,114.114.114.114</p></li><li><p>右键虚拟机标签设置，更改网络配置为，自定义的NAT配置</p></li><li><p>ping 测试结果</p></li></ol><h2 id="3、yum"><a href="#3、yum" class="headerlink" title="3、yum"></a>3、yum</h2><pre><code>yum -y install gccyun -y install gcc-c++</code></pre><h2 id="4、安装vmtools"><a href="#4、安装vmtools" class="headerlink" title="4、安装vmtools"></a>4、安装<code>vmtools</code></h2><p>安装完成虚拟器后，需要重新安装<code>vmtools</code>；</p><p><strong>显示灰色</strong>：在启动虚拟机前，编辑虚拟机设置，将<code>cd/dvd</code>改为物理，可增加一个，</p><p><strong><code>gcc</code><strong>：检查<code>gcc</code>是否可用<code>gcc -v</code>，如果不可用需要下载，</strong>需保证虚拟机可以正常联网</strong>，安装命令见<strong>4</strong>；</p><p><strong>安装</strong>：将资源内部的<code>vmtools.tar.gz</code>复制值&#x2F;opt 目录下，运行终端<code>tar -zxvf vmtools.tar.gz</code>解压，解压后生成一个<code>*distrib</code> 目录，进入目录</p><figure class="highlight plaintext"><figcaption><span>vm---team`，安装成功。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 5、共享文件夹</span><br><span class="line"></span><br><span class="line">虚拟机文件夹位置：```/mnt/hgfs/myshare/```；</span><br><span class="line"></span><br><span class="line">`myshare`:主机中建立的文件夹；</span><br><span class="line"></span><br><span class="line">## 7、安装`java`</span><br><span class="line"></span><br><span class="line">- 删除原有自带的开源包按需</span><br><span class="line">  1. `rpm -qa | grep jdk`：查询自带的开源包</span><br><span class="line">  1. `yum -y remove 包名`：删除包</span><br><span class="line"></span><br><span class="line">- 下载`JDK`</span><br><span class="line">  1. 镜像：`https://repo.huaweicloud.com/java/jdk/8u202-b08/`</span><br><span class="line">  2. 将压缩文件移动到`usr/*/*`路径下</span><br><span class="line">  3. 解压压缩文件：`tar -zvxf jdk-8u202-linux-x64.tar.gz`</span><br><span class="line">- 配置环境变量</span><br><span class="line">  1. 在`/etc/profile`文件添加环境变量</span><br><span class="line">  2. ` JAVA_HOME=/usr/java/jdk1.8.0_202` ,`export PATH=$PATH:$JAVA_HOME/bin`</span><br><span class="line">  3. 重新加载全局配置文件profile：`source /etc/profile`</span><br><span class="line"></span><br><span class="line">## 8、安装tomcat</span><br><span class="line"></span><br><span class="line">1. 镜像网址`http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat`，选择`/bin/*.tar.gz`格式文件</span><br><span class="line"></span><br><span class="line">2. 下载并解压至指定文件夹下，如`usr/local/`</span><br><span class="line"></span><br><span class="line">3. 配置`/etc/profile`，配置环境</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   #set java environment<br>   export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_202<br>   export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</p><p>   #set tomcat enviroment<br>   export CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.81<br>   export PATH&#x3D;$PATH:$CATALINA_HOME&#x2F;bin</p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">检查：`ps -ef | grep tomcat`，是否存在tomcat进程；访问localhost:8080</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 9、`Linux`下载安装`MySQL (7.0)`</span><br><span class="line"></span><br><span class="line"> `MariaDB数据库管理系统是MySQL的一个分支，主要由开源社区在维护`</span><br><span class="line"></span><br><span class="line">### 下载源</span><br><span class="line"></span><br><span class="line">1. 下载`mysql`源安装包</span><br><span class="line">   `wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm`</span><br><span class="line"></span><br><span class="line">2. 安装mysql源</span><br><span class="line">   `yum localinstall mysql57-community-release-el7-8.noarch.rpm`</span><br><span class="line"></span><br><span class="line">3. 检查`mysql`源是否安装成功</span><br><span class="line">   `yum repolist enabled | grep &quot;mysql.*-community.*&quot;`</span><br><span class="line"></span><br><span class="line">4. 成功</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>   mysql-connectors-community&#x2F;x86_64       MySQL Connectors Community           192<br>   mysql-tools-community&#x2F;x86_64            MySQL Tools Community                 90<br>   mysql57-community&#x2F;x86_64                MySQL 5.7 Community Server           584</p><pre><code>### 安装阶段1、安装`mysql``yum install mysql-community-server （如果检索密钥错误解决方法： rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022）`2、启动`MySQL`服务`systemctl start mysqld`3、查看`MySQL`的启动状态`shell&gt;   systemctl status mysqld`4、设置开机启动`MySQL``shell&gt; systemctl enable mysqld``shell&gt; systemctl daemon-reload`5、修改root本地登录密码mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改： `shell&gt; grep &#39;temporary password&#39; /var/log/mysqld.log`### Linux设置`MySQL`修改密码1. 修改root本地登录密码   `grep &#39;temporary password&#39; /var/log/mysqld.log`2. 登录并修改密码   `mysql -uroot -p`3. 修改密码（有要求）   `ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;newpassword&#39;`### Linux设置`MySQL`远程登录1. 授权其他机器登陆   mysql默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户   `GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;newpassword&#39; WITH GRANT OPTION;`2. 重新登录   `mysql -uroot –p`3. 开放3306端口   ### 常用命令目录展示`ls`  `展示当前目录``ls –l 可以简写为：ll``ll  -h 目录名  列名： ll  -h /etc `文件格式`drw..  普通目录-rw..    普通文件（.txt  .db   .jpg )lrwx..  链接文件(快捷方式）`目录操作` mkdir –p  -v m3/m4``rmdir  删除目录（删除空目录）`` find 目录名 –name 文件名目录名`复制文件` cp 需要复制的文件 目标位置``cat命令浏览正文文件内容``more命令:``空格键：向前（向下）移动一个屏幕Enter键：一次移动一行b：往回（向上）移动一个屏幕h：显示一个帮助菜单q：退出more命令并返回操作系统提示符下v：在当前行启动/usr/bin/vi``Less （显示百分比-m  显示行号-N )一页一页翻动less –mN  文件``vi/vim``保存并退出命令： :wq不保存并退出:    :q!``grep 需要搜索的字符串  搜索文件``ps -ef进程查看``tar命令　　解包：tar zxvf FileName.tar　　打包：tar czvf FileName.tar DirName``gz命令``解压1：gunzip FileName.gz　　解压2：gzip -d FileName.gz　　压缩：gzip FileName``解压：tar zxvf 压缩包名.tar.gz  -C  /usr/local/jdk``ifconfig   查看网卡信息（IP地址）``ping IP地址 命令来测试网络的连通性`` traceroute 命令显示数据包到达目的主机所经过的路由 #traceroute  www.``reboot 重启命令``halt   关机命令`## 10、`Linux`防火墙开启`开放3306端口(如下命令只只针对centos7以上)`   `查看已经开放的端口：firewall-cmd --list-ports`   ` 开启端口:firewall-cmd --zone=public --add-port=80/tcp --permanent``重启防火墙`  `firewall-cmd --reload #修改端口后需要重启``firewall systemctl stop firewalld.service #停止``firewall systemctl disable firewalld.service #禁止firewall开机启动``云服务器(除了开放防火墙端口之外，还需要在云的后台管理界面开启安全组)`</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro笔记</title>
      <link href="/2022/06/17/shiro%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/17/shiro%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : local</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50731</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : shiro</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50731</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 17/06/2022 20:14:37</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for sys_permissions</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_permissions`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_permissions`  (</span><br><span class="line">  `permission_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `permission_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`permission_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;权限表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of sys_permissions</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_permissions` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_permissions` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;add&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for sys_roles</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_roles`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_roles`  (</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">  `role_name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`role_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;角色表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of sys_roles</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_roles` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_roles` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for sys_roles_permissions</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_roles_permissions`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_roles_permissions`  (</span><br><span class="line">  `rp_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">  `permission_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;权限编号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`rp_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">4</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;角色-权限关联表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of sys_roles_permissions</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_roles_permissions` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_roles_permissions` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_roles_permissions` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for sys_users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_users`  (</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `salt` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;盐值&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`user_id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  <span class="keyword">UNIQUE</span> INDEX `username`(`username`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;用户表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of sys_users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_users` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;a38b872c85e9096dd2d97b5dbe482861&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_users` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;f583440f619fb1211e31d9fb53383274&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for sys_users_roles</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_users_roles`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_users_roles`  (</span><br><span class="line">  `ur_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">  `role_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ur_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;用户-角色关联表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of sys_users_roles</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_users_roles` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_users_roles` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建配置类-Configuration-ShiroConfig"><a href="#创建配置类-Configuration-ShiroConfig" class="headerlink" title="创建配置类(@Configuration)ShiroConfig"></a>创建配置类(<code>@Configuration</code>)<code>ShiroConfig</code></h3><p>通过<code>@Bean</code>将对象加入<code>ioc</code>，让spring管理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashedCredentialsMatcher <span class="title function_">createHashedCredentialsMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HashedCredentialsMatcher</span> <span class="variable">hashedCredentialsMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">        <span class="comment">//加密方式</span></span><br><span class="line">        hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="comment">//迭代次数</span></span><br><span class="line">        hashedCredentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Realm配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> credentialsMatcher</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Realm <span class="title function_">createRealm</span><span class="params">(CredentialsMatcher credentialsMatcher)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SysUserRealm</span> <span class="variable">sysUserRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUserRealm</span>();</span><br><span class="line">        sysUserRealm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sysUserRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全管理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> realm</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SecurityManager <span class="title function_">createSecurityManager</span><span class="params">(Realm realm)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        securityManager.setRealm(realm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置shiroFilter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">createShiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line"><span class="comment">//        安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"><span class="comment">//        未登录跳转地址</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"><span class="comment">//        未授权跳转地址</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/unauthorizedUrl&quot;</span>);</span><br><span class="line"><span class="comment">//        拦截规则(可配置注解替代)</span></span><br><span class="line"><span class="comment">//        Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/register&quot;,&quot;anon&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/toLogin&quot;,&quot;anon&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/login&quot;,&quot;anon&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/unauthorizedUrl&quot;,&quot;anon&quot;);</span></span><br><span class="line"><span class="comment">//        map.put(&quot;/*&quot;,&quot;authc,roles[admin]&quot;);</span></span><br><span class="line"><span class="comment">//        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 配置使用注解</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">createAuthorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">        <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">authorizationAttributeSourceAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   开启AOP自动代理</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">createDefaultAdvisorAutoProxyCreator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">creator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">        creator.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> creator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h3><p>注册时通过相应的（算法+盐值）对密码进行加密，将加密的结果和盐值保存在数据库，认证时将前端登录传递的数据（password），以同样的方式进行操作，送入安全管理器与数据库中的加密后密码进行比对</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerSysUsers</span><span class="params">(SysUsers sysUsers)</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//对密码进行加密</span></span><br><span class="line">     String pwd=sysUsers.getPassword();</span><br><span class="line">     <span class="comment">//生成盐</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> sysUsers.getUsername();<span class="comment">//盐可以是任意值 随机数,UUID,时间戳</span></span><br><span class="line">     <span class="comment">//对原密码进行加密</span></span><br><span class="line">     <span class="type">Md5Hash</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(pwd, salt, <span class="number">1024</span>);</span><br><span class="line">     <span class="type">String</span> <span class="variable">newPwd</span> <span class="operator">=</span> hash.toHex();</span><br><span class="line">     System.out.println(<span class="string">&quot;加密之后的密码为:&quot;</span>+newPwd);</span><br><span class="line">     sysUsers.setPassword(newPwd);</span><br><span class="line">     sysUsers.setSalt(salt);</span><br><span class="line">     sysUsersMapper.addSysUsers(sysUsers);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="自定义realm"><a href="#自定义realm" class="headerlink" title="自定义realm"></a>自定义<code>realm</code></h3><p>继承<code>AuthorizingRealm</code>类，重写认证和授权的两个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUsersMapper sysUsersMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUsersRolesMapper sysUsersRolesMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysRolesMapper sysRolesMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysRolesPermissionsMapper sysRolesPermissionsMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysPermissionsMapper sysPermissionsMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装授权信息的 角色和权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principalCollection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        <span class="comment">//从数据库中查询角色和权限信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//通过用户名获取用户信息</span></span><br><span class="line">        <span class="type">SysUsers</span> <span class="variable">users</span> <span class="operator">=</span> sysUsersMapper.getSysUsersByUsername(principal);</span><br><span class="line">        <span class="comment">//通用用户ID获取角色名称</span></span><br><span class="line">        List&lt;SysUsersRoles&gt; usersRoles = sysUsersRolesMapper.getSysUsersRolesList(users.getUserId());</span><br><span class="line">        <span class="comment">//通过角色ID查询角色名称</span></span><br><span class="line">        Set&lt;String&gt; roleNames = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">simpleAuthorizationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">        <span class="keyword">for</span> (SysUsersRoles usersRole : usersRoles) &#123;</span><br><span class="line">            <span class="type">SysRoles</span> <span class="variable">roles</span> <span class="operator">=</span> sysRolesMapper.getSysRolesByRoleId(usersRole.getRoleId());</span><br><span class="line">            roleNames.add(roles.getRoleName());</span><br><span class="line">            <span class="comment">//通过角色ID查询权限信息</span></span><br><span class="line">            List&lt;SysRolesPermissions&gt; rolesPermissionsList = sysRolesPermissionsMapper.getSysRolesPermissions(usersRole.getRoleId());</span><br><span class="line">            Set&lt;String&gt; pList = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (SysRolesPermissions sysRolesPermissions : rolesPermissionsList) &#123;</span><br><span class="line">                <span class="type">SysPermissions</span> <span class="variable">permissions</span> <span class="operator">=</span> sysPermissionsMapper.getSysPermissionsBySysPermissionsId(sysRolesPermissions.getPermissionId());</span><br><span class="line">                pList.add(permissions.getPermissionName());</span><br><span class="line">            &#125;</span><br><span class="line">            simpleAuthorizationInfo.addStringPermissions(pList);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        simpleAuthorizationInfo.setRoles(roleNames);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装认证信息的 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException : 前端传递过来的usernamepassowordtoken对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">principal</span> <span class="operator">=</span> (String) authenticationToken.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(principal==<span class="literal">null</span> || principal==<span class="string">&quot;&quot;</span> || principal.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//为止账号异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通过用户名查询数据库中的用户信息</span></span><br><span class="line">        <span class="type">SysUsers</span> <span class="variable">user</span> <span class="operator">=</span> sysUsersMapper.getSysUsersByUsername(principal);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//账号异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownAccountException</span>(<span class="string">&quot;用户名不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理盐</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> user.getSalt();</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> ByteSource.Util.bytes(salt);</span><br><span class="line">        <span class="comment">//将正确的用户信息保存到SimpleAuthenticationInfo对像中并且返回</span></span><br><span class="line">        <span class="type">SimpleAuthenticationInfo</span> <span class="variable">simpleAuthenticationInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user.getUsername(),user.getPassword(),byteSource,getName());</span><br><span class="line">        <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解添加所需角色权限"><a href="#注解添加所需角色权限" class="headerlink" title="注解添加所需角色权限"></a>注解添加所需角色权限</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(value = &#123;&quot;admin&quot;&#125;)</span></span><br><span class="line">  <span class="meta">@RequiresPermissions(value = &#123;&quot;delete&quot;,&quot;add&quot;&#125;)</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/getUserInfo&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getUserInfo</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;获取用户信息&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;获取成功&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java shiro springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 认证 授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java入门</title>
      <link href="/2022/06/17/1%E3%80%81java%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/17/1%E3%80%81java%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、dos工具"><a href="#1、dos工具" class="headerlink" title="1、dos工具"></a>1、dos工具</h2> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//编译产生字节码文件</span><br><span class="line">javac *.java</span><br><span class="line">//字节码文件反编译</span><br><span class="line">javap -v  *.class</span><br><span class="line">//java 运行，不需要带后缀</span><br><span class="line">java *</span><br><span class="line"></span><br><span class="line">java -jar **</span><br></pre></td></tr></table></figure><h2 id="2、计算结果提升："><a href="#2、计算结果提升：" class="headerlink" title="2、计算结果提升："></a>2、计算结果提升：</h2><h3 id="数据类型转换：double-gt-float-gt-long-gt-int-x3D-short-x3D-byte-x3D-char"><a href="#数据类型转换：double-gt-float-gt-long-gt-int-x3D-short-x3D-byte-x3D-char" class="headerlink" title="数据类型转换：double &gt; float &gt; long &gt; int &#x3D; short &#x3D; byte &#x3D;char"></a>数据类型转换：double &gt; float &gt; long &gt; int &#x3D; short &#x3D; byte &#x3D;char</h3><h2 id="3、位运算—三码转换"><a href="#3、位运算—三码转换" class="headerlink" title="3、位运算—三码转换"></a>3、位运算—三码转换</h2><p><strong>原码</strong>–看到的数值直接转化成二进制的数据</p><p><strong>反码</strong> –中间产物</p><p><strong>补码</strong>–计算机真实存储的形式参与位运算</p><p><strong>位运算符：&amp;，|，异或，~，&lt;&lt;，&gt;&gt;,&gt;&gt;&gt;（了解）</strong></p><p>逻辑运算符左右连接是布尔类型操作数；</p><p>位运算符左右连接的是具体数值</p><p>（1）&lt;&lt;左移  （乘）</p><p>int类型 3&lt;&lt;2 &#x3D;12</p><p>底层存储 </p><p>00000000 00000000 00000000 00000011  -》3</p><p>00000000 00000000 00000000 00001100 -》12</p><p>面试4得到8的最快方式</p><p>（2) &gt;&gt;右移 （除）</p><p>-6</p><p>【6：</p><p>取反：</p><p>加1：————》》》-6】</p><p><img src="/../../../n-book/weixinobU7VjpWc-HuP6iGsSC4_lN6g0m4/f6fb4d42aa194e899c5e2dce41932470/clipboard.png" alt="img"></p><p>（3）&gt;&gt;&gt;无符号右移</p><p>6&gt;&gt;&gt;2  &#x3D;1</p><p>PS：</p><p>byte类型的表数范围-128-127</p><p>127:01111111</p><p>-128:10000000</p><p>负数</p><p>减一：01111111</p><p>取反：10000000-》2^7&#x3D;128</p><p>加符号：-128</p><h2 id="4、非法字符错误"><a href="#4、非法字符错误" class="headerlink" title="4、非法字符错误"></a>4、非法字符错误</h2><p>非法字符: ‘\uff1b’ 含有中文标点分号</p><h2 id="5、变量定义"><a href="#5、变量定义" class="headerlink" title="5、变量定义"></a>5、变量定义</h2><p><strong>1.定义变量</strong></p><p>反编译后声明变量、赋值被合并</p><p>public class TestVar01{    public static void main(String[] args){        int age &#x3D; 1;        System.out.println(age);    } }</p><p><strong>2.变量作用域</strong></p><p>局部变量：定义在方法中；</p><p>成员变量：定义在类中，方法外；</p><p>代码块{ }，变量作用只在范围内；</p><p><strong>3.进制</strong></p><p>二进制：0b开头</p><p>八进制：0开头</p><p>十进制：</p><p>十六进制：0x开头</p><p>进制转换</p><p><strong>4.定义byte类型范围（-128~127）</strong></p><p>超出范围会报错</p><p><strong>5.Long类型</strong></p><p>定义变量超出int范围需要在后面加L否则无需加L也可以赋值给long类型</p><p>long num &#x3D; 123467890L</p><h2 id="6、逻辑运算"><a href="#6、逻辑运算" class="headerlink" title="6、逻辑运算"></a>6、逻辑运算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&amp;，|，两边表达式都要运算，效率低</span></span><br><span class="line"><span class="comment">//&amp;：一false则false；|:一true则true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOpe02</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">//逻辑与false  2 true :false </span></span><br><span class="line">System.out.println((<span class="number">1</span>&lt;-<span class="number">1</span>)&amp;++a&lt;<span class="number">3</span>);</span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//短路与2 true  false :false</span></span><br><span class="line"><span class="comment">//如果前一个表达式为false时，则后面一个表达式不运算</span></span><br><span class="line">System.out.println((a++&lt;<span class="number">1</span>)&amp;&amp;<span class="number">1</span>&gt;b++);</span><br><span class="line">System.out.println(a);</span><br><span class="line"><span class="comment">//                3</span></span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//逻辑或false  true  :true</span></span><br><span class="line">System.out.println(b&lt;<span class="number">3</span>|<span class="number">3</span>&gt;<span class="number">2</span>);</span><br><span class="line"><span class="comment">//短路或false true  :true </span></span><br><span class="line"><span class="comment">//如果前一个表达式为true时，则后面一个表达式不运算</span></span><br><span class="line">System.out.println(<span class="number">1</span>&gt;<span class="number">3</span>||<span class="number">3</span>&gt;<span class="number">1</span>);</span><br><span class="line"><span class="comment">//逻辑非true</span></span><br><span class="line">System.out.println(!<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//逻辑异或true</span></span><br><span class="line">System.out.println(<span class="literal">true</span>^<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、数组及初始化"><a href="#7、数组及初始化" class="headerlink" title="7、数组及初始化"></a>7、数组及初始化</h2><p><strong>数组初始换总共有三种：静态初始化、动态初始化、默认初始化</strong></p><p><strong>1.静态初始化</strong></p><p>除了用new关键字来产生数组之外，还可直接在定义的数组的同时为数组元素分配空间并赋值</p><p>例如：</p><p>int[] arr &#x3D; {12,23,56};</p><p>int[] arr &#x3D; new int[]{}{12,23,56};</p><p>注意:</p><p>\1.  new int[]{}{12,23,56};错误</p><p>\2. int[] arr;</p><p>​    arr &#x3D; {12,23,56};错误</p><p><strong>2.动态初始化</strong></p><p>数组定义与数组元素分配空间并赋值的操作分开进行</p><p>例如：</p><p>int[] arr;</p><p>arr &#x3D; new int[3]</p><p>arr[0] &#x3D; 12;</p><p>arr[1] &#x3D; 45;</p><p><strong>3. 默认初始化</strong> </p><p>数组是引用类型</p><p><img src="/../../../n-book/weixinobU7VjpWc-HuP6iGsSC4_lN6g0m4/be9c04be925e4ee097d5a1bd9c41818b/clipboard.png" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组01</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array01</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//数组用来存储相同类型的数据</span></span><br><span class="line"><span class="comment">//以int类型为例,可以是任意数据类型</span></span><br><span class="line"><span class="comment">//1.声明</span></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line"><span class="comment">//int[] arr2;</span></span><br><span class="line"><span class="comment">//如果数组只声明，没有后续操作，那么这个数组相当于没定义</span></span><br><span class="line"><span class="comment">//声明不会分配内存</span></span><br><span class="line"><span class="comment">//int[] arr3=null;//空 辨别：数组赋值null和没有赋值 效果不不一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建</span></span><br><span class="line"><span class="comment">//给该数组开辟一个长度为4的空间</span></span><br><span class="line"><span class="comment">//编译期间声明和创建被合并为一句话即，int[] arr = new int[4];</span></span><br><span class="line">arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">93</span>;</span><br><span class="line">arr[<span class="number">3</span>] = <span class="number">23</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">82</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a[6] = 32;//超出数组边界</span></span><br><span class="line"><span class="comment">//方式一：普通for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方拾贰：增强for循环</span></span><br><span class="line"><span class="comment">//缺点：没有索引</span></span><br><span class="line"><span class="comment">//优点：简单</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num:arr)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;增强循环&quot;</span>+num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式三：逆向遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;逆向遍历&quot;</span>+arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、可变参数"><a href="#8、可变参数" class="headerlink" title="8、可变参数"></a>8、可变参数</h2><p><strong>1</strong>.可变参数：提供了一个方法，参数是可变的，解决了部分重载问题</p><p>int…num</p><p>double…num</p><p><strong>2</strong>.可变参数在JDK1.5之后的新特性</p><p><strong>3</strong>.方法的内部对可变参数的处理和数组是一样的</p><p><strong>4</strong>.可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后</p><p><strong>5</strong>.尽量不使用</p><h2 id="9、方法重载"><a href="#9、方法重载" class="headerlink" title="9、方法重载"></a>9、方法重载</h2><p><img src="/../../../n-book/weixinobU7VjpWc-HuP6iGsSC4_lN6g0m4/f9a9322a7d1d4f2bb5d22eb50ffdd50d/clipboard.png" alt="img"></p><p><img src="/../../../n-book/weixinobU7VjpWc-HuP6iGsSC4_lN6g0m4/ccb3d480913b49519eb9eee3b8363e52/clipboard.png" alt="img"></p><h2 id="10、this使用"><a href="#10、this使用" class="headerlink" title="10、this使用"></a>10、this使用</h2><p><strong>1.this可以修饰属性</strong></p><p>属性名字与形参重名，或与局部变量重名，会发生就近原则，若想表示属性的话则需要加上this</p><p><strong>2.this可以修饰方法</strong></p><p>同一个类中方法中可以互相调用，this可以省略不写</p><p><strong>3.this可以修饰构造器</strong></p><p>同一个类中的构造器可以相互调用：注意：this修饰构造器必须放在第一行</p><h2 id="11、左移、右移"><a href="#11、左移、右移" class="headerlink" title="11、左移、右移"></a>11、左移、右移</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正数三码合一</span><br><span class="line">    带符号右移：&gt;&gt;数据的左边补数值，正数补0，负数补1</span><br><span class="line">    带符号左移：&gt;&gt;数据的右边补数值，都补0</span><br><span class="line">    不带符号右移：&gt;&gt;&gt;数据的左边补数值，都补0</span><br></pre></td></tr></table></figure><h2 id="12、运算符优先级"><a href="#12、运算符优先级" class="headerlink" title="12、运算符优先级"></a>12、运算符优先级</h2><p><img src="C:/Users/Shinelon/AppData/Roaming/Typora/typora-user-images/image-20220219135753747.png" alt="image-20220219135753747"></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>1、上一行优先于下一行</p><p>2、只有单目运算符、赋值运算符是从右向左运算的</p><p>（1）（）{}</p><p>（2）单目运算++ –</p><p>（3）算数运算</p><p>（4）位运算</p><p>（5）比较运算（）关系运算</p><p>（6）逻辑运算</p><p>（7）三元运算</p><p>（8）赋值运算</p><h2 id="13、字符串练习"><a href="#13、字符串练习" class="headerlink" title="13、字符串练习"></a>13、字符串练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;asd_qw&quot;</span>;<span class="comment">//=&gt; asd_Qw</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> string.indexOf(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> string.substring(i + <span class="number">1</span>, string.length());</span><br><span class="line"></span><br><span class="line">System.out.println(s.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + s.substring(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(string.substring(<span class="number">0</span>, i));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面对对象</title>
      <link href="/2022/06/17/2%E3%80%81java%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/06/17/2%E3%80%81java%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1.  继承"></a>1.  继承</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//B类继承A类，A类默认继承object类，最终类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-重写override与重载overload"><a href="#2-重写override与重载overload" class="headerlink" title="2. 重写override与重载overload"></a>2. 重写override与重载overload</h2><table><thead><tr><th align="center">区别点</th><th align="center">重载方法</th><th align="center">重写方法</th></tr></thead><tbody><tr><td align="center"><strong>参数列表</strong></td><td align="center">必须修改</td><td align="center">不可更改</td></tr><tr><td align="center">返回类型</td><td align="center">可以修改</td><td align="center">不可更改</td></tr><tr><td align="center">异常</td><td align="center">可以修改</td><td align="center">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="center">访问</td><td align="center">可以修改</td><td align="center">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h2 id="3、对象内存布局"><a href="#3、对象内存布局" class="headerlink" title="3、对象内存布局"></a>3、对象内存布局</h2><p><img src="/pics/%E7%BB%A7%E6%89%BF%E7%9A%84%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.png" alt="继承的内存布局"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line">String name;<span class="comment">//引用数据类型</span></span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">    cat.name = <span class="string">&quot;小白&quot;</span>;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">首先将Cat加载到方法区，包括属性和方法；</span></span><br><span class="line"><span class="comment">对于引用类型，字符串存于常量池，栈-&gt;堆-&gt;常量池（共享）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="4、Java方法的访问修饰符表"><a href="#4、Java方法的访问修饰符表" class="headerlink" title="4、Java方法的访问修饰符表"></a>4、Java方法的访问修饰符表</h2><table><thead><tr><th align="center">可见性</th><th align="center">public</th><th align="center">private</th><th align="center">protected</th><th align="center">dofault</th></tr></thead><tbody><tr><td align="center">类内部</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">同一个包</td><td align="center"></td><td align="center">:x:</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">同一个包的子类</td><td align="center"></td><td align="center">:x:</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">不同包的子类</td><td align="center"></td><td align="center">:x:</td><td align="center">(仅继承可)</td><td align="center">:x:</td></tr><tr><td align="center">不同包非子类</td><td align="center"></td><td align="center">:x:</td><td align="center">:x:</td><td align="center">:x:</td></tr></tbody></table><h2 id="5、Java修饰符适用范围总表"><a href="#5、Java修饰符适用范围总表" class="headerlink" title="5、Java修饰符适用范围总表"></a>5、Java修饰符适用范围总表</h2><p><img src="/pics/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E9%80%82%E7%94%A8%E8%8C%83%E5%9B%B4%E6%80%BB%E8%A1%A8.jpeg" alt="修饰符适用范围总表"></p><h3 id="1、总表简图："><a href="#1、总表简图：" class="headerlink" title="1、总表简图："></a>1、总表简图：</h3><img src="pics/访问修饰符.png" alt="访问修饰符" style="zoom:90%;" /><h3 id="2、-访问权限修饰符"><a href="#2、-访问权限修饰符" class="headerlink" title="2、 访问权限修饰符"></a>2、 访问权限修饰符</h3><ul><li><code>private</code>（当前类访问权限）：在同一类内可见，只能被所属类访问</li><li><code> default</code>（包访问权限）：不使用任何修饰符时，在同一包内可见</li><li><code>protected</code>（子类访问权限+包访问权限）：对同一包内的任何其它类和不同包中的子类可见，不能修饰接口中的成员变量和成员方法（注意：在<strong>不同包中的子类</strong>只能通过<strong>该子类</strong>访问父类中 <code>protected</code> 成员，通过其它子类或父类都无法访问）</li><li><code>public</code>（公共访问权限）：对所有类可见</li></ul><h3 id="3、-非访问修饰符"><a href="#3、-非访问修饰符" class="headerlink" title="3、 非访问修饰符"></a>3、 非访问修饰符</h3><ul><li><p><code>static</code> 用来创建类方法和类变量，类方法<strong>不能访问</strong>的实例变量</p></li><li><p><code>final</code> 用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，不可修改（对于基本数据类型），对于引用数据类型，引用地址不可以改变</p></li><li><p><code>abstract</code> 用来创建抽象类、抽象方法</p></li><li><p><code>synchronized</code> 修饰的方法、代码块在同一时间只能被一个线程访问，不能修饰构造器、成员变量等</p></li><li><p><code>volatile</code> 修饰的<strong>成员变量</strong>在<strong>每次</strong>被线程访问时，都强迫从<strong>共享内存</strong>中重读该成员变量的值；并且，当成员变量发生变化时，强迫线程将变化值回写到共享内存（保证了线程操作时变量的<strong>可见性</strong>，即一个线程修改了某个变量的值，这新值对其它线程来说是立即可见的）（只能保证内存可见性，无法保证操作的原子性）</p></li><li><p><code>transient</code> 序列化的对象包含被 transient 修饰的实例变量时，JVM 跳过该特定的变量</p></li><li><p><code>native</code> 修饰的方法通常采用 C&#x2F;C++ 语言来实现,hiden</p><p>【<strong>final 修饰符使用在如下方面：</strong></p><h4 id="1-final-修饰类中的属性"><a href="#1-final-修饰类中的属性" class="headerlink" title="1. final 修饰类中的属性"></a>1. final 修饰类中的属性</h4><p>表示该属性一旦被初始化便不可改变，这里不可改变的意思对基本类型来说是其值不可变，而对对象属性来说其引用不可再变。其初始化可以在两个地方：一是其定义处，也就是说在 final 属性定义时直接给其赋值；二是在构造函数中。这两个地方只能选其一，要么在定义时给值，要么在构造函数中给值，不能同时既在定义时赋值，又在构造函数中赋予另外的值</p><h4 id="2-final-修饰类中的方法"><a href="#2-final-修饰类中的方法" class="headerlink" title="2. final 修饰类中的方法"></a>2. final 修饰类中的方法</h4><p>说明这种方法提供的功能已经满足当前要求，不需要进行扩展，并且也不允许任何从此类继承的类来重写这种方法，但是继承仍然可以继承这个方法，也就是说可以直接使用。在声明类中，一个 final 方法只被实现一次。</p><h4 id="3-final-修饰类"><a href="#3-final-修饰类" class="headerlink" title="3. final 修饰类"></a>3. final 修饰类</h4><p>表示该类是无法被任何其他类继承的，意味着此类在一个继承树中是一个叶子类，并且此类的设计已被认为很完美而不需要进行修改或扩展。</p><p>对于 final 类中的成员，可以定义其为 final，也可以不是 final。而对于方法，由于所属类为 final 的关系，自然也就成了 final 型。也可以明确地给 final 类中的方法加上一个 final，这显然没有意义。】</p></li></ul><h2 id="6、抽象类"><a href="#6、抽象类" class="headerlink" title="6、抽象类"></a>6、抽象类</h2><ul><li>abstract</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类的继承</span></span><br><span class="line"><span class="comment">//    1、抽象类可以继承抽象类</span></span><br><span class="line"><span class="comment">//    2、普通类可以继承抽象类--必须重写其中(所有)的抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  1)抽象类只能通过普通类实现对象创建 ，无法通过抽象（子）类实现创建对象，可以声明引用</span></span><br><span class="line"><span class="comment">//2)抽象方法abstract和&#123;&#125;只能选择其中一个</span></span><br><span class="line"><span class="comment">//  3)一个类，被abstract修饰的时候，说明他的里面可以存在一些使用abstract修饰的没有方法体的方法</span></span><br><span class="line"><span class="comment">//  4)一个类存在抽象方法，类必须声明为抽象类</span></span><br><span class="line"><span class="comment">//5)本质仍是一个类，抽象方法不能使用private、final、static修饰（不可共用），与继承相悖</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>final</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1、修饰变量 --这个变量（基本类型）值无法被修改，引用对象引用不可修改 --自定义常量</span></span><br><span class="line"><span class="comment">    2、修饰方法 --这个方法无法被重写</span></span><br><span class="line"><span class="comment">    3、修饰类 --这个类无法被继承</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    final 修饰一个引用类型数据 -- 无法重新创建对象，但是可以修改属性对象中的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">        age = <span class="number">25</span>;</span><br><span class="line"><span class="comment">//        num = 45;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    1、普通的成员变量</span></span><br><span class="line"><span class="comment">//    1.1 自定义常量声明的地方</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FIRST</span> <span class="operator">=</span> <span class="string">&quot;first&quot;</span>;</span><br><span class="line"><span class="comment">//    1.2构造代码块</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        SECOND = <span class="string">&quot;second&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> String SECOND;</span><br><span class="line"><span class="comment">//    1.3 构造方法</span></span><br><span class="line">    <span class="keyword">final</span> String THIRD;</span><br><span class="line">    FinalDemo()&#123;</span><br><span class="line">        THIRD = <span class="string">&quot;third&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2、静态成员 --类变量</span></span><br><span class="line"><span class="comment">//    2.1静态常量声明处</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FORTH</span> <span class="operator">=</span> <span class="string">&quot;4&quot;</span>;</span><br><span class="line"><span class="comment">//    2.2 静态代码块</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String FIFTH;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        FIFTH = <span class="string">&quot;fifth&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>static</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    静态方法：</span></span><br><span class="line"><span class="comment">    1、调用静态的成员 -- 包括静态方法和静态变量 -- 可以直接调用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、调用非静态的成员 -- 先创建对象然后才能使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3、在静态方法中，无法使用this--静态方法创建的时候，对象还咩有创建</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    非静态方法--使用上没有限制：</span></span><br><span class="line"><span class="comment">    1、调用静态成员</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、调用非静态成员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、接口"><a href="#7、接口" class="headerlink" title="7、接口"></a>7、接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    接口 特殊抽象类--1.8之前只有抽象方法，不存在任何具体的普通方法</span></span><br><span class="line"><span class="comment">        1.8 default</span></span><br><span class="line"><span class="comment">        1.9+ private</span></span><br><span class="line"><span class="comment">    默认访问权限修饰符是 public（类 当中默认是default）</span></span><br><span class="line"><span class="comment">    在接口中 - 方法 - 默认 - public abstract</span></span><br><span class="line"><span class="comment">             -变量 - 默认 - public static final修饰</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             interface狭义接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     接口     借助普通实现类完成实例化操作</span></span><br><span class="line"><span class="comment">     接口 与类关系 --&gt; 实现 implements</span></span><br><span class="line"><span class="comment">            可以由抽象（实现）接口类    没有任何要求</span></span><br><span class="line"><span class="comment">            普通类 （实现）实现 接口中所有抽象方法</span></span><br><span class="line"><span class="comment">            接口 （继承）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*public, abstract, default, static and strictfp are permitted*/</span></span><br><span class="line">    <span class="comment">/* abstract, default, or static 只能有一个修饰方法*/</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//默认抽象方法 被public abstract修饰</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">NUM</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLASS_A</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  默认方法有方法体，显示声明</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">de</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是接口中的默认方法&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    接口和抽象类：</span></span><br><span class="line"><span class="comment">    相同点：</span></span><br><span class="line"><span class="comment">    1、都是引用类型</span></span><br><span class="line"><span class="comment">    2、都不能直接创建对象</span></span><br><span class="line"><span class="comment">    3、支持内部类</span></span><br><span class="line"><span class="comment">    4、</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    不同：</span></span><br><span class="line"><span class="comment">    1、默认修饰符不同</span></span><br><span class="line"><span class="comment">        抽象类中默认 访问权限修饰符 --defaul</span></span><br><span class="line"><span class="comment">        接口中默认 -- public</span></span><br><span class="line"><span class="comment">            变量 psf</span></span><br><span class="line"><span class="comment">            方法 pa</span></span><br><span class="line"><span class="comment">    2、构造方法、构造代码块、静态代码块</span></span><br><span class="line"><span class="comment">        抽象类中都存在</span></span><br><span class="line"><span class="comment">        接口中都不存在</span></span><br><span class="line"><span class="comment">    3、继承关系</span></span><br><span class="line"><span class="comment">        抽象类的继承依旧遵循单继承的原则</span></span><br><span class="line"><span class="comment">        接口的继承是一个多继承、并且只能发生在接口和接口之间</span></span><br><span class="line"><span class="comment">            接口和类只存在实现关系</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="8、内部类"><a href="#8、内部类" class="headerlink" title="8、内部类"></a>8、内部类</h2><table><thead><tr><th align="center"></th><th align="center">实例内部类</th><th align="center">静态内部类</th><th align="center">局部内部类</th></tr></thead><tbody><tr><td align="center">主要特征</td><td align="center">内部类的实例引用特定的外部类的实例</td><td align="center">内部类的实例不与外部类的任何实例关联</td><td align="center">可见范围是所在的方法</td></tr><tr><td align="center">可用的修饰符</td><td align="center">访问控制修饰符，abstract, final</td><td align="center">访问控制修饰符，static, abstract, final</td><td align="center">abstract, final</td></tr><tr><td align="center">可以访问外部类的哪些成员</td><td align="center">可以直接访问外部类的所有成员</td><td align="center">只能直接访问外部类的静态成员</td><td align="center">可以直接访问外部类的所有成员，并且只能访问所在方法的 final 类型的变量和参数</td></tr><tr><td align="center">拥有成员类型</td><td align="center">只能拥有实例成员</td><td align="center">可以拥有静态成员和实例成员</td><td align="center">只能拥有实例成员</td></tr><tr><td align="center">外部类如何访问内部类的成员</td><td align="center">必须通过内部类的实例来访问</td><td align="center">对于静态成员，可以通过内部类的完整类名来访问</td><td align="center">必须通过内部类的实例来访问</td></tr></tbody></table><ul><li><p>内部类：定义在类结构中的另一个类，编译后，每个内部类都会生成对应的 .class 文件</p></li><li><p>四种内部类：</p><ul><li>实例内部类：没有使用 <code>static</code> 修饰的内部类，OuterClass$InnerClass. class</li><li>静态内部类：使用 <code>static</code> 修饰的内部类，OuterClass$InnerClass. class</li><li>局部内部类：一般在方法中定义的内部类，OuterClass$NInnerClass. class（增加了一个数字 N，用于区分在不同方法中定义的同名的局部内部类）</li><li>匿名内部类：<strong>没有名称</strong>的局部内部类，适合只需要使用一次的类，OuterClass$N</li></ul></li><li><p>特点：</p><ul><li>实例内部类不能含有 static 的变量和方法</li><li>静态内部类（嵌套类）不能访问外部类的非 static 成员</li><li>局部内部类及匿名内部类对象不能使用该内部类所在方法的非 final 局部变量</li></ul></li><li><h3 id="实例内部类、静态内部类、局部内部类代码演示"><a href="#实例内部类、静态内部类、局部内部类代码演示" class="headerlink" title="实例内部类、静态内部类、局部内部类代码演示"></a>实例内部类、静态内部类、局部内部类代码演示</h3><p>  类文件名称<code>Outer.java</code></p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line"><span class="comment">//    外部类 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;外部类Outer-静态变量&quot;</span>;</span><br><span class="line"><span class="comment">//    外部类 实例变量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> <span class="string">&quot;实例变量-外部类&quot;</span>;</span><br><span class="line">    <span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类非静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************************************************/</span></span><br><span class="line">    <span class="comment">// 实例内部类---只能拥有实例成员（不能含有被static修饰的成员）</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">//内部类的非静态方法</span></span><br><span class="line">       <span class="keyword">void</span> <span class="title function_">imethod</span><span class="params">()</span>&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;这是实例内部类的非静态方法，且这里没有静态成员&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"><span class="comment">//       static int method;//不允许</span></span><br><span class="line"><span class="comment">//       static&#123;&#125;   //Identifier or type expected-预期的标识符或类型</span></span><br><span class="line"><span class="comment">//       static void method()&#123;&#125;//不允许</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">/******************************************/</span>    </span><br><span class="line">    <span class="comment">//  静态内部类---可以拥有实例成员和静态成员</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticInner</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> method;<span class="comment">//静态内部类中允许</span></span><br><span class="line">        <span class="keyword">static</span> &#123;&#125;<span class="comment">//静态代码块</span></span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的静态方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">method01</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;静态内部类的非静态方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">//  局部内部类 定义在方法中---只能拥有实例成员</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNInner</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//方法中的局部变量</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">testNInner</span> <span class="operator">=</span> <span class="string">&quot;testNInner&quot;</span>;<span class="comment">//被final修饰，即常量</span></span><br><span class="line">        <span class="comment">//局部类  NInner写在这里</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">NInner</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;局部内部类NInner&quot;</span>;<span class="comment">//ok  实例变量</span></span><br><span class="line"><span class="comment">//            static String name = &quot;NInner&quot;;//当前8版本不支持</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ninnerMethod</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Ninner 局部内部类变量&quot;</span>;</span><br><span class="line">                System.out.println(name);<span class="comment">// 局部内部类 -局部变量</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name);<span class="comment">//局部内部类 -实例变量</span></span><br><span class="line">                System.out.println(testNInner);<span class="comment">//被局部内部类访问的局部变量必须使用final修饰</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//尝试访问外部类成员</span></span><br><span class="line">                System.out.println(Outer.name);<span class="comment">//外部类的静态成员</span></span><br><span class="line">                <span class="comment">//实例成员 需要  外部类.this.实例成员</span></span><br><span class="line">                System.out.println(Outer.<span class="built_in">this</span>.string);<span class="comment">//外部类的实例成员</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NInner</span>().ninnerMethod();<span class="comment">//（在局部内部类--外--</span></span><br><span class="line">                                    <span class="comment">//方法--内--，调用内部类创建的方法）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p> 测试类<code>InnerClassDemo.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//      通过外部类创建内部类对象---创建对象类型为：实例内部类</span></span><br><span class="line">        <span class="comment">//格式：外部类名.实例内部类名 实例内部类对象名 = new 外部类().new 实例内部类();</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        <span class="comment">//调用实例内部类中的方法</span></span><br><span class="line">        inner1.imethod();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建一个静态内部类对象---不需要外部类对象</span></span><br><span class="line"><span class="comment">//        格式：外部类名.静态内部类 静态内部类对象名 = new 外部类名.静态内部类();</span></span><br><span class="line"><span class="comment">//        直接调用静态内部类的构造器创建对象，需用完整的类名</span></span><br><span class="line">        Outer.<span class="type">StaticInner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>.StaticInner();</span><br><span class="line">        s.method01();<span class="comment">//调用静态内部类中的非静态方法</span></span><br><span class="line">        Outer.StaticInner.method();<span class="comment">//调用静态内部类的静态方法，通过类名直接调用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        局部内部类写在了外部类的该方法中testNInner()</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer</span>().testNInner();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>匿名内部类</strong></p><ul><li><p>在定义匿名内部类时会<strong>立即创建一个该类的实例</strong>，这个类定义立即消失，匿名内部类不能重复使用</p></li><li><p>匿名内部类必须<strong>继承</strong>一个父类，或<strong>实现</strong>一个接口，但最多只能继承一个父类，或实现一个接口</p></li><li><p>匿名内部类不能定义构造器，不能是抽象类</p></li><li><p>被匿名内部类访问的<strong>局部变量</strong>必须使用 <code>final</code> 修饰（从 Java 8 开始，被匿名内部类访问的局部变量<strong>自动</strong>使用了 final 修饰）</p></li><li><p>本质上仍是一个类，一个内部类</p></li><li><p>如果外部类和内部类的成员重名时，内部类访问的时候，默认遵循就近原则，如果想访问外部类成员，则可以使用（<strong>外部类名.this.成员</strong>）</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法 AnonymousInnerClass 匿名内部类</span></span><br><span class="line"><span class="comment">// 类名：系统分配 底层创建类名 ---- 外部类名$1 立即创建实例</span></span><br><span class="line"><span class="comment">// 需求：只使用一次或几次就不用了</span></span><br><span class="line"><span class="keyword">new</span> 类名或者接口名(参数列表)&#123;</span><br><span class="line">重写方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><p>  基于接口的匿名内部类</p><ul><li>传统写法— 写一个类&gt;&gt;实现接口方法&gt;&gt;创建一个该类对象&gt;&gt;调用  &#x3D;&#x3D;&#x3D;》（硬编码:shit:）</li></ul>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnonymousInnerClass</span> &#123;</span><br><span class="line">    <span class="comment">//外部其他类 --写主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Tiger</span> <span class="variable">tiger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tiger</span>();</span><br><span class="line">        tiger.method();</span><br><span class="line"></span><br><span class="line">        tiger.show(<span class="keyword">new</span> <span class="title class_">AI</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;qqqqqqqqq&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AI</span>&#123;</span><br><span class="line"><span class="comment">//    接口</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span>&#123;</span><br><span class="line">    <span class="comment">//外部类</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        AI a = () -&gt; System.out.println(&quot;ououou&quot;);</span></span><br><span class="line"><span class="comment">//        a.cry();</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">AI</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;ououou&quot;</span> + age);</span><br><span class="line">                System.out.println(<span class="string">&quot;外部类：&quot;</span> + Tiger.<span class="built_in">this</span>.age);<span class="comment">//访问外部</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.cry();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(AI ai)</span>&#123;</span><br><span class="line">        ai.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  基于类的匿名内部类</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类内部的Father类  </span></span><br><span class="line"><span class="comment">//参数列表 “java&quot;会传递给构造器 （某方法中）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Father</span> <span class="variable">father</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;java&quot;</span>)&#123; </span><br><span class="line">          <span class="comment">//不能添加访问修饰符，因为它的地位是一个局部变量</span></span><br><span class="line">          <span class="comment">//作用域：仅仅在定义它的方法或代码块中</span></span><br><span class="line">          <span class="comment">//可直接访问外部类</span></span><br><span class="line">          <span class="comment">//外部其他类 -- 不能访问 --&gt;匿名内部类</span></span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.printLn(<span class="string">&quot;father对象运行类型 = &quot;</span> + father.gerClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/********************/</span></span><br><span class="line"><span class="comment">//Father类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">Father()&#123;&#125;<span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.printLn(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  基于抽象类的匿名内部类</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">抽象的匿名内部类必须重写抽象方法</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ul><h2 id="9、代码块-–main方法"><a href="#9、代码块-–main方法" class="headerlink" title="9、代码块 –main方法"></a>9、代码块 –main方法</h2><h3 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h3><p>必须是 public   static(不需要创建对象)</p><ol><li><p>main方法时虚拟机调用</p></li><li><p>java虚拟机需要调用类main()方法，所以该方法的访问权限必须是public</p></li><li><p>不必创建对象所以是static</p></li><li><p>该方法接收String类型的数组参数，该数组中保存执行java命令时传递给所运行的类的参数，案例演示接参数</p></li><li><p>java执行程序 参数1 参数2 参数3</p><p> <code>java 运行类名 参数1 参数2。。。</code></p><p> <strong>特别提示：</strong></p><ol><li>在main方法中，可以直接调用main方法所在类的静态成员</li><li>但是，不能直接访问该类中的非静态成员，必须创建一个该类的实例进行访问。</li><li>idea运行配置中，添加main方法 -参数</li></ol></li></ol><h3 id="1）静态代码块"><a href="#1）静态代码块" class="headerlink" title="1）静态代码块"></a>1）静态代码块</h3><p>作用就是对类进行初始化，而且它随着<strong>类的加载</strong>而执行，并且只会执行一次，</p><p>如果是普通代码块，每创建一个对象，就执行</p><h3 id="2）类什么时候被加载？"><a href="#2）类什么时候被加载？" class="headerlink" title="2）类什么时候被加载？"></a>2）类什么时候被加载？</h3><ol><li>创建对象实例时</li><li>创建子类对象实例</li><li><strong>使用类的静态成员的时候</strong></li></ol><h3 id="3）普通代码块"><a href="#3）普通代码块" class="headerlink" title="3）普通代码块"></a>3）普通代码块</h3><p>在创建实例时（<strong>不是类加载</strong>），会被隐式调用，被创建一次，就会调用一次。</p><p><strong>如果只是使用类的静态成员是，普通代码块不会执行</strong></p><h3 id="4）创建一个对象时，在一个类调用顺序：（静态-gt-普通-gt-构造）（同类型-优先级-代码块-x3D-x3D-属性初始化-）"><a href="#4）创建一个对象时，在一个类调用顺序：（静态-gt-普通-gt-构造）（同类型-优先级-代码块-x3D-x3D-属性初始化-）" class="headerlink" title="4）创建一个对象时，在一个类调用顺序：（静态 &gt; 普通 &gt; 构造）（同类型 优先级 代码块 &#x3D;&#x3D; 属性初始化 ）"></a>4）创建一个对象时，在一个类调用顺序：（静态 &gt; 普通 &gt; 构造）（同类型 优先级 代码块 &#x3D;&#x3D; 属性初始化 ）</h3><ol><li><p>调用静态代码块和静态属性初始化（注意：静态代码块和静态属性初始化调用的<strong>优先级一样</strong>，如果有</p><p> 多个静态代码块和多个静态变量初始化，则按他们定义的顺序调用）</p></li><li><p>调用普通代码块和普通属性的初始化（注意：普通代码块和普通属性初始化调用的<strong>优先级一样</strong>，如果有</p><p> 多个普通代码块和多个普通属性初始化，则按定义顺序调用）</p></li><li><p>其次构造方法</p></li></ol><h3 id="5）构造代码块"><a href="#5）构造代码块" class="headerlink" title="5）构造代码块"></a>5）构造代码块</h3><p>构造方法的最前面其实隐含了super()和调用普通代码块，<strong>静态相关的代码块</strong>，属性初始化，在<strong>类加载时</strong>，就执行玩毕，因此是优先于 <strong>构造器</strong>和<strong>普通代码块</strong>执行的。</p><p><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=389&spm_id_from=pageDriver">:happy:韩顺平-代码块细节</a></p><h3 id="6）同步代码块"><a href="#6）同步代码块" class="headerlink" title="6）同步代码块"></a>6）同步代码块</h3><ul><li>方法内部</li><li>由sychroized修饰的</li><li>存在同步锁</li><li>每次方法执行都会执行</li><li>多线程环境下</li></ul><p>演示代码：<code>RunOrderDemo.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunOrderDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s = &quot;</span>+SuperDemo.s);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(Sub.a1);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        new Sub();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        new Sub();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperDemo</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> method01();</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> method02();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">method01</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">134</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">SuperDemo</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> a1 ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        a1 = <span class="number">99</span>;  <span class="comment">//静态代码块优先于静态成员？？？谁在前？</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a3</span> <span class="operator">=</span> ok1();<span class="comment">//9</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a2</span> <span class="operator">=</span> ok();</span><br><span class="line">        System.out.println(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Sub()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">77</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ok1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">29</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="10、枚举"><a href="#10、枚举" class="headerlink" title="10、枚举"></a>10、枚举</h2><ul><li>自定义枚举</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建季节类season</span></span><br><span class="line"><span class="comment">//自定义枚举</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Season</span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name,String desc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常量创建 --暴露对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SPRING</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;SPRING&quot;</span>,<span class="string">&quot;春&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">SUMMER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;SUMMER&quot;</span>,<span class="string">&quot;夏&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">AUTUMN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;AUTUMN&quot;</span>,<span class="string">&quot;秋&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Season</span> <span class="variable">WINTER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Season</span>(<span class="string">&quot;WINTER&quot;</span>,<span class="string">&quot;冬&quot;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">// 对于季节只有4个,是确定的，传统的类不能很好解决</span></span><br><span class="line">        <span class="comment">//只读、不修改</span></span><br><span class="line">        <span class="comment">//枚举类   --把具体的对象依次列举出来</span></span><br><span class="line">        <span class="comment">//enumeration  enum</span></span><br><span class="line">        <span class="comment">//枚举是一组常量的集合</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键字enum实现</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、使用关键字enum替代class  ,默认（隐式）继承java.lang.Enum类（反编译javap 证明）</span></span><br><span class="line"><span class="comment">//2、public static final Season SPRING = new Season(&quot;SPRING&quot;,&quot;春&quot;)直接使用</span></span><br><span class="line"><span class="comment">//SPRING(&quot;SPRING&quot;,&quot;春&quot;)  解读 常量名(实参列表)</span></span><br><span class="line"><span class="comment">//3、如果有多个常量对象，使用 ,间隔</span></span><br><span class="line"><span class="comment">//4、如果使用enum实现枚举，要求将定义常量对象，写在前面</span></span><br><span class="line"><span class="comment">//5、如果使用无参构造器创建对象，可以省略(),</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">SeasonEnum</span>&#123;</span><br><span class="line">SPRING(<span class="string">&quot;SPRING&quot;</span>,<span class="string">&quot;春&quot;</span>),SUMMER(<span class="string">&quot;SUMMER&quot;</span>,<span class="string">&quot;夏&quot;</span>),AUTUMN(<span class="string">&quot;AUTUMN&quot;</span>,<span class="string">&quot;秋&quot;</span>), WINTER(<span class="string">&quot;WINTER&quot;</span>,<span class="string">&quot;冬&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Season</span><span class="params">(String name,String desc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">枚举类对象必须放在枚举类的首行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>枚举常用方法</li></ul><table><thead><tr><th>toString</th><th>父类Enum已经重写</th></tr></thead><tbody><tr><td>name</td><td>返回当前对象名（常量名）</td></tr><tr><td>ordinal</td><td>返回当前对象位置号，从0开始</td></tr><tr><td>values</td><td>返回当前枚举类中所有常量（SeasonEnum[] sarrs &#x3D; SeasonEnum.values();）</td></tr><tr><td>valueOf</td><td>将字符串转成枚举对象，必须存在，否则报错</td></tr><tr><td>compareTo</td><td>比较两个枚举常量，返回编号差值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不能继承类，隐式继承Enum类，但可以实现接口</span></span><br></pre></td></tr></table></figure><h2 id="11、注解Annotation"><a href="#11、注解Annotation" class="headerlink" title="11、注解Annotation"></a>11、注解Annotation</h2><p>1)注解(Annotation)也被称为元数据(Metadata),用于修饰解释包、类、方法、属性、构造器、局部变量等数据信息。<br>类、方法、属性、构造器、局部变量等数据信息.</p><p>2)和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息。</p><p>3)在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在javaEE中注解占据了更重要的角色，例如配置应用程序的任何切面，代替java EE旧版中所遗留的繁冗代码和XML配置等。</p><ol><li><p><code>@interface</code>不是interface，表示是注解类，在5.0之后加入</p></li><li><p><code>@override</code>只能修饰方法</p><p> @Target(ElementType.METHOD)</p></li><li><p><code>@Target</code>是修饰注解的注解，称为元注解指定被修饰的注解能够修饰哪些元素</p></li><li><p><code>@Deprecated</code>用于表示某个程序元素（类、方法等）已过时，（但可以用作版本过度）</p></li><li><p><code>@SuppressWarnings</code>：抑制编译器警告</p></li><li><p><code>@Retention(RetentionPolicy.RUNTIME)</code>：三种策略：运行（另外编译层面的<code>.java</code>，字节码<code>.class</code>）</p></li></ol><h2 id="12、常用类"><a href="#12、常用类" class="headerlink" title="12、常用类"></a>12、常用类</h2><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><table><thead><tr><th align="left">基本数据类型</th><th align="center">字节</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="left">boolean</td><td align="center">1&#x2F;8</td><td align="center">Boolean</td></tr><tr><td align="left">char</td><td align="center">2</td><td align="center">Character</td></tr><tr><td align="left">byte</td><td align="center">1</td><td align="center">Byte</td></tr><tr><td align="left">short</td><td align="center">2</td><td align="center">Short</td></tr><tr><td align="left">int</td><td align="center">4</td><td align="center">Integer</td></tr><tr><td align="left">long</td><td align="center">8</td><td align="center">Long</td></tr><tr><td align="left">float</td><td align="center">4</td><td align="center">Float</td></tr><tr><td align="left">double</td><td align="center">8</td><td align="center">Double</td></tr></tbody></table><p><img src="/pics/%E5%8C%85%E8%A3%85%E7%B1%BB.png"></p><ol><li>jdk5之前手动装箱拆箱，装箱int &#x3D;&gt;&gt;Integer，反之拆箱</li></ol>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动装箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">integer1</span> <span class="operator">=</span> Integer.valueOf(i);<span class="comment">//自动--底层</span></span><br><span class="line"><span class="comment">//手动拆箱</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> integer.intValue();<span class="comment">//自动--底层</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自动装箱 底层仍使用Integer.valueOf();</span></span><br><span class="line"><span class="comment">//自动拆箱 XXXValue()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line">parseXXX(String string)<span class="comment">//将字符串转换为带符号的XXX引用类型，返回是基本数据类型</span></span><br><span class="line">    valueOf()<span class="comment">//返回一个指定类型参数的包装类实例，如Integer i = valueOf(2);，装箱</span></span><br><span class="line">    xxxValue<span class="comment">//public int intValue()返回XXX类型，拆箱</span></span><br><span class="line">    toString</span><br></pre></td></tr></table></figure><ol start="2"><li><p>三元运算符</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">true</span>?<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>):<span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">3.0</span>);</span><br><span class="line"><span class="comment">//obj的值为1.0，三元运算符看做一个整体，虽然new Double(3.0)不执行，但会提升精度</span></span><br><span class="line"><span class="comment">//if - else则是分开</span></span><br></pre></td></tr></table></figure></li><li><p>转换包装类Integer &lt;&#x3D;&#x3D;&gt; String</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Integer -&gt; String</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> i.toString();</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(i);</span><br><span class="line"><span class="comment">//方式3</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> i + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">//String-&gt; Integer</span></span><br><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(s1);</span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(s2);</span><br></pre></td></tr></table></figure></li><li><p>面试题</p><p> 查看<code>valueOf</code>源码：值在<code>-128~127</code>之间直接返回，否则创建新对象</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//i == j ? F</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">j</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//m == n ? T</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//x == y ? F</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a == s ? F</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只要有基本数据类型，判断的值是否相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//o == p ? T</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//q == w ? T</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr></li></ol><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><input disabled="" type="checkbox"> String对象用于保存字符串，即一组字符序列；</li><li><input disabled="" type="checkbox"> 字符串常量对象是用双引号括起来的字符序列；</li><li><input disabled="" type="checkbox"> 字符串的字符使用Unico字符编码，一个字符（不区分字符或者汉字），都占用2字节；</li><li><input disabled="" type="checkbox"> 常用构造方法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(String original);</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] a);</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="type">char</span>[] a,<span class="type">int</span> startIndex,<span class="type">int</span> count);</span><br><span class="line"><span class="comment">//网络传输</span></span><br><span class="line">String(<span class="type">byte</span>[],<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line">String(<span class="type">byte</span>[])</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> <code>String</code>实现了三个接口</li><li><code>Serializable</code>：可以串行化，能够在网络进行网络传输（重要）</li><li><code>Comparable</code>：可以相互比较（重要）</li><li><code>CharSequence</code>：字符序列</li><li><input disabled="" type="checkbox"> <code>String</code> 是<code>final</code>类，不能被其他类继承；</li><li><input disabled="" type="checkbox"> 其有属性<code>private final char valus[]</code>；用于存放字符串内容，不可更改，不能指向新的（地址）对象（存储的数据可更改）final作用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">// 乜有重写equals、</span></span><br><span class="line">String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;<span class="comment">//通过赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 直接指向常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">// 在堆中创建一个对象，指向常量池</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(s1);</span><br><span class="line"><span class="comment">// String存放数据的是一个value的数组，堆中对象，指向常量池</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 如果两个字符串拼接，底层会做优化；</span></span><br><span class="line"><span class="comment">//如果是变量，也会优化，会先创建一个StringBuilder,通过append连接，然后再堆内存创建一个String，返回给他</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s1 + <span class="string">&quot;string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// s4.intern()表示的是常量池中的地址，而不是堆地址</span></span><br></pre></td></tr></table></figure><h4 id="字符串常用方法"><a href="#字符串常用方法" class="headerlink" title="字符串常用方法"></a>字符串常用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//判断方法：</span></span><br><span class="line">equals<span class="comment">//区分大小写，判断内容是否相等</span></span><br><span class="line">    equalsIgnoreCase<span class="comment">//忽略大小写的判断内容是否相等</span></span><br><span class="line">    contains<span class="comment">//当且仅当此字符串包含指定的char值序列时才返回true</span></span><br><span class="line">    endWith<span class="comment">//是否以什么结尾</span></span><br><span class="line">    startWith<span class="comment">//是否以什么开头</span></span><br><span class="line">    isEmpty<span class="comment">//是否为空</span></span><br><span class="line"> <span class="comment">//获取方法：       </span></span><br><span class="line">    length<span class="comment">//获取字符个数，字符串长度</span></span><br><span class="line">    charAt<span class="comment">//获取某索引处的字符，注意不能使用Str[index]方式</span></span><br><span class="line">    indexOf<span class="comment">//获取字符在字符串中第1次出现的索引，索引从0开始，若没有则返回-1</span></span><br><span class="line">    lastIndexOf<span class="comment">//获取字符在字符串中最后1次出现的索引，同上</span></span><br><span class="line">    substring<span class="comment">//截取指定范围的子串</span></span><br><span class="line"><span class="comment">//转换方法：</span></span><br><span class="line">toCharArray<span class="comment">//</span></span><br><span class="line">getByte<span class="comment">//使用平台的默认字符集将此 String编码为字节序列，将结果存储到新的字节数组中</span></span><br><span class="line">valueOf<span class="comment">//返回 指定 类型 参数的字符串 指定形式</span></span><br><span class="line">toUpperCase<span class="comment">//将所有在此字符 String使用默认语言环境的规则大写</span></span><br><span class="line">toLowCase<span class="comment">//将所有在此字符 String使用默认语言环境的规则，以小写</span></span><br><span class="line">concat<span class="comment">//将指定的字符串连接到该字符串的末尾</span></span><br><span class="line"><span class="comment">//替换方法：</span></span><br><span class="line">replace<span class="comment">//替换</span></span><br><span class="line">replaceAll<span class="comment">//替换所有</span></span><br><span class="line"><span class="comment">//其他方法：</span></span><br><span class="line">split<span class="comment">//将此字符串分割为给定的 regular expression的匹配</span></span><br><span class="line">    trim<span class="comment">//去前后空格</span></span><br><span class="line">    compareTo<span class="comment">//按字典顺序比较两个字符串</span></span><br></pre></td></tr></table></figure><hr><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><p>可变长度，是一个容器，保存的是字符串变量，里面的值可以更改，<code>char[] value</code>；放在堆中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        +16</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;asdf&quot;</span>);</span><br><span class="line"><span class="comment">//      append方法 返回同一个对象（this）</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">s2</span> <span class="operator">=</span> s1.append(<span class="string">&quot;qwer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line"></span><br><span class="line">        System.out.println(s2 + <span class="string">&quot;&quot;</span> + s1.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;s2 = &quot;</span> + s2);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">insert</span> <span class="operator">=</span> s2.insert(<span class="number">2</span>, <span class="string">&quot;poi&quot;</span>);</span><br><span class="line">        System.out.println(insert + <span class="string">&quot; &quot;</span> +insert.length());</span><br><span class="line"></span><br><span class="line">        insert.append(<span class="number">324</span>);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line"></span><br><span class="line">        insert.append(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(insert);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">reverse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">reverse1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;4321&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;reverse = &quot;</span> + reverse + <span class="string">&quot;\t&quot;</span>+reverse.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;reverse1 = &quot;</span> + reverse1);</span><br><span class="line">        System.out.println(<span class="string">&quot;reverse1.reverse() = &quot;</span> + reverse1.reverse() + <span class="string">&quot;\t&quot;</span>+reverse1.reverse().length());</span><br><span class="line"><span class="comment">//      StringBuffer 没有重写equals方法，比较的是地址，返回的一直是false</span></span><br><span class="line">        System.out.println(reverse.toString().equals(reverse1.reverse().toString()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String -&gt;StringBuffer</span></span><br><span class="line"><span class="comment">//        1、StringBuffer构造方法</span></span><br><span class="line"><span class="comment">//        2、append</span></span><br><span class="line"><span class="comment">//        3、insert</span></span><br><span class="line"><span class="comment">//        StringBuffer 转换为 String</span></span><br><span class="line"><span class="comment">//        1、String构造</span></span><br><span class="line"><span class="comment">//        2、substring</span></span><br><span class="line"><span class="comment">//        3、toString</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>机制：可变字符串&#x2F;缓冲字符串；初始容量16；扩容机制：*2+2</li><li>构造方法：无参；有参：指定容量（int）；指定初始内容（String）</li><li>获取的方法：length、capacity</li><li>添加方法：append、insert</li><li>删除方法：deleteCharAt、delete</li><li>其他方法：replace、reverse、substring</li></ul><hr><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ul><li>用在字符串缓冲区被单个线程使用的时候</li><li>主要操作append和insert方法，可重载，适配更多类型数据</li></ul><p>:+1:<strong>使用原则</strong></p><ol><li>如果字符串存在大量的修改操作，一般使用StringBuffer或StringBuilder</li><li>如果字符串存在大量的修改操作，并在单线程的情况，使用StringBuilder</li><li>如果字符串存在大量的修改操作，并在多线程的情况，使用StringBuffer</li><li>如果我们字符串很少修改，被多个对象引用，使用String，比如配置信息等</li></ol><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>BigDecimal:解决浮点类型数据表示不精准的问题；</p><p>常用方法：构造方法；计算方法：divide 除不尽，需要取舍</p><p>BigInteger:表数范围比Integer类型更大</p><p>常用方法：</p><h3 id="Date、Calendar、LocalDate"><a href="#Date、Calendar、LocalDate" class="headerlink" title="Date、Calendar、LocalDate"></a>Date、Calendar、LocalDate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在java中，最常使用的表示时间的类Date</span></span><br><span class="line"><span class="comment">    java.util.Date --任何一种情况都可以直接使用</span></span><br><span class="line"><span class="comment">    java.sql.Date --sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;date = &quot;</span> + date);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="comment">//毫秒数 从1970-01-01 00:00:00 --时间戳</span></span><br><span class="line">        System.out.println(<span class="string">&quot;time = &quot;</span> + time);</span><br><span class="line"><span class="comment">//        获取时间  @Deprecated 弃用</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> date.getYear()+<span class="number">1900</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;year = &quot;</span> + year);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> date.getMonth()+<span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;month = &quot;</span> + month);</span><br><span class="line"><span class="comment">//      几号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> date.getDate();</span><br><span class="line">        System.out.println(<span class="string">&quot;days = &quot;</span> + days);</span><br><span class="line"><span class="comment">//      周几</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> date.getDay();</span><br><span class="line">        System.out.println(<span class="string">&quot;day = &quot;</span> + day);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hours</span> <span class="operator">=</span> date.getHours();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>格式转化器（时间戳）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDateFormatDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException  &#123;</span><br><span class="line">        <span class="comment">//格式转化器</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">simpleDateFormat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;YYYY-MM-dd HH-mm-ss SSS&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//默认当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);<span class="comment">//Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">        <span class="comment">//Date date1 = new Date(long time);//time 传入 时间戳，获得当前时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;date = &quot;</span> + date);</span><br><span class="line">        System.out.println(<span class="string">&quot;date1 = &quot;</span> + date1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;date.getTime() = &quot;</span> + date.getTime());<span class="comment">//时间戳</span></span><br><span class="line">        System.out.println(<span class="string">&quot;new Date(date.getTime()) = &quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>(date.getTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;current: &quot;</span> + simpleDateFormat.format(date.getTime()));</span><br><span class="line">        <span class="comment">//      字符串转时间格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;1999-12-21 01-21-12 121&quot;</span>;<span class="comment">//符合上述规则&quot;YYYY-MM-dd HH-mm-ss SSS&quot;（只可以多）</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> simpleDateFormat.parse(dateStr);</span><br><span class="line">        System.out.println(<span class="string">&quot;parse = &quot;</span> + parse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* output:</span></span><br><span class="line"><span class="comment">date = Mon Mar 07 15:22:07 CST 2022</span></span><br><span class="line"><span class="comment">date1 = Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line"><span class="comment">date.getTime() = 1646637727781</span></span><br><span class="line"><span class="comment">new Date(date.getTime()) = Mon Mar 07 15:22:07 CST 2022</span></span><br><span class="line"><span class="comment">current: 2022-03-07 15-22-07 781</span></span><br><span class="line"><span class="comment">parse = Sun Dec 27 01:21:12 CST 1998</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/7 - 15:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalenderDemo</span> &#123;</span><br><span class="line"><span class="comment">//    日历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        获取实例  一个万年历对象,</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="comment">//        获取当前时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">current</span> <span class="operator">=</span> calendar.getTime();<span class="comment">//时间戳</span></span><br><span class="line">        System.out.println(<span class="string">&quot;current = &quot;</span> + current);</span><br><span class="line"><span class="comment">//        毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> calendar.getTimeInMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;millis = &quot;</span> + millis);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        获取时间的某个部分,月份从0开始，需要加一</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> calendar.get(calendar.YEAR);</span><br><span class="line">        System.out.println(<span class="string">&quot;year = &quot;</span> + year);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        设置时间</span></span><br><span class="line"><span class="comment">//        calendar.set(2023,2,4);//Sat Mar 04 16:08:46 CST 2023</span></span><br><span class="line">        calendar.set(<span class="number">2023</span>,Calendar.FEBRUARY,<span class="number">4</span>);<span class="comment">//Sat Feb 04 16:08:46 CST 2023</span></span><br><span class="line">        System.out.println(<span class="string">&quot;calendar.getTime() = &quot;</span> + calendar.getTime());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        时间加减</span></span><br><span class="line">        calendar.add(Calendar.MONTH,<span class="number">2</span>);<span class="comment">//Tue Apr 04 16:08:46 CST 2023</span></span><br><span class="line">        System.out.println(<span class="string">&quot;calendar.getTime() = &quot;</span> + calendar.getTime());</span><br><span class="line"></span><br><span class="line">        calendar.add(Calendar.HOUR,-<span class="number">18</span>);<span class="comment">//Mon Apr 03 22:08:46 CST 2023</span></span><br><span class="line">        System.out.println(<span class="string">&quot;calendar.getTime() = &quot;</span> + calendar.getTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取万年历对象 ：getInstance</li><li>关于时间方法：set、getTime</li><li>获取时间的部分：配合静态变量使用，get、</li><li>时间加减：add、参数正负表增减</li></ul><hr><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>方法：</p><ul><li><p>hashCode：默认实现，使用内存地址</p></li><li><p>equals：默认实现，使用的&#x3D;&#x3D;</p></li><li><p>toString：默认实现，全限定类名@十六进制字符串（根据hashCode）</p></li><li><p>getClass：获取类对象，字节码对象</p></li><li><p>finalize：资源回收，负责资源清理工作，垃圾回收机制GC会在回收之前调用这个方法 —不推荐使用</p></li><li><p>notify</p></li><li><p>notifyAll</p></li><li><p>wait</p></li></ul><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- Arrays.toString()</span><br><span class="line">- sort()<span class="comment">//排序</span></span><br><span class="line">- binarySearch()<span class="comment">//二分查找</span></span><br><span class="line">- copyOf()<span class="comment">//拷贝数组</span></span><br><span class="line">- fill()<span class="comment">//填充</span></span><br><span class="line">- asList()<span class="comment">//将一组值，转化成list</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2022/06/17/3%E3%80%81%E9%9B%86%E5%90%88/"/>
      <url>/2022/06/17/3%E3%80%81%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="初识集合"><a href="#初识集合" class="headerlink" title="初识集合"></a>初识集合</h2><p><img src="/pics/%E4%BD%93%E7%B3%BB.jpeg" alt="体系"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        creat an object of collection</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//        添加数据 返回Boolean类型数据</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">add</span> <span class="operator">=</span> collection.add(<span class="string">&quot;珍珠&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;烧仙草&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;红豆&quot;</span>);</span><br><span class="line">        collection.add(<span class="string">&quot;寒天&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        当前集合中存储的元素个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> collection.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;size = &quot;</span> + size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除指定的元素，返回的是boolean，表示删除的结果</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">remove</span> <span class="operator">=</span> collection.remove(<span class="string">&quot;珍珠&quot;</span>);</span><br><span class="line"><span class="comment">//        打印集合内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;collection = &quot;</span> + collection);</span><br><span class="line"><span class="comment">//        removeIf 当前集合中的元素存在符要求的时候，删除这个元素</span></span><br><span class="line"><span class="comment">//        只删除符合要求的元素 --test方法中返回的值是true</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">re</span> <span class="operator">=</span> collection.removeIf(<span class="keyword">new</span> <span class="title class_">Predicate</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(Object o)</span> &#123;</span><br><span class="line"><span class="comment">//                这个元素是寒天的时候，删除这个元素</span></span><br><span class="line">                <span class="keyword">return</span> o.equals(<span class="string">&quot;寒天&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;collection = &quot;</span> + collection);</span><br><span class="line"><span class="comment">//        判断集合中是否包含指定的元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> collection.contains(<span class="string">&quot;烧仙草&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;contains = &quot;</span> + contains);</span><br><span class="line"><span class="comment">//        判断是否是一个空集合 里面没有任何的数据的集合</span></span><br><span class="line"><span class="comment">//        collection c = null;//集合为null   不是**空**</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;collection.isEmpty() = &quot;</span> + collection.isEmpty());</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        c2.add(<span class="string">&quot;劫&quot;</span>);</span><br><span class="line">        c2.add(<span class="string">&quot;jinx&quot;</span>);</span><br><span class="line">        c2.add(<span class="string">&quot;烧仙草&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将指定集合中的所有元素从另一个集合中删除</span></span><br><span class="line">        collection.add(<span class="string">&quot;绿茶&quot;</span>);</span><br><span class="line">        collection.remove(<span class="string">&quot;红豆&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> collection.removeAll(c2);</span><br><span class="line">        System.out.println(<span class="string">&quot;collection = &quot;</span> + collection);</span><br><span class="line"><span class="comment">//      判断collection中是否包含c2的全部元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b3</span> <span class="operator">=</span> collection.addAll(c2);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b4</span> <span class="operator">=</span> collection.containsAll(c2);</span><br><span class="line">        System.out.println(<span class="string">&quot;collection = &quot;</span> + collection);</span><br><span class="line">        System.out.println(<span class="string">&quot;b3 + b4 = &quot;</span> + b3 + b4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      containsAll判断collection中是否包含c2全部元素</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Collection-接口操作集合元素的方法"><a href="#Collection-接口操作集合元素的方法" class="headerlink" title="Collection 接口操作集合元素的方法"></a>Collection 接口操作集合元素的方法</h2><ul><li>Iterable 的子接口</li><li>增加<ul><li><code>boolean add(Object o)</code>：向集合里添加<strong>一个</strong>元素，如果集合对象被添加操作改变了，则返回 true</li><li><code>boolean addAll(Collection c)</code>：把集合 c 里的所有元素添加到指定集合里，如果集合对象被添加操作改变了，则返回 true</li></ul></li><li>删除<ul><li><code>boolean remove(Object o)</code>：删除集合中第一个符合条件的<strong>指定元素</strong> o，返回 true</li><li><code>boolean removeAll(Collecrion c)</code>：从该集合中<strong>删除</strong>集合 c 里包含的所有元素，如果删除了一个或一个以上的元素，该方法将返回 true</li><li><code>boolean retainAll(Collection c)</code>：使该集合中<strong>仅保留</strong>集合 c 里包含的元素（求两个集合的<strong>交集</strong>），如果该操作改变了调用该方法的集合，则该方法返回 true</li><li><code>void clear()</code>：清除集合里的所有元素，将集合长度变为 0</li></ul></li><li>查询<ul><li><code>boolean contains(Object o)</code>：判断集合里是否包含指定元素 o</li><li><code>boolean containsAll(Collection c)</code>：判断集合里是否包含集合 c 里的所有元素</li><li><code>boolean isEmpty()</code>：判断集合是否为空，当集合长度为 0 时返回 true，否则返回 false</li><li><code>int size()</code>：返回集合里元素的个数</li></ul></li><li>其它操作<ul><li><code>Iterator&lt;E&gt; iterator()</code>：获取一个 Iterator 对象（迭代器）</li><li><code>Object[] toArray()</code>：把集合转换成一个数组，所有的集合元素变成对应的数组元素（转化 Object 数组时，没有必要使用 <code>toArray[new Object[0]]</code>，可以直接使用 <code>toArray()</code>）</li><li><code>&lt;T&gt; T[] toArray(T[] a)</code>：返回一个包含此集合中所有元素的数组；返回数组的运行时类型是指定数组的类型。如果指定的数组 a <strong>能容纳</strong>该集合，则 a 将在其中返回；否则，将分配一个具有指定数组的运行时类型和此集合大小的<strong>新数组</strong>（集合转化为类型 T 数组时，尽量传入空数组 T[0]）</li></ul></li><li>默认方法<ul><li><code>Stream&lt;E&gt; stream()</code></li><li><code>Stream&lt;E&gt; parallelStream()</code></li><li><code>boolean removeIf(Predicate&lt;E&gt; filter)</code>：删除满足给定过滤器为真的此集合的所有元素</li><li><code>void forEach(Consumer&lt;? super T&gt; action)</code>：对 Iterable 的每个元素执行给定的操作</li></ul></li></ul><h2 id="四种List遍历-迭代器"><a href="#四种List遍历-迭代器" class="headerlink" title="四种List遍历-迭代器"></a>四种List遍历-迭代器</h2><h3 id="使用-Iterator-遍历集合元素"><a href="#使用-Iterator-遍历集合元素" class="headerlink" title="使用 Iterator 遍历集合元素"></a>使用 Iterator 遍历集合元素</h3><ul><li><p>Iterator 接口用于遍历（即迭代访问）Collection 集合中的元素</p></li><li><p>通过<strong>把集合元素的值传给了迭代变量</strong></p></li><li><p>在创建 Iterator 迭代器之后，除非<strong>通过迭代器自身的 remove() 方法</strong>对 Collection 集合里的元素进行修改，否则在对 Collection 集合进行修改后再使用迭代器进行迭代访问时，迭代器会抛出 ConcurrentModificationException</p></li><li><p>实例方法</p><ul><li><code>boolean hasNext()</code>：如果集合里仍有元素可以迭代，则返回 true</li><li><code>Object next()</code>：返回集合里的下一个元素</li><li><code>void remove()</code>：删除集合里<strong>上一次</strong> next 方法返回的元素</li></ul></li><li><p>快速失败（fail-fast）</p><ul><li>在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改，modCount !&#x3D; expectedmodCount），则会抛出 ConcurrentModificationException</li><li>java.util 包下的集合类都是快速失败的，不能在多线程下发生并发修改</li></ul><h3 id="使用-foreach-循环遍历集合元素"><a href="#使用-foreach-循环遍历集合元素" class="headerlink" title="使用 foreach 循环遍历集合元素"></a>使用 foreach 循环遍历集合元素</h3><ul><li>与使用 Iterator 接口迭代访问<strong>集合元素</strong>类似，foreach 循环中的迭代变量也<strong>不是集合元素本身</strong>，系统只是<strong>依次把集合元素的值赋给迭代变量</strong>，所以在遍历时不能对 Collection 集合里的元素进行修改，否则会抛出 ConcurrentModificationException（可以使用特殊的集合 CopyOnWriteArrayList、CopyOnWriteSet、ConcurrentHashMap）</li></ul><h3 id="使用-for-循环遍历集合元素"><a href="#使用-for-循环遍历集合元素" class="headerlink" title="使用 for 循环遍历集合元素"></a>使用 for 循环遍历集合元素</h3><ul><li>在遍历时可以对 Collection 集合里的元素进行修改</li><li>当<strong>删除</strong>多个元素时，应<strong>从后往前遍历</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        集合对象需要借助迭代器遍历</span></span><br><span class="line"><span class="comment">//        Collection接口遍历元素方式-使用迭代器</span></span><br><span class="line"><span class="comment">//        1）Iterator对象成为迭代器，主要用于遍历Collection集合中的元素</span></span><br><span class="line"><span class="comment">//        2）所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了</span></span><br><span class="line"><span class="comment">//          Iterator接口的对象，即返回一个迭代器</span></span><br><span class="line"><span class="comment">//        3）仅仅用于遍历集合，Iterator本身并不存放对象</span></span><br><span class="line"><span class="comment">//        4）异常：调用.next()之前，必须调用.hasNext()，若不调用，直接调用</span></span><br><span class="line"><span class="comment">//        .next()会抛出NoSuchElementException异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      四种list的遍历</span></span><br><span class="line"><span class="comment">//        1.普通for循环</span></span><br><span class="line"><span class="comment">//        2.使用Iterator迭代器</span></span><br><span class="line"><span class="comment">//        3.使用迭代器的简写形式 forEach循环结构，增强for循环</span></span><br><span class="line"><span class="comment">//        4.使用List集合体系对应的ListIterator迭代器进行，</span></span><br><span class="line"><span class="comment">//        双向从头到尾（无参时），有参构造，既可以从前向后，也可反向（参数为0，只能向后）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        c1.add(<span class="string">&quot;red&quot;</span>);</span><br><span class="line">        c1.add(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        c1.add(<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        c1.add(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">        c1.add(<span class="string">&quot;purple&quot;</span>);</span><br><span class="line">        <span class="comment">//  只能从头到尾--单向迭代iterator</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> c1.iterator();</span><br><span class="line">        <span class="comment">//hasNext()判断是否还有下个元素</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next()：1、下移2、将指向位置的集合元素返回</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      底层仍然是迭代器</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : c1) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        普通for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c1.size(); i++) &#123;</span><br><span class="line">            System.out.println(c1.get(i));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//      使用List集合体系对应的ListIterator迭代器，双向</span></span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">listIterator</span> <span class="operator">=</span> c1.listIterator();<span class="comment">//传参某个位置开始，末端 .size()</span></span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext()) &#123;<span class="comment">//向后</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> listIterator.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasPrevious())&#123;<span class="comment">//向前</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">previous</span> <span class="operator">=</span> listIterator.previous();</span><br><span class="line">            System.out.println(previous);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//foreach</span></span><br><span class="line">        c1.forEach(System.out::println);<span class="comment">//lambda</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>记录元素的添加顺序，允许元素重复的集合，<strong>列表</strong></li><li>默认按元素的添加顺序设置元素的索引</li></ul><h3 id="List-接口"><a href="#List-接口" class="headerlink" title="List 接口"></a>List 接口</h3><ul><li>List 判断两个对象相等的标准：两个对象相等通过 equals() 方法比较返回 true</li><li>增加<ul><li><code>void add(int index, Object element)</code>：将元素 element 插入到 List 集合的 index 处，索引范围 [0, size)</li><li><code>boolean addAll(int index, Collection c)</code>：将集合 c 所包含的所有元素都插入到 List 集合的 index 处</li></ul></li><li>删除<ul><li><code>Object remove(int index)</code>：删除并返回 <strong>index 索引</strong>处的元素</li></ul></li><li>修改<ul><li><code>Object set(int index, Object element)</code>：将 index 索引处的元素替换成 element 对象，返回被替换的旧元素</li></ul></li><li>查询<ul><li><code>Object get(int index)</code>：返回集合 index 索引处的元素</li><li><code>int indexOf(Object o)</code>：返回对象 o 在 List 集合中第一次出现的位置索引</li><li><code>int lastIndexOf(Object o)</code>：返回对象 o 在 List 集合中最后一次出现的位置索引</li></ul></li><li>其它<ul><li><code>List subList(int fromlndex, int tolndex)</code>：返回从索引 fromlndex（包含）到索引 tolndex（不包含）处所有集合元素组成的子集合，<strong>返回的列表由此列表支持，因此返回列表中的非结构性更改将反映在此列表中，反之亦然</strong></li><li><code>ListIterator&lt;E&gt; listIterator(int index)</code>：返回一个 ListIterator 对象（双向的迭代器），从列表的指定位置开始</li></ul></li><li>默认方法<ul><li><code>void replaceAll(UnaryOperator&lt;E&gt; operator)</code>：对列表中的每一个元素执行特定的操作，并用处理的结果替换该元素</li><li><code>void sort(Comparator&lt;E&gt; c)</code>：使用提供的 Comparator 来比较元素排序该列表</li></ul></li><li>常用构造器<ul><li><code>ArrayList()</code>：构造一个初始容量为 10 的空列表</li><li><code>ArrayList(Collection&lt;? extends E&gt; c)</code>：构造一个包含指定 collection 的元素的列表，这些元素是按照该 collection 的迭代器返回它们的顺序排列的</li><li><code>HashSet()</code>：构造一个新的空 set，其底层 HashMap 实例的默认初始容量是 16，加载因子是 0.75</li><li><code>HashSet(Collection&lt;? extends E&gt; c)</code>：构造一个包含指定 collection 中的元素的新 set</li></ul></li></ul><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><h3 id="ArrayList-扩容机制"><a href="#ArrayList-扩容机制" class="headerlink" title="ArrayList 扩容机制"></a>ArrayList 扩容机制</h3><ul><li><p>ArrayList中维护一个Object类型的数组，transient Object[] elementData;&#x2F;&#x2F;transient 修饰的属性，不被序列化</p><p>最大容量整型长度-8</p><p><strong>构造方法</strong>：</p></li><li><p>ArrayList()：无参构造，初始容量为0，第一次添加，动态扩容，如需要再次扩容，则扩容1.5倍</p></li><li><p>ArrayList(int i)：指定大小的构造器，则初始elementData容量为指定大小，如需要再次扩容，则扩容1.5倍</p></li><li></li></ul><p>原码！！！</p><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        随机字母生成，去重</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="comment">//        System.out.println((int) &#x27;a&#x27;);//97</span></span><br><span class="line"><span class="comment">//        System.out.println((int) &#x27;A&#x27;);//65</span></span><br><span class="line">        <span class="comment">//                                 90</span></span><br><span class="line"><span class="comment">//        System.out.println((int) &#x27;z&#x27;);//122</span></span><br><span class="line"><span class="comment">//        int temp = random.nextInt(123-97)+97;</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> random.nextInt(<span class="number">123</span>-<span class="number">65</span>)+<span class="number">65</span>;</span><br><span class="line">            <span class="keyword">while</span> (arrayList.size()&lt;<span class="number">30</span>) &#123;</span><br><span class="line">                temp = random.nextInt(<span class="number">123</span> - <span class="number">65</span>) + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;<span class="number">90</span>&amp;&amp;temp&lt;<span class="number">97</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                arrayList.add((<span class="type">char</span>)temp);<span class="comment">//size一直在变</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(arrayList);</span><br><span class="line"><span class="comment">//            去重</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line"><span class="comment">//            新的集合 contains （是否包含元素）-对第一次出现的元素，直接添加到集合中</span></span><br><span class="line">            <span class="keyword">if</span>(!list.contains(o))&#123;<span class="comment">//存在则是true，！取反为false,不添加</span></span><br><span class="line">                list.add(o);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>+list);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        通过 String s = &quot;abcdefghijklmnopqrstuvwxyz&quot;;</span></span><br><span class="line"><span class="comment">            char[] chars = s.concat(s.toUpperCase()).toCharArray();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><ul><li><p>LinkedList底层是维护一个双向链表，不需要考虑扩容问题，线程不安全，增删快，改查慢</p></li><li><p>特有方法poll与remove效果一样；peek方法仅仅查看</p></li><li><p>List 还可以使用普通的 for 循环、listIterator() 方法来遍历集合元素</p></li><li><p>Listlterator 接口继承了 Iterator 接口，额外的方法：</p></li><li><p><code>boolean hasPrevious()</code>：判断该迭代器关联的集合是否还有上一个元素</p></li><li><p><code>Object previous()</code>：返回该迭代器的上一个元素</p></li><li><p><code>void add(Object o)</code>：在指定位置插入一个元素</p></li><li><p><code>void set(E e)</code>：用指定元素替换 next 或 previous 返回的最后一个元素</p></li></ul><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><ul><li><p>底层是数组，考虑扩容问题10， *2</p></li><li><p>线程安全</p></li><li><p>不推荐使用</p></li><li><p>Vector 的子类 Stack（用于模拟栈）中的额外方法（数组的最后一个元素位置作为栈顶）：<code>void push(Object item)</code>、<code>Object pop()</code>、<code>Object peek()</code></p></li></ul><h2 id="集合嵌套"><a href="#集合嵌套" class="headerlink" title="集合嵌套"></a>集合嵌套</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 旅馆 嵌套 房间，房间 嵌套 顾客</span></span><br><span class="line">        ArrayList&lt;Custom&gt; room1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Custom&gt; room2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Custom&gt; room3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Custom&gt; room4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        room1.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;haha&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        room1.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;sdfa&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        room1.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;vzxa&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        room1.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;hva&quot;</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        room2.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;Ad&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        room2.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;Afd&quot;</span>,<span class="number">14</span>));</span><br><span class="line"></span><br><span class="line">        room3.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;rAd&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        room3.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;tAd&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        room3.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;hAd&quot;</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        room4.add(<span class="keyword">new</span> <span class="title class_">Custom</span>(<span class="string">&quot;kkd&quot;</span>,<span class="number">12</span>));</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Custom&gt;&gt; hotel = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hotel.add(room1);</span><br><span class="line">        hotel.add(room2);</span><br><span class="line">        hotel.add(room3);</span><br><span class="line">        hotel.add(room4);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*       for (ArrayList&lt;Custom&gt; room : hotel) &#123;</span></span><br><span class="line"><span class="comment">            for (Custom custom : room) &#123;</span></span><br><span class="line"><span class="comment">                System.out.println(custom);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">          System.out.println(hotel);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Custom</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Custom</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Custom&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a><strong>Set</strong></h2><ul><li>不记录元素的添加顺序，不允许元素重复的集合，顺序是固定的</li><li>尽量不要修改 Set 集合元素中<strong>判断两个元素相等的方法用到的实例变量</strong>，否则将会导致 Set 无法正确操作这些集合元素；<strong>Set 存储的对象必须重写 hashCode 和 equals</strong></li></ul><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><ol><li>定义： HashSet集合中的元素是通过hash值来⽐较是否相同 集合通过元素的hashCode和equals⽅法来⽐较两个元素是否相同, 不同就存⼊, 相同不存⼊ 元素存⼊的位置未知,和存⼊的顺序⽆关</li><li>存储原理： HashSet最后还是存⼊数组中, 只是根据元素的Hash值来确定存⼊的⻆标位置 <ul><li>元素的hash值 ^ (元素的hash值 &gt;&gt;&gt; 16) &amp; (数组的⻓度-1) </li><li>HashSet中不是直接存⼊我们给定的元素, ⽽是⽤集合中的⼀个内部类封装我们存⼊的元素,所 以当我们存⼊null的时候,不会因为和数组中⻆标位上默认值null起冲突</li><li>如果两个不同的元素根据不同的Hash值计算出了同⼀个⻆标值,那么都能存进去</li></ul></li><li>构造⽅法： HashSet() 构造出⼀个新的集合, 底层数组默认的初始容  量是16(扩容⼀倍),加载因⼦是0.75 <ul><li>加载因⼦: 集合中的数组可⽤的 </li><li>⻆标值得可选范围越⼩,计算出重复⻆标值得概率就越⾼ HashSet(Collection c) 构造⼀个包含指定collection中元素的新set</li></ul></li><li>常⽤⽅法 ：boolean add( E e) 如果此set集合中尚未包含指定元素,则添加指定元素 <ul><li>boolean remove(Object o) 移除某个元素 [] </li><li>int size() 获取集合的⻓</li></ul></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  1、底层创建了一个双列集合HashMap，实现单列集合</span></span><br><span class="line"><span class="comment">//  2、底层结构  数组+链表+红黑树（1.8）</span></span><br><span class="line"><span class="comment">//  3、无序（但固定），不可有重复元素，没有下标，不能用下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4、 使用set有参构造方法 --将Arraylist转成hashset -- 去重，但存在元素顺序会被改变</span></span><br><span class="line"><span class="comment">//LinkedHashSet --去重顺序不会改变</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   5、当没有重写hashcode,equals方法时，默认根据内存地址进行计算和比较，此时， 去重的规则没变 - 因为new出来 地址不一致，被认为是不同的数据，都可以存进去，而不会去重</span></span><br><span class="line"><span class="comment">   6、hashSet 要求存储的类型 -- 重写hashCode，equals方法</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        当没有重写hashcode,equals方法时，默认根据内存地址进行计算和比较，</span></span><br><span class="line"><span class="comment">//        此时， 去重的规则没变 - 因为new出来 地址不一致，被认为是不同的数据，</span></span><br><span class="line"><span class="comment">//        都可以存进去，而不会去重</span></span><br><span class="line"><span class="comment">//        hashSet 要求存储的类型 -- 重写hashCode，equals方法</span></span><br><span class="line">        ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        arrayList.add(<span class="string">&quot;柠檬&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;桃子&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;桃子&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;桃子&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;桃子&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;橙子&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;果子&quot;</span>);</span><br><span class="line">        arrayList.add(<span class="string">&quot;梨子&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">        System.out.println(arrayList.size());</span><br><span class="line"><span class="comment">//        使用set有参构造方法 --将Arraylist转成hashset -- 去重，顺序改变</span></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(arrayList);</span><br><span class="line">        <span class="type">LinkedHashSet</span> <span class="variable">linkedHashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(arrayList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(linkedHashSet);</span><br><span class="line"><span class="comment">//        System.out.println(list.size());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##LinkedHashSet</p><ul><li>HashSet 的子类，底层维护的是数组和双向链表</li><li>可以保证添加的顺序和取出的顺序是一致的</li><li>根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素<strong>添加的次序</strong></li></ul><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><ul><li>NavigableSet 接口（SortedSet 的子接口）的实现类，元素处于<strong>排序</strong>状态</li><li>根据<strong>红黑树</strong>结构确定元素的存储位置</li><li>TreeSet 支持两种排序方法：自然排序（默认）和定制排序</li><li>TreeSet 集合判断两个元素相等的标准：元素的 <code>compareTo(Object obj)</code> 方法或 Comparator 对象的 <code>compare(T o1, T o2)</code> 方法的返回值为 0</li><li>只能添加同一种类型的对象（需要比较大小），否则会引发 ClassCastException 异常</li><li>当需要把一个对象放入 TreeSet 中，重写该对象对应类的 equals() 方法时，应保证该方法与 <code>compareTo(Object obj)</code> 方法有一致的结果</li><li>额外的方法<ul><li>查询<ul><li><code>Object first()</code>：返回集合中的第一个元素</li><li><code>Object last()</code>：返回集合中的最后一个元素</li><li><code>Object lower(Object e)</code>：返回集合中位于指定元素之前的元素（即小于指定元素的最大元素，参考元素不需要是 TreeSet 集合里的元素）</li><li><code>Object higher (Object e)</code>：返回集合中位于指定元素之后的元素（即大于指定元素的最小元素，参考元素不需要是 TreeSet 集合里的元素）</li></ul></li><li>其它<ul><li><code>SortedSet subSet(Object fromElement, Object toElement)</code>：返回此 Set 的子集合（部分视图），范围从 froraElement（包含）到 toElement （不包含），<strong>返回的 Set 受此 Set 支持，所以在返回 Set 中的更改将反映在此 Set 中，反之亦然</strong></li><li><code>SortedSet headSet(Object toElement)</code>：返回此 Set 的子集（部分视图），由小于 toElement 的元素组成，<strong>返回的 Set 受此 Set 支持，所以在返回 Set 中的更改将反映在此 Set 中，反之亦然</strong></li><li><code>SortedSet tailSet(Object fromElement)</code>：返回此 Set 的子集（部分视图），由大于或等于 fromElement 的元素组成，<strong>返回的 Set 受此 Set 支持，所以在返回 Set 中的更改将反映在此 Set 中，反之亦然</strong></li><li><code>Comparator comparator()</code>：如果 TreeSet 采用了定制排序，则该方法返回定制排序所使用的 Comparator；如果 TreeSet 采用了自然排序，则返回 null</li></ul></li></ul></li></ul><h3 id="Comparator-（定制排序）和Comparable（默认-自然排序）的区别"><a href="#Comparator-（定制排序）和Comparable（默认-自然排序）的区别" class="headerlink" title="Comparator （定制排序）和Comparable（默认-自然排序）的区别"></a>Comparator （定制排序）和Comparable（默认-自然排序）的区别</h3><p>Comparator – TreeSet sort方法当中都可以使用，比较引用类型</p><ul><li>1、使用方式：Comparable 必须由比较类自己实现；Comparator 可以独立使用一个实现类实现，（<del>可写成匿名方法</del>）</li><li>2、使用时机：Comparable 实现了之后，再次使用这个类的时候都是使用同一个规则；Comparator 每个实现类都互相独立，可以分别实现不同规则</li><li>3、Comparator 重写 compare方法；Comparable 重写 compareTo方法</li></ul><h3 id="升序-降序（比较器）"><a href="#升序-降序（比较器）" class="headerlink" title="升序-降序（比较器）"></a>升序-降序（比较器）</h3><ul><li><p>compareTo 升序 当前 - o；降序 o - 当前；</p></li><li><p>compare     升序 o1 - o2； 降序 o2 - o1；</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TreeSet</span></span><br><span class="line">        TreeSet&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        set.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;AGS&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供Comparator 或者 类型实现Comparable</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line"><span class="comment">//        class MyComparator implements Comparator&lt;Pet&gt; &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(Pet o1, Pet o2) &#123;</span></span><br><span class="line"><span class="comment">//                return o1.name.charAt(1)-o2.name.charAt(1);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        TreeSet&lt;Pet&gt; pets = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//        TreeSet&lt;Pet&gt; pets = new TreeSet&lt;&gt;(new MyComparator());</span></span><br><span class="line">        <span class="comment">//匿名内部类，传参</span></span><br><span class="line"><span class="comment">//        TreeSet&lt;Pet&gt; pets1 = new TreeSet&lt;&gt;(new Comparator&lt;Pet&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(Pet o1, Pet o2) &#123;</span></span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        pets.add(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;A1&quot;</span>,<span class="number">17</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;A2&quot;</span>,<span class="number">12</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;A3&quot;</span>,<span class="number">35</span>));</span><br><span class="line">        pets.add(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;A4&quot;</span>,<span class="number">5</span>));</span><br><span class="line">        System.out.println(pets);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        floor和higher</span></span><br><span class="line"><span class="comment">//        floor 返回小于等于指定数据的最大的那个元素，不存在返回null</span></span><br><span class="line"><span class="comment">//        higher 返回大于指定数据的最小的那个元素，不存在返回null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(pets.higher(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;A6&quot;</span>, <span class="number">15</span>)));</span><br><span class="line">        System.out.println(pets.floor(<span class="keyword">new</span> <span class="title class_">Pet</span>(<span class="string">&quot;A6&quot;</span>, <span class="number">15</span>)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Pet&gt;&#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pet</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pet&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Pet o)</span> &#123;</span><br><span class="line">        <span class="comment">//实现方法</span></span><br><span class="line">        <span class="comment">//小的在左，大的在右</span></span><br><span class="line">        <span class="comment">//0 相等，不添加</span></span><br><span class="line">        <span class="comment">//当前-指定 升序 （compare: o1 - o2）</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.age!=o.age)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.age-o.age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.name.charAt(<span class="number">0</span>)-o.name.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>Map遍历</li></ul><ol><li>获取所有键的集合的遍历 通过keySet⽅法获取到所有键的Set集合 演示</li><li>通过values⽅法获取所有值的Collection集合</li><li>通过entrySet集合获取所有的键值对的Set集合</li></ol><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ol><li>底层使⽤的是数组 </li><li>HashMap就是通过我们存⼊的key获取到⼀个hash值, 经过计算之后, 获取到⼀个数组⻆标, 然后将key和value封装到⼀个Entry⾥⾯, 然后存⼊数组 </li><li>当数组容量不够的时候, 会⾃动扩容⼀倍</li></ol><h3 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h3><ol><li>无参，默认16，扩容2倍扩容</li><li>有参，指定容量相近的2的次方值</li></ol><h3 id="扩容："><a href="#扩容：" class="headerlink" title="扩容："></a>扩容：</h3><ol><li>扩容触发当达到当前容量*加载因子&#x3D;临界值</li><li>扩容1.7之前采用*2倍扩容，1.8使用&lt;&lt;1位运算扩容</li><li></li></ol><h3 id="构造器："><a href="#构造器：" class="headerlink" title="构造器："></a>构造器：</h3><ul><li><p><code>HashMap()</code>  构造一个空的 <code>HashMap</code> ，默认初始容量（16）和默认负载系数（0.75）</p></li><li><p><code>HashMap(int initialCapacity)</code>  构造一个空的 <code>HashMap</code>具有指定的初始容量和默认负载因子（0.75）</p></li><li><p><code>HashMap(int initialCapacity,  float loadFactor)</code>  构造一个空的 <code>HashMap</code>具有指定的初始容量和负载因子</p></li><li><p><code>HashMap(Map&lt;?  extends K,? extends V&gt; m)</code>  构造一个新的 <code>HashMap</code>与指定的相同的映射 <code>Map</code></p></li></ul><h3 id="HashMap扩容机制："><a href="#HashMap扩容机制：" class="headerlink" title="HashMap扩容机制："></a>HashMap扩容机制：</h3><ul><li>HashMap：底层是一个数组+链表+红黑树（树化）<ol><li><code>table</code>：一个表（数组），内部存储节点，经过处理的HashCode值相等，则放在相同的<code>table</code>索引上，如果该索引上存储的是一个链表，则遍历，检查是否添加在尾部</li><li><code>HashMap$Node</code>：节点(内部类)</li><li><code>entrySet</code>：<code>HashMap$EntrySet</code>，方法可获得所有&lt;k,v&gt;集合</li><li><code>size</code>：大小</li><li><code>modCount</code>：修改次数</li><li><code>threshold</code>：临界值，为<code>size*loadFactor</code>，达到临界值，<code>table</code>进行扩容</li><li><code>loadFactor=0.75</code>：加载因子默认值</li></ol></li></ul><ol><li><p>执行构造器 new HashMap()</p><p> 初始化加载因子 loadFactor &#x3D; 0.75</p><p> HashMap$Node[] table &#x3D; null</p></li><li><p>执行<code>put(K,V)&#123;return putVal(hash(key),key,value,false,true);&#125;</code>，处理hashcode</p></li><li><p>执行putVal，第一次table为null，进行扩容（resize），第一次扩容16，关键代码 <code>Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[]) new Node[newCap]</code>，赋值给<code>table</code>，</p></li><li></li></ol><h4 id="简述：扩容，树化触发"><a href="#简述：扩容，树化触发" class="headerlink" title="简述：扩容，树化触发"></a>简述：扩容，树化触发</h4><ul><li>table默认初始化为0，第一次初始化为16，超过临界值，就会以2倍扩容，节点添加在table哪个下标，通过处理hashCode，确定索引位置，对于相同的索引，若能添加则挂载在尾部，或替换</li><li>树化需满足两个条件：一是链表长度达到 <code>8</code>，table大于<code>64</code>（默认），才会树化链表，链表长度小于6会转化为链表</li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><strong>常用方法</strong></h3><ul><li><pre><code>   void clear()    删除所有的映射   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-  ```</span><br><span class="line">      boolean containsKey(Object key) </span><br><span class="line">      如果此映射包含指定键的映射，则返回 true  </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>   boolean containsValue(Object value)    如果此map将一个或多个键映射到指定值，则返回 true     <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">     Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() </span><br><span class="line">     返回此map中包含的映射的Set视图 </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>   V get(Object key)    返回到指定键所映射的值，或 null如果此映射包含该键的映射    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">     V getOrDefault(Object key, V defaultValue) </span><br><span class="line">     返回到指定键所映射的值，或 defaultValue如果此映射包含该键的映射 </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>   boolean isEmpty()    如果此map不包含键值映射，则返回 true     <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">     Set&lt;K&gt; keySet() </span><br><span class="line">     返回此map中包含的键的Set视图 </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>   V put(K key, V value)    将指定的值与此映射中的指定键相关联    <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">     void putAll(Map&lt;? extends K,? extends V&gt; m) </span><br><span class="line">     将指定map的所有映射复制到此map </span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;<br>   V replace(K key, V value)<br>   只有当目标映射到某个值时，才能替换指定键的条目 </p>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">     Collection&lt;V&gt; values() </span><br><span class="line">     返回此map中包含的值的Collection视图 </span><br></pre></td></tr></table></figure></li></ul><h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><ol><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()，实现的迭代器</li><li>Set<K> keySet()  ，返回此map中包含的键的Set视图 ，</li><li>Collection<V> values() ，返回此map中包含的值的Collection视图</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;1&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        map.put(<span class="string">&quot;2&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">&quot;3&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        map.put(<span class="string">&quot;4&quot;</span>,<span class="number">1000</span>);</span><br><span class="line">        map.put(<span class="string">&quot;5&quot;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//        map 遍历</span></span><br><span class="line"><span class="comment">//        *获取完成键值对 entrySet set</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        System.out.println(<span class="string">&quot;entrySet:----1&quot;</span>);</span><br><span class="line"><span class="comment">//        遍历set集合</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">// 获取每一个键值对中的数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;entry.getKey()=&quot;</span>+entry.getKey()+<span class="string">&quot; entry.getValue() = &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;entrySet:----2&quot;</span>);</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entries.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry =  iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;entry.getKey()=&quot;</span>+entry.getKey()+<span class="string">&quot; entry.getValue() = &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;entrySet:----3&quot;</span>);</span><br><span class="line">        entries.forEach(System.out::println);</span><br><span class="line">        entries.forEach(entry-&gt;System.out.println(<span class="string">&quot;entry.getKey()=&quot;</span>+entry.getKey()+<span class="string">&quot; entry.getValue() = &quot;</span> + entry.getValue()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        *获取完整的键的集合 KeySet set</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        System.out.println(<span class="string">&quot;keySet:----1&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key=&quot;</span> + key + <span class="string">&quot;value=&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;keySet:----2&quot;</span>);</span><br><span class="line"><span class="comment">//      迭代器</span></span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; iterator1 = keySet.iterator();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        foreach</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        *获取完整的值的集合 values collection</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        迭代器</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        foreach</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>按照指定规则排序</p><h2 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h2><p>线程安全</p><p>初始化容量11，扩容机制2*old+1</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>传统方法的问题：</p><ul><li>不能对传入数据类型进行约束</li><li>遍历时需要进行类型转换，对于集合中数据较大，影响效率</li></ul><p>好处：</p><ul><li>编译检查添加元素的类型，提高了安全性</li><li>减少了类型转换的次数，提高效率</li><li>不在提示编译警告</li></ul><p>介绍：</p><ol><li>泛型又称为参数化类型，JDK5.0新特性，解决数据类型的安全性</li><li>类声明或实例化时只要制定好需要的具体类型即可</li><li>泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生<code>ClassCastException</code>异常。同时，代码简洁、健壮。</li><li>泛型作用：可以在类声明时通过一个标识表示类中某个属性的类型，或者返回是某个方法的返回值类型，或者是参数类型</li></ol><h3 id="泛型语法"><a href="#泛型语法" class="headerlink" title="泛型语法"></a>泛型语法</h3><ol><li>T,E只能是引用类型</li><li>指定泛型类型后，可以传入该类型或者子类类型</li><li></li></ol><h3 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h3><ul><li><p>基本语法</p><p>  class 类名&lt;T,R…&gt;{&#x2F;&#x2F;…表示可以有多个泛型}</p></li><li><p>注意细节</p><ol><li>普通成员可以使用泛型（属性、方法）</li><li><strong>使用泛型的数组，不能初始化</strong></li><li>静态方法中不能使用类的泛型(类加载，对象没有创建，类型无法确定)</li><li>泛型类的类型，是在<strong>创建对象</strong>时确定的（因为创建对象时，需要指定确定类型）</li><li>如果在创建对象时，没有指定类型，默认为Object类型</li></ol></li></ul><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&lt;T,R,M&gt;&#123;</span><br><span class="line">    String name;</span><br><span class="line">    R r;</span><br><span class="line">    M m;</span><br><span class="line">    T t;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><ul><li>注意细节<br>   1. 接口中，静态成员也不能使用泛型（这个和泛型类规定一样）<br>   2. 泛型接口的类型，在<strong>继承接口</strong>或者<strong>实现接口</strong>时确定<br>   3. 没有指定类型，默认为Object</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本语法</span></span><br><span class="line">interface 接口名&lt;T,R...&gt;&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承接口、实现接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&lt;U,R&gt;&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(U)</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(R)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里子接口继承父接口B时，指定泛型类型，重写父接口方法，则自动替换</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span> entends A&lt;Integer,String&gt;&#123;</span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Integer)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@override</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hi</span><span class="params">(String)</span>&#123;</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//同上，指定类型，若没有写&lt;&gt;，则默认为&lt;Object，Object&gt;,会出现警告，避免</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>&lt;Double,Float&gt;&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><ul><li><p>注意细节</p><pre><code>   1. 泛型方法，可以定义在普通类中，也可以定义在泛型类中  2. 当泛型方法被调用时，类型会确定  3. `public void eat(E e)&#123;&#125;`，修饰符后没有&lt;T,R...&gt;eat方法不是泛型方法，而是使用了泛型  4. 泛型方法可以使用类声明的泛型，也可以使用自己声明的泛型</code></pre>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>&#123;<span class="comment">// 普通类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法调用时，传入参数，编译器就会确定类型</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T,R&gt; <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">(T t,R r)</span>&#123;<span class="comment">//泛型方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span>&lt;T,R&gt;&#123;<span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(T t,M m)</span>&#123;<span class="comment">//泛型方法,---细节四</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="泛型继承和通配符"><a href="#泛型继承和通配符" class="headerlink" title="泛型继承和通配符"></a>泛型继承和通配符</h3><ol><li>泛型不具备继承性</li></ol><p>​<code>List&lt;Object&gt; list = new ArrayList&lt;String&gt;();//对吗？</code></p><ol start="2"><li><code>&lt;?&gt;</code>：支持任意泛型类型</li><li><code>&lt;? extends A&gt;</code>：支持A类及A类的子类，规定了泛型的上限</li><li><code>&lt;? super A&gt;</code>：支持A类及A类的父类，不限于直接父类，规定了泛型的下限</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2022/06/17/4%E3%80%81IO%E6%B5%81/"/>
      <url>/2022/06/17/4%E3%80%81IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="一、文件路径"><a href="#一、文件路径" class="headerlink" title="一、文件路径"></a>一、文件路径</h2><ol><li>正斜线<code>/</code>,表示只需一个</li><li>反斜线<code>\</code>，表示需要两个（需要转义）</li></ol><h2 id="二、常用方法"><a href="#二、常用方法" class="headerlink" title="二、常用方法"></a>二、常用方法</h2><ol><li><p>文件实例创建</p></li><li><p>一个file对象代表硬盘中实际存在的一个文件或者目录</p></li><li><p>无论该路径下是否存在文件或者目录，都不影响File对象的创建</p></li></ol>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File(String pathname) </span><br><span class="line"><span class="comment">//通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</span></span><br><span class="line">File(File parent, String child) </span><br><span class="line"><span class="comment">//从父抽象路径名和子路径名字符串创建新的 File实例</span></span><br><span class="line">File(String parent, String child) </span><br><span class="line"><span class="comment">//从父路径名字符串和子路径名字符串创建新的 File实例</span></span><br><span class="line">File(URI uri) </span><br><span class="line"><span class="comment">//通过将给定的 file: URI转换为抽象路径名来创建新的 File实例</span></span><br></pre></td></tr></table></figure><ol start="2"><li>常用方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">createNewFile</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 创建文件，如果存在这样的文件，就不创建了</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> </span><br><span class="line"><span class="comment">//测试此抽象路径名与给定对象的相等性 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">delete</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//删除由此抽象路径名表示的文件或目录 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">mkdir</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//创建由此抽象路径名命名的目录 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">mkdirs</span><span class="params">()</span> </span><br><span class="line"><span class="comment">//创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">renameTo</span><span class="params">(File dest)</span>    </span><br><span class="line"><span class="comment">//把⽂件重命名为指定的⽂件路径</span></span><br><span class="line">    <span class="comment">//判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDirectory</span><span class="params">()</span>:判断是否是⽬录</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFile</span><span class="params">()</span>:判断是否是⽂件</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span>:测试此抽象路径名表示的文件或目录是否存在 </span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRead</span><span class="params">()</span>:判断是否可读</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canWrite</span><span class="params">()</span>:判断是否可写</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canExecute</span><span class="params">()</span>:判断是否可执⾏</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHidden</span><span class="params">()</span>:判断是否隐藏</span><br></pre></td></tr></table></figure><ul><li>提示：<ul><li>如果创建文件或者文件夹忘记写盘符路径，则默认在项目路径下</li><li>同一个路径下不能出现相同名称的文件或文件夹，名称包括后缀</li><li>重命名只是将File代表的⽂件或⽂件夹重命名, java中的File对象所表示的路径还是创建时赋予的路 径</li><li>java中的删除不⾛回收站</li><li>要删除⼀个⽂件夹, 这个⽂件夹中不能包含⽂件或者⽂件夹,必须是空的</li></ul></li></ul><h2 id="三、文件类型"><a href="#三、文件类型" class="headerlink" title="三、文件类型"></a>三、文件类型</h2><p>字节型（二进制）：图片、音频、压缩包等</p><p>字符型：纯文本文件</p><p>根据类型选择相应处理方式</p><h2 id="四、文件读写"><a href="#四、文件读写" class="headerlink" title="四、文件读写"></a>四、文件读写</h2><p><img src="/pics/IO%E6%B5%81-%E7%B1%BB%E7%BB%93%E6%9E%84.png" alt="类结构"></p><p>读写操作是相对于内存而言，从文件读取至内存中，称为输入（读）；反之称为输出（写）</p><h3 id="案例一-fileReader-read"><a href="#案例一-fileReader-read" class="headerlink" title="案例一(fileReader.read())"></a>案例一(fileReader.read())</h3><ul><li><p>关于字符流read读取</p></li><li><p>源代码</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.iostreamdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.NestingKind;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/15 - 15:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.iostreamdemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="string">&quot;E:\\JavaStep2\\src\\com\\my\\day02\\iostreamdemo\\a.txt&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path1);</span><br><span class="line">        <span class="type">char</span>[] chars = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(file);</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fileReader.read(chars))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;读取长度：&quot;</span>+len);</span><br><span class="line">            System.out.println(<span class="string">&quot;内容为：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(chars,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="字符输入流：Reader"><a href="#字符输入流：Reader" class="headerlink" title="字符输入流：Reader"></a><strong>字符输入流：Reader</strong></h4><p>java.io.Reader <strong>抽象类</strong>是表示⽤于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输⼊流的基本共性功能⽅法。</p><p> public void close() ：关闭此流并释放与此流相关联的任何系统资源。<br> public int read() ： 从输⼊流读取⼀个字符。<br> public int read(char[] cbuf) ： 从输⼊流中读取⼀些字符，并将它们存储到字符数组 cbuf中 。</p><h4 id="字符输入流：FileReader"><a href="#字符输入流：FileReader" class="headerlink" title="字符输入流：FileReader"></a><strong>字符输入流：FileReader</strong></h4><p>java.io.FileReader 类是读取字符⽂件的便利类。构造时使⽤系统默认的字符编码和默认字节缓冲区。</p><ol><li>字符编码：字节与字符的对应规则。Windows系统的中⽂编码默认是GBK编码表。 idea中UTF-8</li><li>字节缓冲区：⼀个字节数组，⽤来临时存储字节数据</li></ol><h4 id="字符输出流：Writer"><a href="#字符输出流：Writer" class="headerlink" title="字符输出流：Writer"></a><strong>字符输出流：Writer</strong></h4><p>java.io.Writer <strong>抽象类</strong>是表示⽤于写出字符流的所有类的超类，将指定的字符信息写出到⽬的地。它定义了字节 输出流的基本共性功能⽅法。<br>void write(int c) 写⼊单个字符。<br>void write(char[] cbuf) 写⼊字符数组。<br>abstract void write(char[] cbuf, int off, int len) 写⼊字符数组的某⼀部分,off数组的开始索 引,len写的字符个数。<br>void write(String str) 写⼊字符串。<br>void write(String str, int off, int len) 写⼊字符串的某⼀部分,off字符串的开始索引,len写的字 符个数。<br>void flush() 刷新该流的缓冲。<br>void close() 关闭此流，但要先刷新它。</p><h4 id="字符输出流：FileWriter"><a href="#字符输出流：FileWriter" class="headerlink" title="字符输出流：FileWriter"></a><strong>字符输出流：FileWriter</strong></h4><p>java.io.FileWriter 类是写出字符到⽂件的便利类。<br>FileWriter(String fileName) : 根据字符串路径和⽂件获取连接 FileWriter(File file) : 根据File对象和⽂件获取连接 FileWriter(File file , boolean append) : 根据File对象和⽂件获取连接, 让流可以从尾部写⼊</p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节输入流-InputStream"><a href="#字节输入流-InputStream" class="headerlink" title="字节输入流-InputStream"></a>字节输入流-InputStream</h4><p>java.io.InputStream <strong>抽象类</strong>是表示字节输⼊流的所有类的超类；</p><p>public void close() ：关闭此输⼊流并释放与此流相关联的任何系统资源。 </p><p>public abstract int read() ： 从输⼊流读取数据的下⼀个字节。 </p><p>public int read(byte[] b) ： 从输⼊流中读取⼀些字节数，并将它们存储到字节数组 b中</p><h4 id="字节输入流-FileInputStream"><a href="#字节输入流-FileInputStream" class="headerlink" title="字节输入流-FileInputStream"></a>字节输入流-FileInputStream</h4><ul><li>以字节的形式来读取⽂件内容 </li><li>InputStream抽象类的⼦类, 已经重写了read()⽅法</li><li>read() : 从此输⼊流中读取⼀个数据字节，每次可以读取⼀个字节的数据，提升为int类型，读取到⽂件 末尾，返回 -1  </li><li>read(byte[] b) : 从此输⼊流中将最多b.length个字节的数据读⼊⼀个byte数组中</li><li>read(byte[] b,int off,int len) : 从此输⼊流中读取最多 len个字节的数据读⼊到⼀个byte[] 数组中 </li><li>close() : 关闭此输⼊流并释放与此流有关的所有系统资源</li></ul><h4 id="字节输出流-OutputStream"><a href="#字节输出流-OutputStream" class="headerlink" title="字节输出流-OutputStream"></a>字节输出流-OutputStream</h4><p>java.io.OutputStream &#96;<strong>抽象类</strong>是表示字节输出流的所有类的超类</p><ul><li>public void close() ：关闭此输出流并释放与此流相关联的任何系统资源</li><li>public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出 </li><li>public void write(byte[] b) ：将 b.length字节从指定的字节数组写⼊此输出流 </li><li>public void write(byte[] b, int off, int len) ：从指定的字节数组写⼊ len字节，从偏移量 off开 始输出到此输出流 </li><li>public abstract void write(int b) ：将指定的字节输出流</li></ul><h4 id="字节输出流-FileOutputStream"><a href="#字节输出流-FileOutputStream" class="headerlink" title="字节输出流-FileOutputStream"></a>字节输出流-FileOutputStream</h4><ul><li>java.io.FileOutputStream 类是⽂件输出流，⽤于将数据写出到⽂件</li><li>write(int b) : 将指定字节写⼊此⽂件输出流 </li><li>write(byte[] b) : 将b.length个字节从指定byte数组写⼊此⽂件输出流中 </li><li>write(byte[] b,int off, int len) : 将指定byte数组中从偏移量off开始的len个字节写⼊此⽂件输出量 </li><li>close() : 关闭输出流并释放与此流有关的所有系统资源</li></ul><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><p>缓冲流只是⼀个壳,实际还是字节流在⼯作</p><p>字节缓冲流： BufferedInputStream ， BufferedOutputStream （实现文件复制）</p><p>字符缓冲流： BufferedReader ， BufferedWriter</p><h4 id="字节输入缓冲流-BufferedInputStream"><a href="#字节输入缓冲流-BufferedInputStream" class="headerlink" title="字节输入缓冲流 BufferedInputStream"></a>字节输入缓冲流 BufferedInputStream</h4><p>构造：</p><ul><li>BufferedInputStream(InputStream in) 创建⼀个BufferedInputStream 并保存其参数, 即输⼊in ,⼀遍将来使⽤</li><li>BuffferedInputStream(InputStream in , int size)</li></ul><p>常用方法：</p><ul><li>read(byte[] b, int off, int len) : 从此字节输⼊流中给定偏移量处开始各字节读取到指定的byte数组中</li><li>read() : ⼀次读取⼀个字节</li><li>close() : 关闭并释放资源,实际关闭的是内部真正⼯作的字节流</li></ul><h4 id="字节输出缓冲流BufferedOutputStream"><a href="#字节输出缓冲流BufferedOutputStream" class="headerlink" title="字节输出缓冲流BufferedOutputStream"></a>字节输出缓冲流BufferedOutputStream</h4><p>构造：</p><ul><li>BufferedOutputStream(OutputStram out) 创建⼀个新的缓冲输出流，以将数据写⼊指定的底层输出流 </li><li>BufferedOutputStream(OutputStream out, int size) 创建⼀个新的缓冲输出流，以将具有指定缓冲区⼤⼩的数据写⼊指定的底层输出流</li></ul><p>常用方法：</p><ul><li>write(int b) : 将指定的字节写⼊此缓冲流的输出流 </li><li>write(byte[] b, int off, int len) : 将指定byte数组中从偏移量off开始的len个字节吸⼊此缓冲流的输⼊流</li><li>flush() : 刷新此缓冲流的输出流 </li><li>close() : 关闭流,并释放资源</li></ul><h2 id="五、序列化"><a href="#五、序列化" class="headerlink" title="五、序列化"></a>五、序列化</h2><p><strong>⼀个对象要想序列化，必须满⾜两个条件:</strong> </p><ul><li>该类必须实现 <strong>java.io.Serializable 接⼝</strong>， Serializable 是⼀个标记接⼝，不实现此接⼝的类将不会使任何状态序列化或反序列化，会抛出 NotSerializableException 。 </li><li>该类的所有属性必须是可序列化的。如果有⼀个属性不需要可序列化的，则该属性必须注明是瞬态的，使⽤<code>transient</code>关键字修饰。</li></ul><p>序列号为Long类型，如<code>private static final long serivalVersionUID = 11111L;</code></p><p>代码：</p><p>将<code>TestObjectDemo </code>的对象存入<code>c.txt</code>文件，序列化、反序列化</p><p><code>private transient int age;</code>无法被序列化，被<code>transient</code>瞬时修饰</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.serializedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/16 - 17:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestObjectDemo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// TestObjectDemo 类</span></span><br><span class="line">    <span class="comment">//版本号 兼容 防止读写错误</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serivalVersionUID</span> <span class="operator">=</span> <span class="number">11111L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestObjectDemo</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TestObjectDemo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.serializedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/16 - 17:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.serializedemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:\\JavaStep2\\src\\com\\my\\day02\\serializedemo\\c.txt&quot;</span>;</span><br><span class="line">        <span class="type">TestObjectDemo</span> <span class="variable">testObjectDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestObjectDemo</span>(<span class="string">&quot;Tina&quot;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">//      创建序列化流对象</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//      写出对象</span></span><br><span class="line">            out.writeObject(testObjectDemo);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Serialized data is saved&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反序列化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.serializedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/16 - 17:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.serializedemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RSerializableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:\\JavaStep2\\src\\com\\my\\day02\\serializedemo\\c.txt&quot;</span>;</span><br><span class="line"><span class="comment">//      创建反序列化</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        调用反序列化方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> in.readObject();</span><br><span class="line"><span class="comment">//      判断是否是指定类对象</span></span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> TestObjectDemo)&#123;</span><br><span class="line">                <span class="type">TestObjectDemo</span> <span class="variable">t</span> <span class="operator">=</span> (TestObjectDemo) o;</span><br><span class="line">            System.out.println(t);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、配置文件properties"><a href="#六、配置文件properties" class="headerlink" title="六、配置文件properties"></a>六、配置文件properties</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2022/06/17/5%E3%80%81%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/06/17/5%E3%80%81%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<img src="pics/网络编程.png" alt="网络编程" style="zoom:150%;" /><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p><code>接收端</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.SocketException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDP接收端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receive</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建套接字</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            创建接收数据报</span></span><br><span class="line"><span class="comment">            1. 封装接收数据的缓冲区</span></span><br><span class="line"><span class="comment">            2. 缓冲区大小</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buff, buff.length);</span><br><span class="line">        <span class="comment">//接收</span></span><br><span class="line">        ds.receive(dp);</span><br><span class="line">        <span class="comment">//从接收数据报中获取接收到的数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = dp.getData();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(data,<span class="number">0</span>,dp.getLength()));</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>发送端</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDP测试发送端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建UDP网络套接字</span></span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        <span class="comment">//发送的数据</span></span><br><span class="line">        <span class="type">byte</span>[] buf = <span class="string">&quot;Hello UDP...&quot;</span>.getBytes();</span><br><span class="line">        <span class="comment">//创建并封装数据报</span></span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">dp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(buf, <span class="number">0</span>, buf.length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>), <span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//发送,将数据报扔到网络上去</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2022/06/17/6%E3%80%81%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/06/17/6%E3%80%81%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><code>jconsole</code>终端输入，资源监视</p><h4 id="1、线程创建方式"><a href="#1、线程创建方式" class="headerlink" title="1、线程创建方式"></a>1、线程创建方式</h4><ol><li>继承Thread类，重写run方法</li><li>实现Runnable接口，重写run方法</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/14 - 10:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 继承</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line"><span class="comment">//        runnable</span></span><br><span class="line">        <span class="type">ThreadDemo1</span> <span class="variable">threadDemo1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo1</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(threadDemo1);<span class="comment">//runnable</span></span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadDemo</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;currentThread name&quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">                <span class="string">&quot;当前线程ID&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;currentThread name&quot;</span>+Thread.currentThread().getName()+</span><br><span class="line">                <span class="string">&quot;当前线程ID&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程名可以相同，但ID是不同的</li></ul><p>####2、线程相关概念</p><ul><li>进程<ol><li>进程是指运行中的程序，如常用的软件，启动了就是一个进程，操作系统会为该进程分配内存空间。</li><li>进程是程序的一次执行过程，或是正在运行的一个程序。是动态过程：有它自身的产生、存在和消亡的过程</li></ol></li></ul><h4 id="3、线程基本用法"><a href="#3、线程基本用法" class="headerlink" title="3、线程基本用法"></a>3、线程基本用法</h4><ul><li>用户线程和守护线程<ol><li>用户线程：也叫工作线程，当线程的任务执行完或通知方式结束</li><li>守护线程：一般是为工作线程服务的，当所有的用户线程结束，守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ol></li><li>当我们希望main线程结束时，子线程自动结束，只需要将子线程设置为守护线程</li><li><code>MyThread.setDaemon(true);</code>，先设置为守护线程，再<code>MyThread.start</code>启动</li><li><del>终止线程</del></li><li>线程休眠</li></ul><p>​<strong>使用 <code>Thread.sleep</code> 方法可以使得当前正在执行的线程进入休眠状态。</strong></p><p>​使用 <code>Thread.sleep</code> 需要向其传入一个整数值，这个值表示线程将要休眠的毫秒数。</p><p>​<code>Thread.sleep</code> 方法可能会抛出 <code>InterruptedException</code>，因为异常不能跨线程传播回 <code>main</code> 中，因此必须在本地进行处理。线程中抛出的其它异常也同样需要在本地进行处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSleepDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程A&quot;</span>, <span class="number">500</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程B&quot;</span>, <span class="number">1000</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程C&quot;</span>, <span class="number">1500</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 线程名称 */</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 休眠时间 */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> time;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">MyThread</span><span class="params">(String name, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.time = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 休眠指定的时间</span></span><br><span class="line">                Thread.sleep(<span class="built_in">this</span>.time);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;休眠&quot;</span> + <span class="built_in">this</span>.time + <span class="string">&quot;毫秒。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程礼让</li></ul><p><code>Thread.yield</code> 方法的调用声明了当前线程已经完成了生命周期中最重要的部分，可以切换给其它线程来执行 。</p><p>该方法只是对线程调度器的一个建议，而且也只是建议具有相同优先级的其它线程可以运行</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadYieldDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(t, <span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;运行，i = &quot;</span> + i);</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;线程礼让：&quot;</span>);</span><br><span class="line">                    Thread.yield();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>join</code>，等待这个线程死亡</li></ul><p>####4、线程的7大状态</p><ul><li>JDK中Thread.State枚举了6种状态<code>NEW,Runnable,Terminated,TimedWaiting,Waiting,Blocked</code>，<code>Runnable</code>，可细化为<code>Ready</code>,<code>Runnning</code>状态<ol><li>New<br> 尚未启动的线程处于此状态</li><li>Runnable<br> 在JVM中执行的线程处于此状态</li><li>Blocked<br> 被阻塞等待监视器锁定的线程处于此状态</li><li>Waiting<br> 正在等待另一个线程执行特定动作的线程处于此状态</li><li>TimedWaiting<br> 正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</li><li>Terminated<br> 已退出的线程处于此状态</li></ol></li></ul><h4 id="5、互斥锁synchronized"><a href="#5、互斥锁synchronized" class="headerlink" title="5、互斥锁synchronized"></a>5、互斥锁<code>synchronized</code></h4><p><strong>（重点）</strong>可以修饰代码块（同步代码块）、普通成员方法、</p><p>操作共享数据，保护共享数据安全</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day01.syn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/14 - 14:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day01.syn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket,<span class="string">&quot;win3&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        while (true)&#123;</span></span><br><span class="line"><span class="comment">//            if(tickets&gt;0)&#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;当前线程&quot;+Thread.currentThread().getName()+&quot;当前票数&quot;+tickets+ --tickets +&quot;剩余票数&quot;+tickets);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            &#125;else &#123;</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//互斥锁</span></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;当前票数&quot;</span> + tickets + --tickets + <span class="string">&quot;剩余票数&quot;</span> + tickets);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象锁：同一个对象调用同步代码块或同步方法，是同一个锁，不同对象则是不同的锁</p><p>类锁：实例对象调用为同一个锁，且仅有一个锁</p><h4 id="6、静态代理模式（了解）"><a href="#6、静态代理模式（了解）" class="headerlink" title="6、静态代理模式（了解）"></a>6、静态代理模式（了解）</h4><p>代理人（被代理）处理事务</p><p>Thread(new Runnable()).start</p><p>代理人、被代理都实现了处理事务接口</p><p>代理人构造将目标（被代理传入）</p><h4 id="7、消费者生产者"><a href="#7、消费者生产者" class="headerlink" title="7、消费者生产者"></a>7、消费者生产者</h4><p>线程协调（重点）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.syncontainer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/15 - 12:56</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.syncontainer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">    <span class="comment">//设置盒子容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    向盒子中添加对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            c++;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产产品&quot;</span>+c);</span><br><span class="line"></span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            c--;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费产品&quot;</span>+c);</span><br><span class="line"></span><br><span class="line">            notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.syncontainer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/15 - 13:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.syncontainer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    Box box;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(Box box)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.box = box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费开始---&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            box.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.syncontainer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/15 - 13:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.syncontainer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    Box box;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(Box box)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.box = box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产开始--&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            box.add();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.day02.syncontainer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/15 - 13:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.day02.syncontainer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Box</span> <span class="variable">box</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Box</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Productor</span> <span class="variable">productor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Productor</span>(box);</span><br><span class="line"></span><br><span class="line">        <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>(box);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(productor).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(customer).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8、交替打印"><a href="#8、交替打印" class="headerlink" title="8、交替打印"></a>8、交替打印</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">                    System.out.print(i);</span><br><span class="line">                    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                            object.notify();</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                object.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">  &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">word</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">27</span>; i++) &#123;</span><br><span class="line">                    System.out.print(word);</span><br><span class="line">                    word++;</span><br><span class="line">                    <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                        object.notify();</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            object.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2022/06/17/7%E3%80%81%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/06/17/7%E3%80%81%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="获取Class类对象方式"><a href="#获取Class类对象方式" class="headerlink" title="获取Class类对象方式"></a>获取Class类对象方式</h3><p><img src="/pics/java%E7%A8%8B%E5%BA%8F%E4%B8%89%E4%B8%AA%E9%98%B6%E6%AE%B5.png"></p><p>四种核心：</p><ol><li>代码&#x2F;编译阶段 <code>Class.forName()</code></li><li>类加载器得到Class对象</li><li>类加载阶段（Class类阶段）<code>类.class</code></li><li>运行阶段 <code>对象.getClass()</code></li></ol><hr><ol><li><p>前提：已知一个类的全类名，并且该类在类路径下，可通过<code>Class</code>类的静态方法<code>forName()</code>获取，可能抛出<code>ClassNotFoundException</code>；</p><p> 应用场景：多用于配置文件，读取类全路径，加载类；</p></li><li><p>前提：若已知具体类，通过类的class获取，该方式最为安全可靠，程序性能最高，如：<code>Class cls = Cat.class;</code></p><p> 应用场景：多用于参数传递，比如通过反射得到对应构造器对象；</p><ul><li><p>基本数据类型，得到Class类，方式<code>Class cls = 基本数据类型.class</code></p></li><li><p>基本数据类型对应包装类，通过<code>.TYPE</code>得到<code>Class</code>对象，方式<code>Class cls = 包装类.TYPE;</code></p></li></ul></li><li><p>前提：已知某个类的实例，调用该实例的<code>getClass()</code>方法获取<code>Class</code>对象，如：<code>Class cls = 对象.getClass();</code>&#x2F;&#x2F;运行类型；</p></li><li><p>其他方式(类加载器)</p><p> <code>ClassLoader cl = 对象.getClass().getClassLoader();</code><br> <code>Class clz = cl.loadClass(&quot;类的全类名&quot;);</code></p></li></ol><h3 id="拥有Class对象的类型"><a href="#拥有Class对象的类型" class="headerlink" title="拥有Class对象的类型"></a>拥有Class对象的类型</h3><ol><li>外部类，内部类</li><li>接口</li><li>数组</li><li>枚举</li><li>注解</li><li>基本数据类型</li><li>void</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;int.class==Integer.class&quot;</span> + <span class="string">&#x27;\n&#x27;</span> + (<span class="type">int</span>.class == Integer.class));<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">&quot;int.class==Integer.TYPE&quot;</span> + <span class="string">&#x27;\n&#x27;</span> + (<span class="type">int</span>.class == Integer.TYPE));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>反射机制是java实现动态语言的关键，也就是通过反射机制实现动态加载。</p><ol><li>静态加载：编译时加载相关的类，如果没有则报错，依赖性太强</li><li>动态加载：运行时加载需要的类，如果运行时不用该类，即使不存在该类，则不报错，降低依赖性</li></ol><h4 id="加载时机"><a href="#加载时机" class="headerlink" title="加载时机"></a>加载时机</h4><ol><li>当创建对象时（new）静态加载</li><li>当子类被加载时，父类也加载 静态加载</li><li>调用类中的静态成员时 静态加载</li><li>通过反射 动态加载</li></ol><h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="/pics/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B.png"></p><p>类加载三个阶段</p><ul><li>加载Loading</li></ul><p>JVM在该阶段的主要目的是将字节码从不同的数据源（可能是jar包、class文件，甚至网络）<strong>转化为二进制字节流加载</strong>到内存中，并生成一个代表该类的java.lang.Class对象</p><ul><li><p>连接阶段</p><ol><li><p>验证</p><ol><li>目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的安全</li><li>包括：文件格式验证是否以（魔数0xcafebabe），元数据验证，字节码验证和符号引用验证</li><li>可以考虑使用-Xverify:none 参数来关闭大部分类验证措施，缩短虚拟机类加载的时间</li></ol></li><li><p>准备</p><pre><code>  1. JVM会在该阶段对静态变量，分配内存并默认初始化（对应数据类型） 1. 实例属性，不是静态变量，不会分配内存 2. 静态变量，分配内存是默认初始化（系统） 3. 常量，与静态变量不同，直接根据赋值初始化，不在更改</code></pre></li><li><p>解析</p><p> ​1.虚拟机将常量池内的符号引用替换为直接引用的过程</p></li></ol></li><li><p>初始化</p><ol><li>到初始化阶段，才真正开始执行类中定义的Java程序代码，此阶段是执行<clinit>()方法的过程</li><li><clinit>()方法是由编译器按照语句在源文件中出现的顺序，依次自动收集类中所有静态变量的赋值动作和静态代码块中的语句，并进行合并</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确的加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，指导活动线程执行<clinit>()方法完毕</li></ol></li></ul><h2 id="通过反射获取类的结构信息"><a href="#通过反射获取类的结构信息" class="headerlink" title="通过反射获取类的结构信息"></a>通过反射获取类的结构信息</h2><ul><li>第一组 java.lang.Class类<ol><li><code>getName</code>获取全类名</li><li><code>getSimpleName</code>获取简单类名</li><li><code>getFields</code>获取所有<code>public</code>修饰的属性，包含本类以及父类的</li><li><code>getDeclaredFields</code>获取本类中所有属性</li><li><code>getMethods</code>获取所有<code>public</code>修饰的方法，包含本类以及父类的</li><li><code>getDeclaredMethods</code>获取本类中所有方法</li><li><code>getConstructors</code>获取本类所有<code>public</code>修饰的构造器</li><li><code>getDeclaredConstructors</code>获取本类中所有构造器</li><li><code>getPackage以Package</code>形式返回 包信息</li><li><code>getSuperClass以Class</code>形式返回父类信息</li><li><code>getInterfaces</code>以<code>Class[]</code>形式返回接口信息</li><li><code>getAnnotations</code> 以<code>Annotation[]</code>形式返回注解信息</li></ol></li><li>第二组 <ol><li><code>getModifiers</code>：以int形式返回修饰符，【说明：默认修饰符 是0，public 是1，private 是2，protected 是4，static 是8，final 是16】</li><li><code>getType</code>：以Class形式返回类型</li><li><code>getName</code>：返回属性名</li></ol></li></ul><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><ol><li>方式一：调用类中public修饰的无参构造器</li><li>方式二：调用类中的指定构造器</li><li>Class类相关方法<ul><li>newInstance：调用类中的无参构造器，获取对应类的对象</li><li>getConstructor(Class…clazz)：根据参数列表，获取对应的构造器对象</li><li>getDecalaredConstructor(Class…clazz)：根据参数列表，获取对应的构造器参数</li></ul></li><li>Constructor类相关方法<ul><li>setAccessible：爆破，传入true，可以访问私有构造</li><li>newInstance(Object…obj)：调用构造器</li></ul></li></ol><h2 id="通过反射访问类中的成员"><a href="#通过反射访问类中的成员" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><ol><li><p>根据属性名获取Field对象</p><p> Field f &#x3D; clazz对象.getDeclaredField(属性名)；</p></li><li><p>爆破：f.setAccessible(true)&#x2F;&#x2F;f 为 Field</p></li><li><p>访问</p><p> f.set(o, 值)；</p><p> f.get(o)；</p></li><li><p>如果是静态属性，则set和get中的参数o（newInstance创建的），可以写成null，是一个空对象</p></li></ol><h2 id="通过反射访问类中的成员-1"><a href="#通过反射访问类中的成员-1" class="headerlink" title="通过反射访问类中的成员"></a>通过反射访问类中的成员</h2><ol><li>根据方法名和参数列表获取Method方法对象：获得本类的所有方法见上文</li><li>获取对象：<code>Object o = clazz.newInstance()</code></li><li>暴破：<code>m.setAccessible(true)</code></li><li>访问：<code>Object returnValue = m.invoke(o, 实参列表)</code>，o就是对象</li><li>注意：如果是静态方法，则invoke的参数o，可以写成null</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老版 签名接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Boss</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 签字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 秘书类</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 秘书 ： 老板的代理对象</span></span><br><span class="line"><span class="comment"> * 只能代理当前Boss的子类对象</span></span><br><span class="line"><span class="comment"> * 静态代理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Secretary</span> <span class="keyword">implements</span> <span class="title class_">Boss</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Boss boss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Secretary</span><span class="params">(Boss boss)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秘书签字</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sign</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//代理老板签字</span></span><br><span class="line">        boss.sign();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>利用反射机制 动态创建对象</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.proxydemo.dynamicdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/18 - 17:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.proxydemo.dynamicdemo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyUtil</span> &#123;</span><br><span class="line">    <span class="comment">// 目标代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;<span class="comment">//使用Object类型存放</span></span><br><span class="line"><span class="comment">//构造方法 传入目标代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyUtil</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    代理生成</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatProxyObject</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        获取目标代理对象的Class实例</span></span><br><span class="line">        Class&lt;?&gt; clazz = target.getClass();</span><br><span class="line"><span class="comment">//        获取目标代理对象的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> clazz.getClassLoader();</span><br><span class="line"><span class="comment">//        获取当前目标代理对象的接口列表相关方法信息</span></span><br><span class="line">        Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Proxy.newProxyInstance</span></span><br><span class="line"><span class="comment">         *  newProxyInstance： JDK提供的生成代理对象的方法</span></span><br><span class="line"><span class="comment">         *      1. 第一个参数: 目标代理对象的类加载器</span></span><br><span class="line"><span class="comment">         *      2. 第二个参数: 目标代理对象的接口方法</span></span><br><span class="line"><span class="comment">         *      3. 第三个参数: 将代理对象的方法转到InvocationHandler处理器中处理</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line"><span class="comment">//            代理对象方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//                被代理对象方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">//        返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CGLib第三方代理"><a href="#CGLib第三方代理" class="headerlink" title="CGLib第三方代理"></a>CGLib第三方代理</h2><ul><li>需要下载第三方库<code>asm.jar</code>,<code>cglib.jar</code>，配置到当前项目下</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CGLib不属于JDK提供</span></span><br><span class="line"><span class="comment"> * 第三方的组织提供的开源的代理对象生成工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是用户....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCGLibDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Enhancer对象</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//2.指定被代理对象的Class</span></span><br><span class="line">        enhancer.setSuperclass(User.class);</span><br><span class="line">        <span class="comment">//3. 设置方法的拦截以及回调</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> <span class="title class_">MethodInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> proxy.invokeSuper(obj, args);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="type">User</span> <span class="variable">o</span> <span class="operator">=</span> (User) enhancer.create(); <span class="comment">//创建代理对象</span></span><br><span class="line">        o.getUserInfo();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）JDK动态代理只能对实现了接口的类生成代理，而不能针对类</span><br><span class="line">（2）CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</span><br><span class="line">因为是继承，所以该类或方法最好不要声明成final</span><br><span class="line"></span><br><span class="line">JDK动态代理只提供接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例, 生成目标类的代理对象。</span><br><span class="line">如果代理类没有实现 InvocationHandler 接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的。</span><br></pre></td></tr></table></figure><h2 id="AOP底层动态代理"><a href="#AOP底层动态代理" class="headerlink" title="AOP底层动态代理"></a>AOP底层动态代理</h2><p>1、没有接口实现</p><p><code>接口类UserDao.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.dynpox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/5/15 - 16:10</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.dynpox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="comment">//   1、创建接口</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>接口实现类UserDaoImpl.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.dynpox;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/5/15 - 16:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.dynpox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line"><span class="comment">//    创建接口实现类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>创建接口实现类的代理对象JDKProxy.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.dynpox;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/5/15 - 16:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.dynpox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDKProxy</span> &#123;</span><br><span class="line"><span class="comment">//    3、创建接口实现类的代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Class[] interfaces = &#123;UserDao.class&#125;;<span class="comment">//接口所有方法</span></span><br><span class="line"><span class="comment">//    代理对象 匿名内部类</span></span><br><span class="line"><span class="comment">//    Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfces, new InvocationHandler() &#123;</span></span><br><span class="line"><span class="comment">//        @Override</span></span><br><span class="line"><span class="comment">//        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></span><br><span class="line"><span class="comment">//            return null;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">UserDaoImpl</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();<span class="comment">//有参构造传入 接口实现类对象</span></span><br><span class="line"><span class="comment">//     new UserDaoProxy() 实现InvocationHandler</span></span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (UserDao)Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, <span class="keyword">new</span> <span class="title class_">UserDaoProxy</span>(userDao));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> proxyInstance.add(<span class="number">1</span> , <span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>不使用匿名内部类，创建UserDaoProxy类（）实现InvocationHandler接口</code></p><p><code>UserDaoProxy.java</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.dynpox;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: kepler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/5/15 - 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: com.my.dynpox</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *创建谁的代理对象，将谁传过来，使用Object类型保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserDaoProxy</span><span class="params">(Object obj)</span> &#123;<span class="comment">//构造传进来</span></span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//        增强逻辑：（ 如多个方法可进行方法名称判断，动态实现不同方法的增强逻辑）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//          方法之前</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之前。。。&quot;</span>+<span class="string">&quot;method = &quot;</span>+method.getName()+<span class="string">&quot;args =&quot;</span> + Arrays.toString(args));</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        原有接口方法 </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> method.invoke(obj, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;res = &quot;</span> + res);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//        方法之后</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法之后。。。&quot;</span>+<span class="string">&quot;method = &quot;</span>+method.getName()+<span class="string">&quot;args =&quot;</span> + Arrays.toString(args));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc-sql相关</title>
      <link href="/2022/06/17/8%E3%80%81%E5%85%B3%E4%BA%8ESQL--JDBC%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/06/17/8%E3%80%81%E5%85%B3%E4%BA%8ESQL--JDBC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1、数据库"><a href="#1、数据库" class="headerlink" title="1、数据库"></a>1、数据库</h2><ul><li>and 优先于 or</li><li>where-&gt;group by -&gt;having-&gt; order by -&gt;limit </li><li>join on 外联使用（left ,right）</li><li>NULL是一种状态，判断不能使用<code>=</code>判断，需要使用<code>IS NULL``IS NOT NULL</code><ol><li>在定义表时，若该列被定义为<code>not null</code>，列中存在没有数据的为<code>空</code>，而不是<code>NULL</code></li><li>插入值主键位置用<code>null</code></li></ol></li><li>带有外键的表称为从表，指向的为主表，要求指向主表的为主键（PRIMARY KEY）或者唯一（UNIQUE）</li><li>只有引擎为INNODB可以使用外键</li></ul><ul><li><p>单元测试<code>@Test</code>标记为一个main方法,<code>JUnit </code>需手动加入项目</p></li><li><p>连接池</p><ol><li><code>c3p0</code>+<code>c3p0-config.xml</code> ：</li><li><code>druid</code>+<code>druid-config.properties</code>：</li></ol></li><li><p>WHERE ： 逻辑上在分组之前，</p></li><li><p>HAVING ：逻辑上在分组之后</p></li><li><p>LIMIT 最后分页</p></li><li><p>alter table 从表 add foreign key(公共字段) references 主表(公共字段)</p></li><li><p>SELECT  COLUMN_NAME  FROM  information_schema.COLUMNS WHERE  table_name &#x3D; ‘book’  ;(查询某个表的列名)</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- sql注入</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user0 <span class="keyword">where</span> user_name <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> user_psw <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--   1&#x27; or     ||   or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> user0 </span><br><span class="line"><span class="keyword">where</span> user_name <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span><span class="string">&#x27;  and user_psw = &#x27;</span><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、JDBC"><a href="#2、JDBC" class="headerlink" title="2、JDBC"></a>2、JDBC</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>项目引入<code>mysql-connector-java-*.jar</code></p><ul><li>参数<ol><li>mysql驱动类<code>com.mysql.jdbc.Driver</code></li><li>url:<code>jdbc:mysql://IP:port/database?useSSL=false&amp;characterEncoding=utf-8&amp;rewriteBatchStatements=true</code></li><li>user:用户</li><li>password:密码</li></ol></li></ul><ol><li><p>驱动加载：<code>Class.forname(&quot;com.mysql.jdbc.Driver&quot;)</code></p></li><li><p>获取连接：<code>DriverManager.getConnection(url,user,password)</code></p></li><li><p>SQL语句：增删改，查（语句构建，字符串，双引号嵌套单引号，字符拼接 “+ +”）</p></li><li><p>Statement:</p><p> <code>createStatement()</code>存在SQL注入问题</p> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user0 <span class="keyword">where</span> user_name <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> user_psw <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--   1&#x27; or     ||   or &#x27;1&#x27; = &#x27;1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> user0 </span><br><span class="line"><span class="keyword">where</span> user_name <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">or</span><span class="string">&#x27;  and user_psw = &#x27;</span><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <code>preparedStatement(sql)</code>在构建SQL语句，可用<code>?</code>占位，执行前设定值，效率高，更安全，<code>preparedStatement</code>需要传参</p></li><li><p>执行：增删改使用<code>executeUpdate</code>，返回影响行数，查使用<code>executeQuery</code>，返回结果集（next()遍历），preparedStatement无需传参</p></li><li><p>资源关闭</p></li></ol><h3 id="JDBC工具类例子"><a href="#JDBC工具类例子" class="headerlink" title="JDBC工具类例子"></a>JDBC工具类例子</h3><p>完成MySQL的连接和关闭</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.jdbcutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">// 工具类 完成MySQL的连接和关闭</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtils</span> &#123;</span><br><span class="line"><span class="comment">// 属性初始化  只需要一份 static</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String user;<span class="comment">//用户名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driver;<span class="comment">//驱动名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在static代码块 中初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        </span><br><span class="line">Properties properties= <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//第二种读取配置文件方法，使用类加载器</span></span><br><span class="line"><span class="comment">//类加载器</span></span><br><span class="line"><span class="comment">//1.每个.class文件都有自己的类加载器</span></span><br><span class="line"><span class="comment">//2.eclipse的默认路径是src路径</span></span><br><span class="line"><span class="comment">//InputStream in = null;//1</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//ClassLoader classLoader = JDBCUtils.class.getClassLoader();//2</span></span><br><span class="line"><span class="comment">//in = classLoader.getResourceAsStream(&quot;mysql.properties&quot;);//3</span></span><br><span class="line"><span class="comment">//properties.load(in);//4</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">//properties 文件放在src下</span></span><br><span class="line">            <span class="comment">//使用properties读取</span></span><br><span class="line">properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line"><span class="comment">//读取相关的属性值</span></span><br><span class="line">user = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际开发中</span></span><br><span class="line"><span class="comment">//将编译异常转成运行异常</span></span><br><span class="line"><span class="comment">//调用者，可以选择捕获该异常，也可以默认处理该异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库连接，返回Connection</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//Class.forName(driver);</span></span><br><span class="line"><span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭相关资源</span></span><br><span class="line"><span class="comment">//1.ResultSet 结果集</span></span><br><span class="line"><span class="comment">//2.Statement或PreparedStatement</span></span><br><span class="line"><span class="comment">//3.Connection</span></span><br><span class="line"><span class="comment">//如果需要关闭资源就传入对象，否则传入null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet set ,Statement statement,Connection connection )</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为null</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(connection!=<span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(set!=<span class="literal">null</span>) &#123;</span><br><span class="line">set.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(statement!=<span class="literal">null</span>) &#123;</span><br><span class="line">statement.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、事务引入transaction"><a href="#3、事务引入transaction" class="headerlink" title="3、事务引入transaction"></a>3、事务引入transaction</h2><h3 id="数据库提交"><a href="#数据库提交" class="headerlink" title="数据库提交"></a>数据库提交</h3><p><code>connection</code>默认提交</p><h3 id="关闭自动提交"><a href="#关闭自动提交" class="headerlink" title="关闭自动提交"></a>关闭自动提交</h3><p><code>connection.setAutoCommit(false);//开启了事务，将自动提交关闭</code></p><h3 id="案例引入–转账"><a href="#案例引入–转账" class="headerlink" title="案例引入–转账"></a>案例引入–转账</h3><p>转账存在两个步骤：1、A  扣除 100；2、B 增加100，当语句1执行完，此时产生异常导致语句2未执行，则会导致严重问题，所以在产生异常，并处理时需要回到最初状态，使用事务回滚<code>connection.rollback();</code>需要关闭自动提交。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.my.jdbcutils.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransactionDemo</span> &#123;</span><br><span class="line"><span class="comment">// jdbc 中如何使用事务</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//事务</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Transaction</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作转账的业务</span></span><br><span class="line"><span class="comment">//得到连接--1</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//组织一个SQL</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance - 100 where id = 1&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance = balance + 100 where id = 2&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//扩大作用域，便于后面关闭资源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//调用写好的工具</span></span><br><span class="line">connection = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">//默认情况下，connection 是自动提交的，这设置为false</span></span><br><span class="line">connection.setAutoCommit(<span class="literal">false</span>);<span class="comment">//开启了事务，将自动提交关闭</span></span><br><span class="line"></span><br><span class="line">pre =  (PreparedStatement) connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">pre.executeUpdate();<span class="comment">//执行第一条SQL语句</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;<span class="comment">//异常抛出</span></span><br><span class="line">pre = (PreparedStatement) connection.prepareStatement(sql2);</span><br><span class="line"></span><br><span class="line">pre.executeUpdate();<span class="comment">//执行第二条</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">connection.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException  e) &#123;</span><br><span class="line"><span class="comment">// 进行回滚，在第一条执行后出现异常，在catch中处理</span></span><br><span class="line"><span class="comment">//回滚至事务开始的状态</span></span><br><span class="line">System.out.println(<span class="string">&quot;出现异常，撤销执行的sql&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.rollback();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException throwables)&#123;</span><br><span class="line">throwables.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//没有的传null</span></span><br><span class="line">JDBCUtils.close(<span class="literal">null</span>, pre, connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、批处理应用"><a href="#4、批处理应用" class="headerlink" title="4、批处理应用"></a>4、批处理应用</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建user表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">user_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT COMMENT <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">user_name <span class="type">VARCHAR</span> ( <span class="number">20</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">user_code <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户code&#x27;</span>,</span><br><span class="line">create_time datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;时间&#x27;</span> </span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB charset <span class="operator">=</span> utf8 COMMENT <span class="operator">=</span> <span class="string">&#x27;用户表&#x27;</span> </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.batch;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.my.jdbcutils.JDBCUtils;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传统方法执行多个sql语句</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">noBatch</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user (user_name,user_code)values (?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">System.out.println(<span class="string">&quot;经典-开始执行5000条语句&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">statement.setString(<span class="number">1</span>, <span class="string">&quot;Jinx&quot;</span>+i);</span><br><span class="line">statement.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">statement.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;共耗时：&quot;</span>+(end-start));<span class="comment">//10455</span></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">JDBCUtils.close(<span class="literal">null</span>,statement,connection);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> JDBCUtils.getConnection();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user (user_name,user_code)values (?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">System.out.println(<span class="string">&quot;batch-开始执行5000条语句&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">statement.setString(<span class="number">1</span>, <span class="string">&quot;Jinx&quot;</span>+i);</span><br><span class="line">statement.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">                     <span class="comment">//将sql 语句加入到批处理包中 -&gt; 看源码</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            //1. //第一就创建 ArrayList - elementData =&gt; Object[]</span></span><br><span class="line"><span class="comment">            //2. elementData =&gt; Object[] 就会存放我们预处理的sql语句</span></span><br><span class="line"><span class="comment">            //3. 当elementData满后,就按照1.5扩容</span></span><br><span class="line"><span class="comment">            //4. 当添加到指定的值后，就executeBatch</span></span><br><span class="line"><span class="comment">            //5. 批量处理会减少我们发送sql语句的网络开销，而且减少编译次数，因此效率提高</span></span><br><span class="line"><span class="comment">            public void addBatch() throws SQLException &#123;</span></span><br><span class="line"><span class="comment">                synchronized(this.checkClosed().getConnectionMutex()) &#123;</span></span><br><span class="line"><span class="comment">                    if (this.batchedArgs == null) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        this.batchedArgs = new ArrayList();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    for(int i = 0; i &lt; this.parameterValues.length; ++i) &#123;</span></span><br><span class="line"><span class="comment">                        this.checkAllParametersSet(this.parameterValues[i], this.parameterStreams[i], i);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                    this.batchedArgs.add(new PreparedStatement.BatchParams(this.parameterValues, this.parameterStreams, this.isStream, this.streamLengths, this.isNull));</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">statement.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%<span class="number">1000</span>==<span class="number">0</span>) &#123;</span><br><span class="line">statement.executeBatch();</span><br><span class="line"><span class="comment">//执行后清除，刷新新的语句</span></span><br><span class="line">statement.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line"><span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;batch共耗时：&quot;</span>+(end-start));<span class="comment">//</span></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">JDBCUtils.close(<span class="literal">null</span>,statement,connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="封装操作数据库的"><a href="#封装操作数据库的" class="headerlink" title="封装操作数据库的"></a>封装操作数据库的</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用数据库操作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection conn,String sql,Object ...args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询列表</span></span><br><span class="line"><span class="comment"> * 原生反射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getList</span><span class="params">(Connection connection,String sql,Class&lt;T&gt; clazz,Object ...args)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException &#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//获取PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行查询</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"><span class="comment">//获取数据库表的元数据信息</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="comment">//获取数据库表的列总数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">t=clazz.newInstance();</span><br><span class="line"><span class="comment">//循环获取列名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;columnCount;i++) &#123;</span><br><span class="line"><span class="comment">//通过列的下标获取列名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//通过列标签获取列值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(columnLabel);</span><br><span class="line"><span class="comment">//反射通过名称获取java对象中描述属性的对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);<span class="comment">//dept_id as deptId </span></span><br><span class="line"><span class="comment">//取消私有权限</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//给属性对象赋值</span></span><br><span class="line">field.set(t, columnValue);</span><br><span class="line">&#125;</span><br><span class="line">list.add(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用查询(单个)</span></span><br><span class="line"><span class="comment"> * 原生反射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getT</span><span class="params">(Connection connection,String sql,Class&lt;T&gt; clazz,Object ...args)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//获取PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">                <span class="comment">//sql多参数赋值</span></span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"><span class="comment">//获取数据库表的元数据信息</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="comment">//获取数据库表的列总数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">t=clazz.newInstance();</span><br><span class="line"><span class="comment">//循环获取列名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;columnCount;i++) &#123;</span><br><span class="line"><span class="comment">//通过列的下标获取列名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//通过列标签获取列值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(columnLabel);</span><br><span class="line"><span class="comment">//反射通过名称获取java对象中描述属性的对象</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(columnLabel);<span class="comment">//dept_id as deptId </span></span><br><span class="line"><span class="comment">//取消私有权限</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//给属性对象赋值</span></span><br><span class="line">field.set(t, columnValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用查询(单个)</span></span><br><span class="line"><span class="comment"> * 使用下面工具进行反射赋值</span></span><br><span class="line"><span class="comment"> * commons-beanutils-1.8.0.jar</span></span><br><span class="line"><span class="comment"> * commons-logging-1.1.1.jar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getT_</span><span class="params">(Connection connection,String sql,Class&lt;T&gt; clazz,Object ...args)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException, InvocationTargetException, NoSuchMethodException &#123;</span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//获取PreparedStatement</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span> &amp;&amp; args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"><span class="comment">//获取数据库表的元数据信息</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">rsmd</span> <span class="operator">=</span> rs.getMetaData();</span><br><span class="line"><span class="comment">//获取数据库表的列总数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line">t=clazz.newInstance();</span><br><span class="line"><span class="comment">//循环获取列名</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;columnCount;i++) &#123;</span><br><span class="line"><span class="comment">//通过列的下标获取列名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnLabel</span> <span class="operator">=</span> rsmd.getColumnLabel(i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//通过列标签获取列值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">columnValue</span> <span class="operator">=</span> rs.getObject(columnLabel);</span><br><span class="line"><span class="comment">//反射通过名称获取java对象中描述属性的对象</span></span><br><span class="line"><span class="comment">//Field field = clazz.getDeclaredField(columnLabel);//dept_id as deptId </span></span><br><span class="line"><span class="comment">//取消私有权限</span></span><br><span class="line"><span class="comment">//field.setAccessible(true);</span></span><br><span class="line"><span class="comment">//给属性对象赋值</span></span><br><span class="line"><span class="comment">//field.set(t, columnValue);</span></span><br><span class="line">PropertyUtils.setProperty(t, columnLabel, columnValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、beanutils封装通用jdbc工具类"><a href="#5、beanutils封装通用jdbc工具类" class="headerlink" title="5、beanutils封装通用jdbc工具类"></a>5、beanutils封装通用jdbc工具类</h2><p><code>beabutils.jar</code>+依赖<code>logging.jar</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.jdbcutils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import java.lang.reflect.Field;</span></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">//DAO层</span></span><br><span class="line">    <span class="comment">// crud 数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//增删改数据库  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">base</span><span class="params">(Connection connection,String sql,Object ...objects)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">statement = connection.prepareStatement(sql);</span><br><span class="line"><span class="keyword">if</span>(objects!=<span class="literal">null</span>&amp;&amp;objects.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//多参赋值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt; objects.length;i++) &#123;</span><br><span class="line">statement.setObject(i+<span class="number">1</span>, objects[i]);<span class="comment">//列索引从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">executeUpdate</span> <span class="operator">=</span> statement.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.close(<span class="literal">null</span>, statement, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通用查 询数据库</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getList</span><span class="params">(Connection connection,String sql,Class&lt;T&gt; clazz,Object...args)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException, NoSuchFieldException, SecurityException, InvocationTargetException, NoSuchMethodException&#123;</span><br><span class="line"></span><br><span class="line">List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//预编译执行</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="comment">//sql 多参赋值 </span></span><br><span class="line"><span class="keyword">if</span>(args!=<span class="literal">null</span>&amp;&amp;args.length&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;args.length;i++) &#123;</span><br><span class="line">ps.setObject(i+<span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sql查询语句执行</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line"><span class="comment">//获取数据元 列信息等</span></span><br><span class="line"><span class="type">ResultSetMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> resultSet.getMetaData();</span><br><span class="line"><span class="comment">//获取列数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">columnCount</span> <span class="operator">=</span> metaData.getColumnCount();</span><br><span class="line"><span class="comment">//通过列序号获取</span></span><br><span class="line"><span class="comment">//结果集映射</span></span><br><span class="line"><span class="keyword">while</span>(resultSet.next()) &#123;</span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;columnCount;i++) &#123;</span><br><span class="line"><span class="comment">//获取指定索引 的列名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">columnLable</span> <span class="operator">=</span> metaData.getColumnLabel(i+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//获取对应列值</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> resultSet.getObject(columnLable);<span class="comment">//sql 语句查询列名（不用*）， </span></span><br><span class="line"><span class="comment">//列名 as newLanleName(与 T类中的属性 映射)，获取对应值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////通过反射获取T类中的属性</span></span><br><span class="line"><span class="comment">//Field field = clazz.getDeclaredField(columnLable);</span></span><br><span class="line"><span class="comment">////暴破 ，</span></span><br><span class="line"><span class="comment">//field.setAccessible(true);</span></span><br><span class="line"><span class="comment">////当前对象赋值</span></span><br><span class="line"><span class="comment">//field.set(t,value);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入beanutils包依赖logging包，替代上述反射赋值操作</span></span><br><span class="line"></span><br><span class="line">PropertyUtils.setProperty(t, columnLable, value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.add(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、连接池"><a href="#6、连接池" class="headerlink" title="6、连接池"></a>6、连接池</h2><p>避免重复连接创建，关闭，通过连接池，每次用完断开，放回连接池</p><p><code>c3p0</code>，<code>druid</code>，jar包</p><h3 id="c3p0"><a href="#c3p0" class="headerlink" title="c3p0"></a>c3p0</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.c3p0demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3p0Demo</span> &#123;</span><br><span class="line"><span class="keyword">static</span> String user=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> Stringpassword=<span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> Stringurl=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/jdbc?useSSL=false&amp;characterEncoding=UTF-8&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> Stringdriver=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> PropertyVetoException, SQLException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setUser(user);</span><br><span class="line">dataSource.setPassword(password);</span><br><span class="line">dataSource.setJdbcUrl(url);</span><br><span class="line">dataSource.setDriverClass(driver);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="德鲁伊Druid"><a href="#德鲁伊Druid" class="headerlink" title="德鲁伊Druid"></a>德鲁伊<code>Druid</code></h3><p><code>Druid.properties</code><strong>配置文件关键字（key）必须一致</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/jdbc?useSSL=false&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><code>Druid</code>连接池创建</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.druiddemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDemo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">//创建DruidDateSource连接池对象</span></span><br><span class="line"><span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///jdbc?useSSL=false&amp;characterEncoding=UTF-8&quot;</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">System.out.println(connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二 工厂模式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> DruidDemo.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">p.load(in);</span><br><span class="line"><span class="comment">//德鲁伊工厂 创建数据源</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">createDataSource</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(p);</span><br><span class="line">System.out.println(createDataSource);</span><br><span class="line"><span class="comment">//从数据源获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> createDataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、DBUtils"><a href="#7、DBUtils" class="headerlink" title="7、DBUtils"></a>7、DBUtils</h2><p>微型框架</p><p>处理集</p><p><img src="/pics/dbutils.png"></p><p>API使用：</p><p><code>QueryRunner</code>类对象用于crud操作</p><ul><li>创建获取执行对象</li></ul><p><code>QueryRunner run = new QueryRunner(dataSource);</code></p><ol><li><p>增删改</p><p> <code>run.update(connection, sql, args);</code></p></li><li><p>查询 </p><ol><li><p>单行查询</p><p> 创建<code>BeanHandler&lt;&gt;(javabean.class)</code>对象，返回结果集处理类</p><p> 查询 <code> run.query(connection, sql, beanHandler, args);//args 可变参数，sql占位符值</code></p></li><li><p>多行查询</p><p> 创建<code>BeanListHandler&lt;&gt;(javabean.class)</code>对象，返回结果集处理类(泛型List集合)</p></li></ol></li></ol><p>​<code>ResultSetHandler&lt;List&lt;T&gt;&gt; listHandler = new BeanListHandler&lt;&gt;(c);</code><br>​<code>return run.query(connection, sql, listHandler, args);</code></p><h4 id="通用DAO（DB工具类）："><a href="#通用DAO（DB工具类）：" class="headerlink" title="通用DAO（DB工具类）："></a>通用DAO（DB工具类）：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.dbutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.ResultSetHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DBUtils API使用 小型框架</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbbaseDao</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="comment">// dbutils 中执行crud操作的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">QueryRunner</span> <span class="variable">run</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QueryRunner</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Connection connection, String sql, Object... args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">run.update(connection, sql, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查单行 beanhandle</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getScal</span><span class="params">(Connection connection, String sql, Class&lt;T&gt; c, Object... args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">ResultSetHandler&lt;T&gt; beanHandler = <span class="keyword">new</span> <span class="title class_">BeanHandler</span>&lt;&gt;(c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> run.query(connection, sql, beanHandler, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查多行</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getList</span><span class="params">(Connection connection, String sql, Class&lt;T&gt; c, Object... args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">ResultSetHandler&lt;List&lt;T&gt;&gt; listHandler = <span class="keyword">new</span> <span class="title class_">BeanListHandler</span>&lt;&gt;(c);</span><br><span class="line"><span class="keyword">return</span> run.query(connection, sql, listHandler, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、线程ThreadLocal"><a href="#8、线程ThreadLocal" class="headerlink" title="8、线程ThreadLocal"></a>8、线程ThreadLocal</h2><p>线程安全问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多线程安全问题产生的原因</span><br><span class="line">1. 一个业务请求中执行的多条sql不能保证在同一个连接或者同一个事务管理中</span><br><span class="line">2. 多用户操作时，可能发生当前业务中的一条sql语句已经出错，进行了回滚,而另一条sql语句却被别的连接提交.</span><br><span class="line"></span><br><span class="line">解决方案: 主要是怎么保证一个线程内的所有被执行的SQL语句都是用的是同一个数据库连接(Connection),是解决问题的关键。</span><br></pre></td></tr></table></figure><ul><li>解决方案</li><li>ThreadLocal简介</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 通过JDK的API文档了解ThreadLocal这个类</span><br><span class="line">2. 通过文档可以得出此对象可以保存线程中产生的局部变量</span><br><span class="line">3. 并且可以将这些局部变量与响应的线程相关联</span><br><span class="line">4. 在线程消失之后，其线程局部实例的所有副本都会被垃圾回收</span><br></pre></td></tr></table></figure><ul><li>ThreadLocal的API</li></ul><table><thead><tr><th>返回值类型</th><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>T</td><td>get()</td><td>返回此线程局部变量的当前线程副本中的值</td></tr><tr><td>void</td><td>remove()</td><td>移除此线程局部变量当前线程的值</td></tr><tr><td>void</td><td>set(T value)</td><td>将此线程局部变量的当前线程副本中的值设置为指定值</td></tr></tbody></table><ul><li>实例代码</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtil</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; pool = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前请求线程上的Connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> pool.get();</span><br><span class="line"><span class="keyword">if</span>(conn==<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//创建连接</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(<span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="comment">//放至pool中</span></span><br><span class="line">pool.set(conn);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//返回一个连接</span></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭当前请求线程上的Connection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> pool.get();</span><br><span class="line">    conn.close();<span class="comment">//关闭连接</span></span><br><span class="line">    pool.remove();<span class="comment">//要将关闭之后的连接移除</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通用版JdbcUtils工具类"><a href="#通用版JdbcUtils工具类" class="headerlink" title="通用版JdbcUtils工具类"></a>通用版<code>JdbcUtils</code>工具类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.dbutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtilsFinal</span> &#123;</span><br><span class="line"><span class="comment">// 装线程产生的局部变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; pool = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> JdbcUtilsFinal.class.getClassLoader().getResourceAsStream(<span class="string">&quot;mysql.preperties&quot;</span>);</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">properties.load(inputStream);</span><br><span class="line">url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">username = properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line"><span class="comment">// 驱动加载</span></span><br><span class="line">Class.forName(driver);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库连接获取</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="comment">// 从ThreadLocal中获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">c</span> <span class="operator">=</span> pool.get();</span><br><span class="line"><span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">c = DriverManager.getConnection(url, username, password);</span><br><span class="line">pool.set(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> pool.get();</span><br><span class="line"><span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">pool.remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 sql jdbc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性</title>
      <link href="/2022/06/17/9%E3%80%81Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/06/17/9%E3%80%81Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1、时间类"><a href="#1、时间类" class="headerlink" title="1、时间类"></a>1、时间类</h2><p>java.time类，包含日期Date，时间Time</p><h2 id="2、Lambda表达式"><a href="#2、Lambda表达式" class="headerlink" title="2、Lambda表达式"></a>2、Lambda表达式</h2><ul><li>函数式接口，接口只能含有一个抽象方法，可使用注解<code>@FunctionalInterface</code>，限制该接口只能含有一个抽象方法，否则报错</li><li>Java1.8之后，接口中可以含有默认方法，但需要显示声明(default)，因为接口中的省缺为(<code>public</code>,<code> abstract</code>)，方法修饰符default,abstract,static只能存在一个</li></ul><h3 id="1、默认方法-x2F-静态方法"><a href="#1、默认方法-x2F-静态方法" class="headerlink" title="1、默认方法&#x2F;静态方法"></a>1、默认方法&#x2F;静态方法</h3><ul><li><p>调用函数式接口中的默认方法</p></li><li><p>调用函数式接口中的静态方法</p></li></ul><h3 id="2、方法引用"><a href="#2、方法引用" class="headerlink" title="2、方法引用"></a>2、方法引用</h3><p>引用其他类中的方法</p><ul><li>静态方法引用</li><li>实例方法引用</li><li>类实例方法引用</li><li>构造方法引用</li></ul><h2 id="3、Stream"><a href="#3、Stream" class="headerlink" title="3、Stream"></a>3、Stream</h2>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL+JSTL</title>
      <link href="/2022/06/17/EL+JSTL/"/>
      <url>/2022/06/17/EL+JSTL/</url>
      
        <content type="html"><![CDATA[<h2 id="EL-JSTL"><a href="#EL-JSTL" class="headerlink" title="EL+JSTL"></a>EL+JSTL</h2><h4 id="1、编码响应"><a href="#1、编码响应" class="headerlink" title="1、编码响应"></a>1、编码响应</h4><p>由于服务器在通过response获取的流发送数据时，默认使用iso8859-1编码，而这个编码中没有中文字符，所以在通过response获取的流发送中文数据时，会出现乱码问题。</p><p>解决方法是：在响应数据之前，通知服务器使用utf-8发送数据。</p><h4 id="2、EL-JSTL判断是否相等"><a href="#2、EL-JSTL判断是否相等" class="headerlink" title="2、EL + JSTL判断是否相等"></a>2、EL + JSTL判断是否相等</h4><p>错：</p><p><code>&lt;option value=&quot;0&quot; &lt;c:if test=&quot; $&#123;mBankAcctMap.settlemode == 0&#125; &quot;  &gt;  selected=&quot;selected&quot; &lt;/c:if&gt;&gt;不结算&lt;/option&gt;</code></p><p>对：</p><p><code>&lt;option value=&quot;0&quot; &lt;c:if test=&#39; $&#123;mBankAcctMap.settlemode == &quot;0&quot;  &#125; &#39;  &gt;   selected=&quot;selected&quot; &lt;/c:if&gt;&gt;不结算&lt;/option&gt;</code></p><p>比较时需使用<strong>单引号</strong></p><h4 id="3、JSTL遍历数组"><a href="#3、JSTL遍历数组" class="headerlink" title="3、JSTL遍历数组"></a>3、JSTL遍历数组</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;utf-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;com.wgh.User&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getContextPath();</span><br><span class="line"><span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;title&gt;JSTL遍历数组&lt;/title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;pragma&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;no-cache&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;expires&quot;</span> content=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;keywords&quot;</span> content=<span class="string">&quot;keyword1,keyword2,keyword3&quot;</span>&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;description&quot;</span> content=<span class="string">&quot;This is my page&quot;</span>&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;styles.css&quot;</span>&gt;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   <span class="type">int</span>[] ages=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">// 普通数组，JSTL直接使用JSP赋值表达式来取  </span></span><br><span class="line"> </span><br><span class="line">  List&lt;String&gt; names=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;(); <span class="comment">// List </span></span><br><span class="line">   names.add(<span class="string">&quot;One&quot;</span>); </span><br><span class="line">      names.add(<span class="string">&quot;Two&quot;</span>);   </span><br><span class="line">   names.add(<span class="string">&quot;Three&quot;</span>); </span><br><span class="line">    request.setAttribute(<span class="string">&quot;names&quot;</span>, names); <span class="comment">// 添加到request  </span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;String&gt;();<span class="comment">// Set  </span></span><br><span class="line">    set.add(<span class="string">&quot;One&quot;</span>);  </span><br><span class="line">    set.add(<span class="string">&quot;One&quot;</span>);  </span><br><span class="line">    set.add(<span class="string">&quot;Two&quot;</span>);  </span><br><span class="line">    set.add(<span class="string">&quot;Three&quot;</span>);  </span><br><span class="line">    set.add(<span class="string">&quot;Set&quot;</span>);  </span><br><span class="line">      </span><br><span class="line">     Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;();<span class="comment">// Map </span></span><br><span class="line">     map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;map&quot;</span>);</span><br><span class="line">     map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;map1&quot;</span>);</span><br><span class="line">     map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;map2&quot;</span>);</span><br><span class="line">     map.put(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;map3&quot;</span>);</span><br><span class="line">               </span><br><span class="line">       List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();   <span class="comment">// JavaBean的List </span></span><br><span class="line">       users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;vvvvv&quot;</span>)); </span><br><span class="line">       users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;zzzzz&quot;</span>)); </span><br><span class="line">       users.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;fffff&quot;</span>)); </span><br><span class="line">       session.setAttribute(<span class="string">&quot;users&quot;</span>, users); <span class="comment">// 添加到session  </span></span><br><span class="line">                              </span><br><span class="line">    %&gt;</span><br><span class="line">数组遍历</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;age&quot;</span> items=<span class="string">&quot;&lt;%=ages%&gt;&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;age&#125;&quot;</span> /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">遍历List:</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> items=<span class="string">&quot;&lt;%= names %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;name&#125;&quot;</span> /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">遍历List:</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;name&quot;</span> items=<span class="string">&quot;$&#123;names&#125;&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;name&#125;&quot;</span> /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;br&gt; </span><br><span class="line"></span><br><span class="line">遍历Set:</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;entry&quot;</span> items=<span class="string">&quot;&lt;%= set %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;entry&#125;&quot;</span> /&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">遍历Map:</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;entry&quot;</span> items=<span class="string">&quot;&lt;%= map %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;entry.key&#125;&quot;</span>/&gt; </span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;entry.value&#125;&quot;</span>/&gt; </span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">遍历UserBean的List:</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> items=<span class="string">&quot;&lt;%=users %&gt;&quot;</span>&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;user.username&#125; &quot;</span>/&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;user.password&#125; &quot;</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jsp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jsp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codewars</title>
      <link href="/2022/06/17/codewars/"/>
      <url>/2022/06/17/codewars/</url>
      
        <content type="html"><![CDATA[<p>二进制加法</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span> y;</span><br><span class="line">      <span class="keyword">if</span>(y==<span class="number">0</span>)<span class="keyword">return</span> x;</span><br><span class="line">      <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> x^y;</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> (x&amp;y)&lt;&lt;<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> add(a,b); <span class="comment">// Do your magic!</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis入门</title>
      <link href="/2022/06/17/mybatis%E5%85%A5%E9%97%A8/"/>
      <url>/2022/06/17/mybatis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>mybatis操作数据库步骤：</p><ol><li>加载mybatis核心配置文件（配置数据库驱动等的.xml）</li><li>创建SqlSessionFactory</li><li>创建sqlSession对象（可修改事务）</li><li>操作数据库<ol><li>方式1：传统mybatis API调用（如.insert()）</li><li>方式2：使用接口操作数据库<ol><li>接口实例化（生成操作数据库接口的代理对象）（.getMapper(DemoMapper.class)）</li><li>调用接口中的方法</li></ol></li></ol></li><li>提交事务</li><li>关连接</li></ol><hr><p>单个参数：类型匹配</p><p>模糊查询方式：拼接<code>% %</code></p><ol><li>传统入参拼接</li><li>CONCAT();数据库函数拼接，<code>CONCAT(&#39;%&#39;,#&#123;username&#125;,&#39;%&#39;)</code></li><li>OGNL；<code>@Param</code>定义传递参数变量，<code>&lt;bind&gt;</code>标签设置变量</li><li>SQL语句使用#{}，<code>&quot;%&quot;#&#123;username&#125;&quot;%&quot;</code>，常用</li><li>SQL语句使用${}，<code>&#39;%$&#123;username&#125;%&#39;</code></li></ol><p><code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  引入配置文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 字段驼峰命名开启--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 结果集类型设置别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.example.entity.Student&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;student&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理类型：JDBC|MANAGED</span></span><br><span class="line"><span class="comment">                JDBC:使用原生事务管理，手动提交</span></span><br><span class="line"><span class="comment">                MANAGED:被管理，如spring</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        dataSource:配置数据源</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            type：设置数据源的类型</span></span><br><span class="line"><span class="comment">            type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">            POOLED:表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">            UNPOOLED:表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">            JNDI:表示使用上下文的数据源</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        映射配置文件引入</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;StudentMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.example.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">枚举类型处理：</span></span><br><span class="line"><span class="comment"> gender1=#&#123;gender1,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;,</span></span><br><span class="line"><span class="comment"> gender2=#&#123;gender2,typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;org.example.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO `student`(stu_name,gender1,gender2)</span><br><span class="line">        VALUES (#&#123;stuName&#125;,</span><br><span class="line">                #&#123;gender1,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;,</span><br><span class="line">                #&#123;gender2,typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        UPDATE `student` SET stu_name=#&#123;stuName&#125;,</span><br><span class="line">                             gender1=#&#123;gender1,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;,</span><br><span class="line">                             gender2=#&#123;gender2,typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;</span><br><span class="line">                            WHERE stu_id=#&#123;stuId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span> &gt;</span></span><br><span class="line">        DELETE FROM student WHERE  stu_id=#&#123;stuId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;stu_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;stu_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender1&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender1&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.example.entity.Gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;gender2&quot;</span> <span class="attr">property</span>=<span class="string">&quot;gender2&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;org.example.entity.Gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">        SELECT stu_id,stu_name,gender1,gender2</span><br><span class="line">        FROM `student`</span><br><span class="line">        WHERE stu_id=#&#123;stuId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">        SELECT stu_id,stu_name,gender1,gender2</span><br><span class="line">        FROM `student`</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">获取参数值：#&#123;&#125; 与 $&#123;&#125; 都可使用</span><br><span class="line">#&#123;&#125;优先使用</span><br><span class="line">#&#123;&#125;底层占位</span><br><span class="line">$&#123;&#125;字符串拼接（使用时需注意使用单引号）</span><br><span class="line"></span><br><span class="line">1、mapper接口方法中当为单个参数时，根据类型匹配，可以根据任意名称获取参数值;</span><br><span class="line">2、mapper接口方法中为多个参数时，访问底层提供的以#&#123;arg0&#125;|#&#123;arg1&#125;为键（参数为值的方式存储）,或以键#&#123;param1&#125;|#&#123;param2&#125;（参数为值的方式存储）,通过键获取参数，可混合使用;</span><br><span class="line">3、mapper接口方法中为map集合(自定义),通过集合的键获取参数;</span><br><span class="line">4、mapper接口方法为实体类，通过属性名访问</span><br><span class="line">5、@Param注解（参数）（默认使用value=），通过自定义命名（value）获取参数，通过#&#123;param1&#125;|#&#123;param2&#125;获取 </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">查询功能：</span><br><span class="line">1、查询的数据只有一条，可以通过实体类对象接收</span><br><span class="line">2、若查询的数据有多条，可以通过list接收,一定不能通过实体类对象接收，此时会抛异常（太多结果异常）</span><br><span class="line">3、@MapKey注解（方法）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传下载</title>
      <link href="/2022/06/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/06/17/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h3 id="1、jsp"><a href="#1、jsp" class="headerlink" title="1、jsp"></a>1、jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html &gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;文件上传和下载&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;FileUploadServlet&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span> &gt;&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath &#125;/FileDownloadServlet&quot;</span>&gt;文件下载&lt;/a&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class FileUploadServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment"> *      response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(factory);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取所有的表单项(普通表单项/文件表单项)</span></span><br><span class="line">List&lt;FileItem&gt; list = servletFileUpload.parseRequest(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line"><span class="keyword">if</span> (fileItem.isFormField()) &#123;<span class="comment">// 普通表单</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 文件上传表单</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> fileItem.getName();</span><br><span class="line">System.out.println(<span class="string">&quot;文件名&quot;</span> + fileName);</span><br><span class="line"><span class="comment">// 获取文件后缀</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndexOf</span> <span class="operator">=</span> fileName.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> fileName.substring(lastIndexOf, fileName.length());</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;文件后缀：&quot;</span> + substring);</span><br><span class="line"><span class="comment">// sava file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UUID创建文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">randomUUID</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">System.out.println(<span class="string">&quot;uuid=&quot;</span> + randomUUID);</span><br><span class="line"><span class="comment">// 构建唯一文件名</span></span><br><span class="line">fileName = randomUUID + substring;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取真实路径 传参创建新的目录</span></span><br><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/pics&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;真实路径&quot;</span> + realPath);</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line"><span class="comment">// 创建路径</span></span><br><span class="line">file.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路径+文件名</span></span><br><span class="line">fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(file + <span class="string">&quot;/&quot;</span> + fileName));</span><br><span class="line"><span class="comment">// 清空缓存</span></span><br><span class="line">fileItem.delete();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileUploadException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">response.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.my.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class FileDownloadServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDownloadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"><span class="comment">// 获取文件真实路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> getServletContext().getRealPath(<span class="string">&quot;/pics/6e59b102-c0cb-4695-abaa-1dc9638e001d.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(realPath);</span><br><span class="line"><span class="comment">// 获取文件类型</span></span><br><span class="line"><span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> getServletContext().getMimeType(realPath);</span><br><span class="line">System.out.println(mimeType);</span><br><span class="line"><span class="comment">// 设置响应内容格式</span></span><br><span class="line">response.setContentType(mimeType);</span><br><span class="line"><span class="comment">// inline 页面内打开 attachment 指定文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">disposition</span> <span class="operator">=</span> <span class="string">&quot;attachment;fileName=666.txt&quot;</span>;</span><br><span class="line"><span class="comment">// 响应头</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-disposition&quot;</span>, disposition);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流操作</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line"></span><br><span class="line"><span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((len = in.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">out.write(buff, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、spring"><a href="#2、spring" class="headerlink" title="2、spring"></a>2、spring</h3><h4 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping(value = &quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">upLoad</span><span class="params">(MultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        System.out.println(<span class="string">&quot;filename = &quot;</span> + filename);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取真实路径,上传地址（上传本机文件所在地址）</span></span><br><span class="line"><span class="comment">//filename = Squirrel-UpdateSelf.log</span></span><br><span class="line"><span class="comment">//realPath = C:\Users\Shinelon\AppData\Local\Temp\tomcat-docbase.80.5338241171699533314\tmp</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/tmp&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;realPath = &quot;</span> + realPath);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        <span class="keyword">if</span> (!file1.exists())&#123;</span><br><span class="line">            file1.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(file1+<span class="string">&quot;/&quot;</span>+filename));</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;ok&quot;</span>,<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;地址&quot;</span>,<span class="string">&quot;http://127.0.0.1:80/tmp/&quot;</span>+filename);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="文件下载-1"><a href="#文件下载-1" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    文件下载1</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/downLoadFile1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downLoadFile1() <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        下载文件地址</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\git_demo\\proj_demo\\pics\\spring截图\\单例依赖注入.png&quot;</span>);</span><br><span class="line"><span class="comment">//        文件下载的内容</span></span><br><span class="line">        <span class="type">byte</span>[] body = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line"><span class="comment">//        将数据读入到body中</span></span><br><span class="line">        in.read(body);</span><br><span class="line"><span class="comment">//        HttpHeaders</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"><span class="comment">//      添加headerName及value</span></span><br><span class="line">        headers.add(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=abc.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; response = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body,headers, HttpStatus.OK);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">     <span class="comment">// 文件下载2</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/downLoadFile2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downLoadFile2</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//要下载的文件</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;F:\\git_demo\\proj_demo\\pics\\spring截图\\单例依赖注入.png&quot;</span>);</span><br><span class="line">        <span class="comment">//设置相应头</span></span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=def.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((len=in.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            response.getOutputStream().write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关流</span></span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文件上传下载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java jsp spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2022/06/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/06/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><ul><li>饿汉式</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleDome01</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    单例模式</span></span><br><span class="line"><span class="comment">    单例（单个实例）</span></span><br><span class="line"><span class="comment">    1、所谓类的单例设计模式，就是采取一定的方法保证整个体系中，</span></span><br><span class="line"><span class="comment">    对某个类只能存在一个对象实例，并且该类只提供一个取得对象实例的方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    2、单例两种方式：</span></span><br><span class="line"><span class="comment">        1）饿汉式</span></span><br><span class="line"><span class="comment">        可能造成创建了对象但是没有使用（静态调用其他成员，类被加载）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        实现：</span></span><br><span class="line"><span class="comment">            1.构造器私有化</span></span><br><span class="line"><span class="comment">            2.类的内部创建对象</span></span><br><span class="line"><span class="comment">            3.向外暴露一个静态的公共方法（用于获取该实例）</span></span><br><span class="line"><span class="comment">        2）懒汉式</span></span><br><span class="line"><span class="comment">        实现：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleDome01</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleDome01</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 直接在内部创建一个实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleDome01</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleDome01</span>(<span class="string">&quot;f&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleDome01 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.equals(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SingleDome01</span> <span class="variable">instance</span> <span class="operator">=</span> SingleDome01.getInstance();</span><br><span class="line">        <span class="type">SingleDome01</span> <span class="variable">instance2</span> <span class="operator">=</span> SingleDome01.getInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(instance);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>懒汉式</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleDemo02</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    2、懒汉式  （线程安全问题）</span></span><br><span class="line"><span class="comment">    实现：</span></span><br><span class="line"><span class="comment">        1.构造器私有化</span></span><br><span class="line"><span class="comment">        2.定义一个static静态属性对象</span></span><br><span class="line"><span class="comment">        3.提供一个public static方法，可以返回一个实例对象</span></span><br><span class="line"><span class="comment">        4.只有用户在使用获取实例方法时，才会返回实例对象</span></span><br><span class="line"><span class="comment">        在暴露的方法中判断是否创建过？进行创建实例，或返回创建过的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleDemo02 singleDemo02;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleDemo02</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleDemo02 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleDemo02==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//还没有创建实例</span></span><br><span class="line">            singleDemo02 = <span class="keyword">new</span> <span class="title class_">SingleDemo02</span>(<span class="string">&quot;创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建则返回之前创建的</span></span><br><span class="line">        <span class="keyword">return</span> singleDemo02;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SingleDemo02</span> <span class="variable">singleDemo02</span> <span class="operator">=</span> SingleDemo02.getInstance();</span><br><span class="line">        System.out.println(singleDemo02);</span><br><span class="line">        <span class="type">SingleDemo02</span> <span class="variable">singleDemo022</span> <span class="operator">=</span> SingleDemo02.getInstance();</span><br><span class="line">        System.out.println(singleDemo022);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/2022/06/07/Maven/"/>
      <url>/2022/06/07/Maven/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven基础配置"><a href="#Maven基础配置" class="headerlink" title="Maven基础配置"></a>Maven基础配置</h2><h3 id="1、Maven官方下载"><a href="#1、Maven官方下载" class="headerlink" title="1、Maven官方下载"></a>1、Maven官方下载</h3><p>核心程序</p><p><a href="https://www.apache.org/">Maven下载地址</a></p><h3 id="2、Maven配置本地仓库setting-xml"><a href="#2、Maven配置本地仓库setting-xml" class="headerlink" title="2、Maven配置本地仓库setting.xml"></a>2、Maven配置本地仓库<code>setting.xml</code></h3><p>本地仓库默认值：用户家目录<code>/.m2/repository</code>，一般在C盘，这里修改为其他盘符。Maven自动创建，路径不能含有中文。</p><p><code>&lt;localRepository&gt;D:\maven-repository&lt;/localRepository&gt;</code></p><h3 id="3、配置镜像仓库"><a href="#3、配置镜像仓库" class="headerlink" title="3、配置镜像仓库"></a>3、配置镜像仓库</h3><p>默认访问境外中央仓库，改为阿里镜像仓库</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、配置Maven工程基础JDK版本"><a href="#4、配置Maven工程基础JDK版本" class="headerlink" title="4、配置Maven工程基础JDK版本"></a>4、配置Maven工程基础JDK版本</h3><p>默认版本是1.5，常用是1.8，需修改profiles标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5、配置环境变量"><a href="#5、配置环境变量" class="headerlink" title="5、配置环境变量"></a>5、配置环境变量</h3><p>配置环境变量的规律：</p><ul><li>xxx_HOME  通常指向的是bin目录的上一级</li><li>PATH指向的是bin目录</li></ul><p>验证：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br><span class="line">Apache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0)</span><br><span class="line">Maven home: F:\apache-maven-3.8.5</span><br><span class="line">Java version: 1.8.0_281, vendor: Oracle Corporation, runtime: D:\Program Files\Java\jdk1.8.0_281\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows 10&quot;, version: &quot;10.0&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure><h3 id="6、Maven-命令行环境"><a href="#6、Maven-命令行环境" class="headerlink" title="6、Maven :命令行环境"></a>6、Maven :命令行环境</h3><ol><li><p>根据坐标创建Maven工程</p><ol><li><p>Maven中坐标</p><ol><li>groupId公司或组织id+（项目名）</li><li>artifactId偏向是一个模块（将来作为Maven工程的工程名）</li><li>version版本号<ol><li>SNAPSHOT表示快照版本，正在迭代过程，不稳定版本</li><li>RELEASE表示正式版本</li></ol></li></ol></li><li><p>例如：</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.5&lt;/version&gt;</span><br></pre></td></tr></table></figure><p> 上述坐标对应的jar包在Maven本地仓库的位置：</p><p> <code>Maven本地仓库根目录（localRepository）\javax\servlet\servlet-api\2.5\servlet-api-2.5.jar</code></p></li></ol></li><li><p>使用命令生成Maven工程</p><p> <code>mvn archetype:generate</code></p><ul><li>指定坐标参数</li><li>BUILD SUCCESS（构建成功）</li></ul></li><li><p>调整Junit</p><ol><li>依赖版本改为4.12(生成的项目中的pom.xml文件)</li><li>删除自动生成的App.java和AppTest.java文件</li></ol></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--依赖配置信息 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dependencies复数标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过坐标依赖其他jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖范围 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7、Maven约定的目录结构"><a href="#7、Maven约定的目录结构" class="headerlink" title="7、Maven约定的目录结构"></a>7、Maven约定的目录结构</h3><p>约定大于配置，配置大于编码（coding）</p><p><img src="/pics/Maven%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84.png"></p><ul><li>idea 与 eclipse 创建maven项目（普通&#x2F;web），存在目录不全，需要手动补全</li></ul><ul><li>idea<ul><li>project structure-&gt;指定修改的项目&#x2F;模块目录</li><li>指定文件夹属性</li><li>删除添加错误的文件夹，使用delete</li></ul></li><li>eclipse<ul><li>项目右键build path</li></ul></li></ul><p>对于idea创建maven  web项目出现webapp不正确（文件夹点不显示错误），修改路径<code>src\main</code></p><hr><h3 id="8、子父级项目"><a href="#8、子父级项目" class="headerlink" title="8、子父级项目"></a>8、子父级项目</h3><p><strong>只有打包方式为<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>的Maven工程才能管理其他工程</strong></p><hr><ul><li><p>idea每次创建需要指定maven路径，将maven路径的setting.xml文件复制一份到<code>.m2/</code>下；</p></li><li><p>idea创建父项目</p><ul><li>创建maven项目，不使用插件</li><li>创建子模块（module）</li></ul></li><li><p>eclipse创建父项目</p><ul><li>创建maven项目，使用插件</li><li>更改pom.xml文件为pom</li><li>在build path 删除所有源库等</li><li>删除src文件夹及target</li><li>右键update project</li></ul></li></ul><h3 id="9、Maven构建命令"><a href="#9、Maven构建命令" class="headerlink" title="9、Maven构建命令"></a>9、Maven构建命令</h3><ul><li><p>要求</p><ul><li>必须进入到pom.xml所在目录</li><li>mvn -v命令和构建无关，只要正确配置PATH，即可在任意目录下执行</li></ul></li><li><p>清理操作</p><ul><li>mvn clean</li><li>用于删除target目录</li></ul></li><li><p>编译</p><ul><li>编译根目录下</li><li>mvn compile</li><li>编译test 目录下</li><li>mvn test-compile</li><li>主体程序编译结果存放目录：target&#x2F;classes</li><li>测试程序编译结果存放目录：target&#x2F;test-classes</li></ul></li><li><p>测试操作</p><ul><li>mvn test</li><li>测试的报告存放的目录：target&#x2F;surefire-reports</li></ul></li><li><p>打包操作</p><ul><li>mvn package</li><li>打包的结果 —&#x2F;jar包，存放的目录：target</li></ul></li><li><p>安装操作</p><ul><li>mvn install</li><li>将构建生成的jar包存入本地仓库</li><li>将pom.xml文件转换成XXX.pom文件一起存入本地仓库</li></ul></li></ul><h3 id="10、测试依赖范围scope标签"><a href="#10、测试依赖范围scope标签" class="headerlink" title="10、测试依赖范围scope标签"></a>10、测试依赖范围scope标签</h3><p>标签位置：<code>dependencies/dependency/scope</code></p><p>标签可选值：<code>complile/test/provided/system/runtime/import</code></p><ol><li><p>compile和test</p><table><thead><tr><th>compile&#x2F;test</th><th>mian目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>test</td><td>无效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table></li><li><p>compile和provided</p><table><thead><tr><th>compile&#x2F;provided</th><th>mian目录（空间）</th><th>test目录（空间）</th><th>开发过程（时间）</th><th>部署到服务器（时间）</th></tr></thead><tbody><tr><td>compile</td><td>有效</td><td>有效</td><td>有效</td><td>有效</td></tr><tr><td>provided</td><td>有效</td><td>有效</td><td>有效</td><td>无效</td></tr></tbody></table></li></ol><p>举例：</p><p><code>compile</code>:属于主体功能需要使用，默认</p><p><code>test</code>例子: <code>junit</code></p><p><code>provided</code>例子:<code> tomcat</code> 自带<code>servlet-api.jar</code>，服务器已经提供，所以<code>javaee-api.jar</code>，部署不需要；</p><h3 id="11、依赖的传递性"><a href="#11、依赖的传递性" class="headerlink" title="11、依赖的传递性"></a>11、依赖的传递性</h3><h3 id="12、依赖的排除"><a href="#12、依赖的排除" class="headerlink" title="12、依赖的排除"></a>12、依赖的排除</h3><p>标签位置：<code>dependencies/dependency/exclusions/exclusion</code></p><p>坐标ID，可忽略版本</p><p>依赖冲突：</p><ul><li>声明优先</li><li>路径优先</li></ul><h3 id="13、继承"><a href="#13、继承" class="headerlink" title="13、继承"></a>13、继承</h3><p>父工程与子工程之间</p><p>properties标签就是属性，标签只就是属性值，使用${属性名}表达式</p><h3 id="14、聚合"><a href="#14、聚合" class="headerlink" title="14、聚合"></a>14、聚合</h3><p>模块子模块</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>持久化层所需依赖</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.37<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-dbutils/commons-dbutils --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>表述层所需依赖</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>辅助功能依赖</p>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/junit/junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/2022/06/06/SSM%E6%95%B4%E5%90%88/"/>
      <url>/2022/06/06/SSM%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>整合mybatis+spring+springMVC</p><ul><li>依赖导入</li></ul><p><code>pom文件</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-framework-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  优先设置，防止其他内置包冲突  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--  定时任务支持IOC管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  mybatis  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  数据库  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  json  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单元测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  分页助手  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  切面  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.30.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  文件上传  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><h4 id="配置spring核心配置文件名称自定义，（默认为applicationContext-xml）"><a href="#配置spring核心配置文件名称自定义，（默认为applicationContext-xml）" class="headerlink" title="配置spring核心配置文件名称自定义，（默认为applicationContext.xml）"></a>配置spring核心配置文件名称自定义，（默认为<code>applicationContext.xml</code>）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--1. 开启组件扫描(全包扫描的方式)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.my&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2. 引入外部属性文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3. 声明数据源，配置连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- driverClassName可以不要（官方明确说明）--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;prop.driverClass&#125;&quot;&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc_password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用spring的事务处理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4. 声明事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接的数据库,指定数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--5. 开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象</span></span><br><span class="line"><span class="comment">               transaction-manager :事务管理器对象的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启proxy-target-class=&quot;true&quot; 会使用 cglib 继承的方式去创建代理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;aop:config proxy-target-class=&quot;true&quot;&gt;&lt;/aop:config&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--6. 声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set注入，把数据库连接池赋给dataSource属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis主配置文件的位置</span></span><br><span class="line"><span class="comment">            configLocation属性是Resource类型，读取配置文件</span></span><br><span class="line"><span class="comment">            它的赋值，使用value，指定文件的路径,使用classpath:表示文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 类型别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.my.entity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">                            reasonable=true</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--7. 创建dao对象,使用sqlSession的getMapper (StudentDao.class )</span></span><br><span class="line"><span class="comment">        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定SqlSess ionFactory对象的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定包名，包名是dao接口所在的包名。</span></span><br><span class="line"><span class="comment">         MapperScannerConfigurer会扫描这个包中的所有接口， 把每个接口都执行</span></span><br><span class="line"><span class="comment">        一次getMapper()方法，得到每个接口的dao对象。</span></span><br><span class="line"><span class="comment">        创建好的dao对象放入到spring的容器中的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.my.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明Service class:是ServiceImpl的路径--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--property name：XXXDao ref:是这个XXXDao在容器中的id名--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启Aspect生成代理对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="mybatis-config-xml文件配置"><a href="#mybatis-config-xml文件配置" class="headerlink" title="mybatis-config.xml文件配置"></a><code>mybatis-config.xml</code>文件配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  对于别名等配置已经在spring核心配置文件配置过了，驼峰命名不支持故在这里配置  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  开启驼峰命名  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─.idea</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─com</span><br><span class="line">│  │  │      └─my</span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          ├─dto</span><br><span class="line">│  │  │          ├─entity</span><br><span class="line">│  │  │          ├─enums</span><br><span class="line">│  │  │          ├─factory</span><br><span class="line">│  │  │          ├─handler</span><br><span class="line">│  │  │          ├─mapper</span><br><span class="line">│  │  │          └─service</span><br><span class="line">│  │  │              └─impl</span><br><span class="line">│  │  ├─resources</span><br><span class="line">│  │  │  └─mapper</span><br><span class="line">│  │  └─webapp</span><br><span class="line">│  │      └─WEB-INF</span><br><span class="line">│  │          └─views</span><br><span class="line">│  └─test</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─com</span><br><span class="line">│      │      └─my</span><br><span class="line">│      │          ├─mapper</span><br><span class="line">│      │          └─service</span><br><span class="line">│      │              └─impl</span><br><span class="line">│      └─resources</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><h4 id="配置springmvc相关"><a href="#配置springmvc相关" class="headerlink" title="配置springmvc相关"></a>配置springmvc相关</h4><p>WEB-INF目录下的web.xml文件头，更新为2.5及以上</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 核心控制器DispatcherServlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">           <span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- restful风格--&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="springMVC配置文件"><a href="#springMVC配置文件" class="headerlink" title="springMVC配置文件"></a>springMVC配置文件</h4><p>该文件存放的两个位置的区别：</p><ol><li><p>存放在<code>webapp</code>目录下，名称自定义，但是在配置核心控制器时，需要初始化参数，指定文件的位置（classpath:）</p></li><li><p>存放在与<code>web.xml</code>同级目录下，该文件的名称根据核心控制器的配置名称<code>servlet-name</code>构建，构建名称为<code>*-servlet.xml</code></p><p>配置内容：</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 控制层包扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.my.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理静态资源（.css .js .html等） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:default-servlet-handler</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  拦截器配置  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:interceptors&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mvc:interceptor&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:mapping path=&quot;/*&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=&quot;/register&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=&quot;/login&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;bean class=&quot;com.my.interceptors.LoginHandlerInterceptor&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/mvc:interceptor&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/mvc:interceptors&gt;--&gt;</span></span><br></pre></td></tr></table></figure><p>spring与springmvc扫描的包需要区分，可以使用扫描排除的方式，避免无效扫描</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java spring mvc mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/24/hello-world/"/>
      <url>/2022/05/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="生成分类"><a href="#生成分类" class="headerlink" title="生成分类"></a>生成分类</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><ol><li>生成文件路径：<code>\source\categories\index.md</code>，在该文件内添加<code>type: categories</code>，关闭文件。</li><li>在要添加分类的文章添加<code>categories: hexo</code>，这里的<code>hexo</code>就是自定义的分类名称。</li></ol><h3 id="生成标签"><a href="#生成标签" class="headerlink" title="生成标签"></a>生成标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><ul><li>同生成分类</li></ul><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog 搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
